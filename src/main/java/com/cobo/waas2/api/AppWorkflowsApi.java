/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiCallback;
import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.ApiResponse;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.Pair;
import com.cobo.waas2.ProgressRequestBody;
import com.cobo.waas2.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cobo.waas2.model.AppWorkflow;
import com.cobo.waas2.model.ApprovalRequestDetail;
import com.cobo.waas2.model.CreateApprovalRequest201Response;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.ListApprovalRequests200Response;
import com.cobo.waas2.model.RequestApproval;
import com.cobo.waas2.model.RevokeApprovalRequest201Response;
import com.cobo.waas2.model.RevokeApprovalRequestRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppWorkflowsApi {
    private ApiClient localVarApiClient;

    public AppWorkflowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppWorkflowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createApprovalRequest
     * @param requestApproval The request body to app workflow approval. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApprovalRequestCall(RequestApproval requestApproval, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestApproval;

        // create path and map variables
        String localVarPath = "/app/workflows/approval_requests";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApprovalRequestValidateBeforeCall(RequestApproval requestApproval, final ApiCallback _callback) throws ApiException {
        return createApprovalRequestCall(requestApproval, _callback);

    }

    /**
     * Request workflow approval
     * This operation is request approval from app workflow with idempotency checks. 
     * @param requestApproval The request body to app workflow approval. (optional)
     * @return CreateApprovalRequest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateApprovalRequest201Response createApprovalRequest(RequestApproval requestApproval) throws ApiException {
        ApiResponse<CreateApprovalRequest201Response> localVarResp = createApprovalRequestWithHttpInfo(requestApproval);
        return localVarResp.getData();
    }

    /**
     * Request workflow approval
     * This operation is request approval from app workflow with idempotency checks. 
     * @param requestApproval The request body to app workflow approval. (optional)
     * @return ApiResponse&lt;CreateApprovalRequest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateApprovalRequest201Response> createApprovalRequestWithHttpInfo(RequestApproval requestApproval) throws ApiException {
        okhttp3.Call localVarCall = createApprovalRequestValidateBeforeCall(requestApproval, null);
        Type localVarReturnType = new TypeToken<CreateApprovalRequest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request workflow approval (asynchronously)
     * This operation is request approval from app workflow with idempotency checks. 
     * @param requestApproval The request body to app workflow approval. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApprovalRequestAsync(RequestApproval requestApproval, final ApiCallback<CreateApprovalRequest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApprovalRequestValidateBeforeCall(requestApproval, _callback);
        Type localVarReturnType = new TypeToken<CreateApprovalRequest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApprovalRequestById
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an app workflow approval. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApprovalRequestByIdCall(UUID approvalId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/workflows/approval_requests/{approval_id}"
            .replace("{" + "approval_id" + "}", localVarApiClient.escapeString(approvalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalRequestByIdValidateBeforeCall(UUID approvalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'approvalId' is set
        if (approvalId == null) {
            throw new ApiException("Missing the required parameter 'approvalId' when calling getApprovalRequestById(Async)");
        }

        return getApprovalRequestByIdCall(approvalId, _callback);

    }

    /**
     * Get approval request details
     * This operation is retrieves approval request from app workflow. 
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @return ApprovalRequestDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an app workflow approval. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApprovalRequestDetail getApprovalRequestById(UUID approvalId) throws ApiException {
        ApiResponse<ApprovalRequestDetail> localVarResp = getApprovalRequestByIdWithHttpInfo(approvalId);
        return localVarResp.getData();
    }

    /**
     * Get approval request details
     * This operation is retrieves approval request from app workflow. 
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @return ApiResponse&lt;ApprovalRequestDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an app workflow approval. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApprovalRequestDetail> getApprovalRequestByIdWithHttpInfo(UUID approvalId) throws ApiException {
        okhttp3.Call localVarCall = getApprovalRequestByIdValidateBeforeCall(approvalId, null);
        Type localVarReturnType = new TypeToken<ApprovalRequestDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get approval request details (asynchronously)
     * This operation is retrieves approval request from app workflow. 
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about an app workflow approval. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApprovalRequestByIdAsync(UUID approvalId, final ApiCallback<ApprovalRequestDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalRequestByIdValidateBeforeCall(approvalId, _callback);
        Type localVarReturnType = new TypeToken<ApprovalRequestDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAppWorkflows
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of app workflows have been successfully configured. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppWorkflowsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/workflows";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppWorkflowsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAppWorkflowsCall(_callback);

    }

    /**
     * list app workflows
     * This operation is list app workflows of app. 
     * @return List&lt;AppWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of app workflows have been successfully configured. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppWorkflow> listAppWorkflows() throws ApiException {
        ApiResponse<List<AppWorkflow>> localVarResp = listAppWorkflowsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * list app workflows
     * This operation is list app workflows of app. 
     * @return ApiResponse&lt;List&lt;AppWorkflow&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of app workflows have been successfully configured. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppWorkflow>> listAppWorkflowsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAppWorkflowsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AppWorkflow>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list app workflows (asynchronously)
     * This operation is list app workflows of app. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of app workflows have been successfully configured. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppWorkflowsAsync(final ApiCallback<List<AppWorkflow>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppWorkflowsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AppWorkflow>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApprovalRequests
     * @param operationId The operation ID that is used to track a workflow. The operation ID is provided by you and must be unique within your app. (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approval request have been successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApprovalRequestsCall(String operationId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app/workflows/approval_requests";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation_id", operationId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApprovalRequestsValidateBeforeCall(String operationId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling listApprovalRequests(Async)");
        }

        return listApprovalRequestsCall(operationId, limit, before, after, _callback);

    }

    /**
     * List approval requests
     * This operation is retrieves list approval requests from app workflow. 
     * @param operationId The operation ID that is used to track a workflow. The operation ID is provided by you and must be unique within your app. (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @return ListApprovalRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approval request have been successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListApprovalRequests200Response listApprovalRequests(String operationId, Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListApprovalRequests200Response> localVarResp = listApprovalRequestsWithHttpInfo(operationId, limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List approval requests
     * This operation is retrieves list approval requests from app workflow. 
     * @param operationId The operation ID that is used to track a workflow. The operation ID is provided by you and must be unique within your app. (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @return ApiResponse&lt;ListApprovalRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approval request have been successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApprovalRequests200Response> listApprovalRequestsWithHttpInfo(String operationId, Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listApprovalRequestsValidateBeforeCall(operationId, limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListApprovalRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List approval requests (asynchronously)
     * This operation is retrieves list approval requests from app workflow. 
     * @param operationId The operation ID that is used to track a workflow. The operation ID is provided by you and must be unique within your app. (required)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approval request have been successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApprovalRequestsAsync(String operationId, Integer limit, String before, String after, final ApiCallback<ListApprovalRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApprovalRequestsValidateBeforeCall(operationId, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListApprovalRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeApprovalRequest
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @param revokeApprovalRequestRequest The revoke request body to app workflow approval. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeApprovalRequestCall(UUID approvalId, RevokeApprovalRequestRequest revokeApprovalRequestRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = revokeApprovalRequestRequest;

        // create path and map variables
        String localVarPath = "/app/workflows/approval_requests/{approval_id}/revoke"
            .replace("{" + "approval_id" + "}", localVarApiClient.escapeString(approvalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeApprovalRequestValidateBeforeCall(UUID approvalId, RevokeApprovalRequestRequest revokeApprovalRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'approvalId' is set
        if (approvalId == null) {
            throw new ApiException("Missing the required parameter 'approvalId' when calling revokeApprovalRequest(Async)");
        }

        return revokeApprovalRequestCall(approvalId, revokeApprovalRequestRequest, _callback);

    }

    /**
     * Revoke approval request
     * This operation is revoke approval request from app workflow. 
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @param revokeApprovalRequestRequest The revoke request body to app workflow approval. (optional)
     * @return RevokeApprovalRequest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public RevokeApprovalRequest201Response revokeApprovalRequest(UUID approvalId, RevokeApprovalRequestRequest revokeApprovalRequestRequest) throws ApiException {
        ApiResponse<RevokeApprovalRequest201Response> localVarResp = revokeApprovalRequestWithHttpInfo(approvalId, revokeApprovalRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Revoke approval request
     * This operation is revoke approval request from app workflow. 
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @param revokeApprovalRequestRequest The revoke request body to app workflow approval. (optional)
     * @return ApiResponse&lt;RevokeApprovalRequest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RevokeApprovalRequest201Response> revokeApprovalRequestWithHttpInfo(UUID approvalId, RevokeApprovalRequestRequest revokeApprovalRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = revokeApprovalRequestValidateBeforeCall(approvalId, revokeApprovalRequestRequest, null);
        Type localVarReturnType = new TypeToken<RevokeApprovalRequest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke approval request (asynchronously)
     * This operation is revoke approval request from app workflow. 
     * @param approvalId The approval ID that is used to track a workflow approval request. (required)
     * @param revokeApprovalRequestRequest The revoke request body to app workflow approval. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request workflow approval was successful. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeApprovalRequestAsync(UUID approvalId, RevokeApprovalRequestRequest revokeApprovalRequestRequest, final ApiCallback<RevokeApprovalRequest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeApprovalRequestValidateBeforeCall(approvalId, revokeApprovalRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<RevokeApprovalRequest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
