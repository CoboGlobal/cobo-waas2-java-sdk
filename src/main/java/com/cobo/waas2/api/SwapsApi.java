/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiCallback;
import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.ApiResponse;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.Pair;
import com.cobo.waas2.ProgressRequestBody;
import com.cobo.waas2.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cobo.waas2.model.CreateSwapActivityRequest;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.EstimatedFee;
import com.cobo.waas2.model.ListSwapActivities200Response;
import com.cobo.waas2.model.ListSwapEnabledTokens200Response;
import com.cobo.waas2.model.SwapActivityDetail;
import com.cobo.waas2.model.SwapActivityStatus;
import com.cobo.waas2.model.SwapEstimateFee;
import com.cobo.waas2.model.SwapQuote;
import com.cobo.waas2.model.SwapType;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SwapsApi {
    private ApiClient localVarApiClient;

    public SwapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SwapsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createSwapActivity
     * @param createSwapActivityRequest The request body for creating a swap activity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSwapActivityCall(CreateSwapActivityRequest createSwapActivityRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createSwapActivityRequest;

        // create path and map variables
        String localVarPath = "/swaps/swap";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSwapActivityValidateBeforeCall(CreateSwapActivityRequest createSwapActivityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSwapActivityRequest' is set
        if (createSwapActivityRequest == null) {
            throw new ApiException("Missing the required parameter 'createSwapActivityRequest' when calling createSwapActivity(Async)");
        }

        return createSwapActivityCall(createSwapActivityRequest, _callback);

    }

    /**
     * Create swap activity
     * This operation creates a swap activity. A swap activity can be either a bridge (cross-chain transfer) or an exchange (token-to-token swap on the same chain). 
     * @param createSwapActivityRequest The request body for creating a swap activity. (required)
     * @return SwapActivityDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public SwapActivityDetail createSwapActivity(CreateSwapActivityRequest createSwapActivityRequest) throws ApiException {
        ApiResponse<SwapActivityDetail> localVarResp = createSwapActivityWithHttpInfo(createSwapActivityRequest);
        return localVarResp.getData();
    }

    /**
     * Create swap activity
     * This operation creates a swap activity. A swap activity can be either a bridge (cross-chain transfer) or an exchange (token-to-token swap on the same chain). 
     * @param createSwapActivityRequest The request body for creating a swap activity. (required)
     * @return ApiResponse&lt;SwapActivityDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwapActivityDetail> createSwapActivityWithHttpInfo(CreateSwapActivityRequest createSwapActivityRequest) throws ApiException {
        okhttp3.Call localVarCall = createSwapActivityValidateBeforeCall(createSwapActivityRequest, null);
        Type localVarReturnType = new TypeToken<SwapActivityDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create swap activity (asynchronously)
     * This operation creates a swap activity. A swap activity can be either a bridge (cross-chain transfer) or an exchange (token-to-token swap on the same chain). 
     * @param createSwapActivityRequest The request body for creating a swap activity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSwapActivityAsync(CreateSwapActivityRequest createSwapActivityRequest, final ApiCallback<SwapActivityDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSwapActivityValidateBeforeCall(createSwapActivityRequest, _callback);
        Type localVarReturnType = new TypeToken<SwapActivityDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for estimateSwapFee
     * @param swapEstimateFee The request body for estimating the network fee of a swap activity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The estimated service fee for swap activity successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateSwapFeeCall(SwapEstimateFee swapEstimateFee, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = swapEstimateFee;

        // create path and map variables
        String localVarPath = "/swaps/estimate_fee";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call estimateSwapFeeValidateBeforeCall(SwapEstimateFee swapEstimateFee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'swapEstimateFee' is set
        if (swapEstimateFee == null) {
            throw new ApiException("Missing the required parameter 'swapEstimateFee' when calling estimateSwapFee(Async)");
        }

        return estimateSwapFeeCall(swapEstimateFee, _callback);

    }

    /**
     * Estimate swap fee
     * This operation estimates the network fee of a swap activity. You can use this operation to estimate the network fee before initiating swap activities from MPC Wallets or Web3 Wallets.  It requires a valid &#x60;wallet_id&#x60; and &#x60;quote_id&#x60;, so you need to [get a swap quote](https://www.cobo.com/developers/v2/api-references/swaps/get-swap-quote) first. 
     * @param swapEstimateFee The request body for estimating the network fee of a swap activity. (required)
     * @return EstimatedFee
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The estimated service fee for swap activity successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public EstimatedFee estimateSwapFee(SwapEstimateFee swapEstimateFee) throws ApiException {
        ApiResponse<EstimatedFee> localVarResp = estimateSwapFeeWithHttpInfo(swapEstimateFee);
        return localVarResp.getData();
    }

    /**
     * Estimate swap fee
     * This operation estimates the network fee of a swap activity. You can use this operation to estimate the network fee before initiating swap activities from MPC Wallets or Web3 Wallets.  It requires a valid &#x60;wallet_id&#x60; and &#x60;quote_id&#x60;, so you need to [get a swap quote](https://www.cobo.com/developers/v2/api-references/swaps/get-swap-quote) first. 
     * @param swapEstimateFee The request body for estimating the network fee of a swap activity. (required)
     * @return ApiResponse&lt;EstimatedFee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The estimated service fee for swap activity successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EstimatedFee> estimateSwapFeeWithHttpInfo(SwapEstimateFee swapEstimateFee) throws ApiException {
        okhttp3.Call localVarCall = estimateSwapFeeValidateBeforeCall(swapEstimateFee, null);
        Type localVarReturnType = new TypeToken<EstimatedFee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Estimate swap fee (asynchronously)
     * This operation estimates the network fee of a swap activity. You can use this operation to estimate the network fee before initiating swap activities from MPC Wallets or Web3 Wallets.  It requires a valid &#x60;wallet_id&#x60; and &#x60;quote_id&#x60;, so you need to [get a swap quote](https://www.cobo.com/developers/v2/api-references/swaps/get-swap-quote) first. 
     * @param swapEstimateFee The request body for estimating the network fee of a swap activity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The estimated service fee for swap activity successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call estimateSwapFeeAsync(SwapEstimateFee swapEstimateFee, final ApiCallback<EstimatedFee> _callback) throws ApiException {

        okhttp3.Call localVarCall = estimateSwapFeeValidateBeforeCall(swapEstimateFee, _callback);
        Type localVarReturnType = new TypeToken<EstimatedFee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSwapActivity
     * @param activityId The unique identifier of the swap activity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSwapActivityCall(String activityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/swaps/activities/{activity_id}"
            .replace("{" + "activity_id" + "}", localVarApiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSwapActivityValidateBeforeCall(String activityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling getSwapActivity(Async)");
        }

        return getSwapActivityCall(activityId, _callback);

    }

    /**
     * Get swap activity
     * This operation retrieves detailed information about a specified swap activity. 
     * @param activityId The unique identifier of the swap activity. (required)
     * @return SwapActivityDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public SwapActivityDetail getSwapActivity(String activityId) throws ApiException {
        ApiResponse<SwapActivityDetail> localVarResp = getSwapActivityWithHttpInfo(activityId);
        return localVarResp.getData();
    }

    /**
     * Get swap activity
     * This operation retrieves detailed information about a specified swap activity. 
     * @param activityId The unique identifier of the swap activity. (required)
     * @return ApiResponse&lt;SwapActivityDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwapActivityDetail> getSwapActivityWithHttpInfo(String activityId) throws ApiException {
        okhttp3.Call localVarCall = getSwapActivityValidateBeforeCall(activityId, null);
        Type localVarReturnType = new TypeToken<SwapActivityDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get swap activity (asynchronously)
     * This operation retrieves detailed information about a specified swap activity. 
     * @param activityId The unique identifier of the swap activity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap activity details successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSwapActivityAsync(String activityId, final ApiCallback<SwapActivityDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSwapActivityValidateBeforeCall(activityId, _callback);
        Type localVarReturnType = new TypeToken<SwapActivityDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSwapQuote
     * @param walletId The wallet ID. (required)
     * @param payTokenId The ID of the token to pay. (required)
     * @param receiveTokenId The ID of the token to receive. (required)
     * @param payAmount The amount of the token to pay. (optional)
     * @param receiveAmount The amount of the token to receive. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap quote successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSwapQuoteCall(UUID walletId, String payTokenId, String receiveTokenId, String payAmount, String receiveAmount, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/swaps/quote";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wallet_id", walletId));
        }

        if (payTokenId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pay_token_id", payTokenId));
        }

        if (receiveTokenId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receive_token_id", receiveTokenId));
        }

        if (payAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pay_amount", payAmount));
        }

        if (receiveAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receive_amount", receiveAmount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSwapQuoteValidateBeforeCall(UUID walletId, String payTokenId, String receiveTokenId, String payAmount, String receiveAmount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling getSwapQuote(Async)");
        }

        // verify the required parameter 'payTokenId' is set
        if (payTokenId == null) {
            throw new ApiException("Missing the required parameter 'payTokenId' when calling getSwapQuote(Async)");
        }

        // verify the required parameter 'receiveTokenId' is set
        if (receiveTokenId == null) {
            throw new ApiException("Missing the required parameter 'receiveTokenId' when calling getSwapQuote(Async)");
        }

        return getSwapQuoteCall(walletId, payTokenId, receiveTokenId, payAmount, receiveAmount, _callback);

    }

    /**
     * Get swap quote
     * This operation retrieves the current market exchange rate and estimated service fee. You need to provide &#x60;wallet_id&#x60;, &#x60;pay_token_id&#x60;, and &#x60;receive_token_id&#x60;, along with either &#x60;pay_amount&#x60; or &#x60;receive_amount&#x60;. 
     * @param walletId The wallet ID. (required)
     * @param payTokenId The ID of the token to pay. (required)
     * @param receiveTokenId The ID of the token to receive. (required)
     * @param payAmount The amount of the token to pay. (optional)
     * @param receiveAmount The amount of the token to receive. (optional)
     * @return SwapQuote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap quote successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public SwapQuote getSwapQuote(UUID walletId, String payTokenId, String receiveTokenId, String payAmount, String receiveAmount) throws ApiException {
        ApiResponse<SwapQuote> localVarResp = getSwapQuoteWithHttpInfo(walletId, payTokenId, receiveTokenId, payAmount, receiveAmount);
        return localVarResp.getData();
    }

    /**
     * Get swap quote
     * This operation retrieves the current market exchange rate and estimated service fee. You need to provide &#x60;wallet_id&#x60;, &#x60;pay_token_id&#x60;, and &#x60;receive_token_id&#x60;, along with either &#x60;pay_amount&#x60; or &#x60;receive_amount&#x60;. 
     * @param walletId The wallet ID. (required)
     * @param payTokenId The ID of the token to pay. (required)
     * @param receiveTokenId The ID of the token to receive. (required)
     * @param payAmount The amount of the token to pay. (optional)
     * @param receiveAmount The amount of the token to receive. (optional)
     * @return ApiResponse&lt;SwapQuote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap quote successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwapQuote> getSwapQuoteWithHttpInfo(UUID walletId, String payTokenId, String receiveTokenId, String payAmount, String receiveAmount) throws ApiException {
        okhttp3.Call localVarCall = getSwapQuoteValidateBeforeCall(walletId, payTokenId, receiveTokenId, payAmount, receiveAmount, null);
        Type localVarReturnType = new TypeToken<SwapQuote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get swap quote (asynchronously)
     * This operation retrieves the current market exchange rate and estimated service fee. You need to provide &#x60;wallet_id&#x60;, &#x60;pay_token_id&#x60;, and &#x60;receive_token_id&#x60;, along with either &#x60;pay_amount&#x60; or &#x60;receive_amount&#x60;. 
     * @param walletId The wallet ID. (required)
     * @param payTokenId The ID of the token to pay. (required)
     * @param receiveTokenId The ID of the token to receive. (required)
     * @param payAmount The amount of the token to pay. (optional)
     * @param receiveAmount The amount of the token to receive. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swap quote successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSwapQuoteAsync(UUID walletId, String payTokenId, String receiveTokenId, String payAmount, String receiveAmount, final ApiCallback<SwapQuote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSwapQuoteValidateBeforeCall(walletId, payTokenId, receiveTokenId, payAmount, receiveAmount, _callback);
        Type localVarReturnType = new TypeToken<SwapQuote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSwapActivities
     * @param type  (optional)
     * @param status  (optional)
     * @param minUpdatedTimestamp The start time of the query. All swap activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param maxUpdatedTimestamp The end time of the query. All swap activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param initiator The initiator of the swap activity. It is optional when creating the activity and defaults to your API key if not specified. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param sortBy The field to sort the results by.   Possible values include: - &#x60;created_timestamp&#x60;: Sort by the time when the data was created. - &#x60;updated_timestamp&#x60;: Sort by the time when the data was last updated.  (optional)
     * @param direction The sort direction. Possible values include:   - &#x60;ASC&#x60;: Sort the results in ascending order.   - &#x60;DESC&#x60;: Sort the results in descending order.  (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of swap activities successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSwapActivitiesCall(SwapType type, SwapActivityStatus status, Long minUpdatedTimestamp, Long maxUpdatedTimestamp, String initiator, Integer limit, String before, String after, String sortBy, String direction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/swaps/activities";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (minUpdatedTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_updated_timestamp", minUpdatedTimestamp));
        }

        if (maxUpdatedTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_updated_timestamp", maxUpdatedTimestamp));
        }

        if (initiator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initiator", initiator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSwapActivitiesValidateBeforeCall(SwapType type, SwapActivityStatus status, Long minUpdatedTimestamp, Long maxUpdatedTimestamp, String initiator, Integer limit, String before, String after, String sortBy, String direction, final ApiCallback _callback) throws ApiException {
        return listSwapActivitiesCall(type, status, minUpdatedTimestamp, maxUpdatedTimestamp, initiator, limit, before, after, sortBy, direction, _callback);

    }

    /**
     * List swap activities
     * This operation retrieves a list of swap activities. You can filter the results by swap type, status, initiator, and time range. 
     * @param type  (optional)
     * @param status  (optional)
     * @param minUpdatedTimestamp The start time of the query. All swap activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param maxUpdatedTimestamp The end time of the query. All swap activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param initiator The initiator of the swap activity. It is optional when creating the activity and defaults to your API key if not specified. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param sortBy The field to sort the results by.   Possible values include: - &#x60;created_timestamp&#x60;: Sort by the time when the data was created. - &#x60;updated_timestamp&#x60;: Sort by the time when the data was last updated.  (optional)
     * @param direction The sort direction. Possible values include:   - &#x60;ASC&#x60;: Sort the results in ascending order.   - &#x60;DESC&#x60;: Sort the results in descending order.  (optional, default to ASC)
     * @return ListSwapActivities200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of swap activities successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListSwapActivities200Response listSwapActivities(SwapType type, SwapActivityStatus status, Long minUpdatedTimestamp, Long maxUpdatedTimestamp, String initiator, Integer limit, String before, String after, String sortBy, String direction) throws ApiException {
        ApiResponse<ListSwapActivities200Response> localVarResp = listSwapActivitiesWithHttpInfo(type, status, minUpdatedTimestamp, maxUpdatedTimestamp, initiator, limit, before, after, sortBy, direction);
        return localVarResp.getData();
    }

    /**
     * List swap activities
     * This operation retrieves a list of swap activities. You can filter the results by swap type, status, initiator, and time range. 
     * @param type  (optional)
     * @param status  (optional)
     * @param minUpdatedTimestamp The start time of the query. All swap activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param maxUpdatedTimestamp The end time of the query. All swap activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param initiator The initiator of the swap activity. It is optional when creating the activity and defaults to your API key if not specified. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param sortBy The field to sort the results by.   Possible values include: - &#x60;created_timestamp&#x60;: Sort by the time when the data was created. - &#x60;updated_timestamp&#x60;: Sort by the time when the data was last updated.  (optional)
     * @param direction The sort direction. Possible values include:   - &#x60;ASC&#x60;: Sort the results in ascending order.   - &#x60;DESC&#x60;: Sort the results in descending order.  (optional, default to ASC)
     * @return ApiResponse&lt;ListSwapActivities200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of swap activities successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSwapActivities200Response> listSwapActivitiesWithHttpInfo(SwapType type, SwapActivityStatus status, Long minUpdatedTimestamp, Long maxUpdatedTimestamp, String initiator, Integer limit, String before, String after, String sortBy, String direction) throws ApiException {
        okhttp3.Call localVarCall = listSwapActivitiesValidateBeforeCall(type, status, minUpdatedTimestamp, maxUpdatedTimestamp, initiator, limit, before, after, sortBy, direction, null);
        Type localVarReturnType = new TypeToken<ListSwapActivities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List swap activities (asynchronously)
     * This operation retrieves a list of swap activities. You can filter the results by swap type, status, initiator, and time range. 
     * @param type  (optional)
     * @param status  (optional)
     * @param minUpdatedTimestamp The start time of the query. All swap activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param maxUpdatedTimestamp The end time of the query. All swap activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds. (optional)
     * @param initiator The initiator of the swap activity. It is optional when creating the activity and defaults to your API key if not specified. (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param sortBy The field to sort the results by.   Possible values include: - &#x60;created_timestamp&#x60;: Sort by the time when the data was created. - &#x60;updated_timestamp&#x60;: Sort by the time when the data was last updated.  (optional)
     * @param direction The sort direction. Possible values include:   - &#x60;ASC&#x60;: Sort the results in ascending order.   - &#x60;DESC&#x60;: Sort the results in descending order.  (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of swap activities successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSwapActivitiesAsync(SwapType type, SwapActivityStatus status, Long minUpdatedTimestamp, Long maxUpdatedTimestamp, String initiator, Integer limit, String before, String after, String sortBy, String direction, final ApiCallback<ListSwapActivities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSwapActivitiesValidateBeforeCall(type, status, minUpdatedTimestamp, maxUpdatedTimestamp, initiator, limit, before, after, sortBy, direction, _callback);
        Type localVarReturnType = new TypeToken<ListSwapActivities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSwapEnabledTokens
     * @param type  (optional)
     * @param assetId (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. (optional)
     * @param chainId The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of enabled tokens successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSwapEnabledTokensCall(SwapType type, String assetId, String chainId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/swaps/enabled_tokens";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (chainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain_id", chainId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(null, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSwapEnabledTokensValidateBeforeCall(SwapType type, String assetId, String chainId, Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        return listSwapEnabledTokensCall(type, assetId, chainId, limit, before, after, _callback);

    }

    /**
     * List enabled tokens for swap
     * This operation retrieves a list of tokens that are enabled for the swap feature. You can filter the results by swap type, asset ID, and chain ID. 
     * @param type  (optional)
     * @param assetId (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. (optional)
     * @param chainId The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @return ListSwapEnabledTokens200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of enabled tokens successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ListSwapEnabledTokens200Response listSwapEnabledTokens(SwapType type, String assetId, String chainId, Integer limit, String before, String after) throws ApiException {
        ApiResponse<ListSwapEnabledTokens200Response> localVarResp = listSwapEnabledTokensWithHttpInfo(type, assetId, chainId, limit, before, after);
        return localVarResp.getData();
    }

    /**
     * List enabled tokens for swap
     * This operation retrieves a list of tokens that are enabled for the swap feature. You can filter the results by swap type, asset ID, and chain ID. 
     * @param type  (optional)
     * @param assetId (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. (optional)
     * @param chainId The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @return ApiResponse&lt;ListSwapEnabledTokens200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of enabled tokens successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSwapEnabledTokens200Response> listSwapEnabledTokensWithHttpInfo(SwapType type, String assetId, String chainId, Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listSwapEnabledTokensValidateBeforeCall(type, assetId, chainId, limit, before, after, null);
        Type localVarReturnType = new TypeToken<ListSwapEnabledTokens200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List enabled tokens for swap (asynchronously)
     * This operation retrieves a list of tokens that are enabled for the swap feature. You can filter the results by swap type, asset ID, and chain ID. 
     * @param type  (optional)
     * @param assetId (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. (optional)
     * @param chainId The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains). (optional)
     * @param limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (optional, default to 10)
     * @param before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.  (optional)
     * @param after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of enabled tokens successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Bad request. Your request contains malformed syntax or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSwapEnabledTokensAsync(SwapType type, String assetId, String chainId, Integer limit, String before, String after, final ApiCallback<ListSwapEnabledTokens200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSwapEnabledTokensValidateBeforeCall(type, assetId, chainId, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<ListSwapEnabledTokens200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
