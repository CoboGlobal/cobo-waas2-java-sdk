/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.SafeTxDecodedData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * The information about the sub-transaction.
 */
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class SafeTxSubTransaction {
  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_WEI = "wei";
  @SerializedName(SERIALIZED_NAME_WEI)
  private String wei;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DATA_DECODED = "data_decoded";
  @SerializedName(SERIALIZED_NAME_DATA_DECODED)
  private SafeTxDecodedData dataDecoded;

  public static final String SERIALIZED_NAME_TO_CONTRACT_NAME = "to_contract_name";
  @SerializedName(SERIALIZED_NAME_TO_CONTRACT_NAME)
  private String toContractName;

  public SafeTxSubTransaction() {
  }

  public SafeTxSubTransaction operation(String operation) {
    this.operation = operation;
    return this;
  }

   /**
   * The type of operation in the sub-transaction.
   * @return operation
  **/
  @jakarta.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public SafeTxSubTransaction to(String to) {
    this.to = to;
    return this;
  }

   /**
   * The destination address of the sub-transaction.
   * @return to
  **/
  @jakarta.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public SafeTxSubTransaction value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The human-readable transaction value, for example, &#x60;1 ETH&#x60;.
   * @return value
  **/
  @jakarta.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public SafeTxSubTransaction wei(String wei) {
    this.wei = wei;
    return this;
  }

   /**
   * The transaction amount in Wei
   * @return wei
  **/
  @jakarta.annotation.Nullable
  public String getWei() {
    return wei;
  }

  public void setWei(String wei) {
    this.wei = wei;
  }


  public SafeTxSubTransaction data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Encoded transaction data
   * @return data
  **/
  @jakarta.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public SafeTxSubTransaction dataDecoded(SafeTxDecodedData dataDecoded) {
    this.dataDecoded = dataDecoded;
    return this;
  }

   /**
   * Get dataDecoded
   * @return dataDecoded
  **/
  @jakarta.annotation.Nullable
  public SafeTxDecodedData getDataDecoded() {
    return dataDecoded;
  }

  public void setDataDecoded(SafeTxDecodedData dataDecoded) {
    this.dataDecoded = dataDecoded;
  }


  public SafeTxSubTransaction toContractName(String toContractName) {
    this.toContractName = toContractName;
    return this;
  }

   /**
   * The name of the recipient contract (if available).
   * @return toContractName
  **/
  @jakarta.annotation.Nullable
  public String getToContractName() {
    return toContractName;
  }

  public void setToContractName(String toContractName) {
    this.toContractName = toContractName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SafeTxSubTransaction instance itself
   */
  public SafeTxSubTransaction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SafeTxSubTransaction safeTxSubTransaction = (SafeTxSubTransaction) o;
    return Objects.equals(this.operation, safeTxSubTransaction.operation) &&
        Objects.equals(this.to, safeTxSubTransaction.to) &&
        Objects.equals(this.value, safeTxSubTransaction.value) &&
        Objects.equals(this.wei, safeTxSubTransaction.wei) &&
        Objects.equals(this.data, safeTxSubTransaction.data) &&
        Objects.equals(this.dataDecoded, safeTxSubTransaction.dataDecoded) &&
        Objects.equals(this.toContractName, safeTxSubTransaction.toContractName)&&
        Objects.equals(this.additionalProperties, safeTxSubTransaction.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, to, value, wei, data, dataDecoded, toContractName, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SafeTxSubTransaction {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    wei: ").append(toIndentedString(wei)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataDecoded: ").append(toIndentedString(dataDecoded)).append("\n");
    sb.append("    toContractName: ").append(toIndentedString(toContractName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operation");
    openapiFields.add("to");
    openapiFields.add("value");
    openapiFields.add("wei");
    openapiFields.add("data");
    openapiFields.add("data_decoded");
    openapiFields.add("to_contract_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SafeTxSubTransaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SafeTxSubTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SafeTxSubTransaction is not found in the empty JSON string", SafeTxSubTransaction.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("wei") != null && !jsonObj.get("wei").isJsonNull()) && !jsonObj.get("wei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wei").toString()));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // validate the optional field `data_decoded`
      if (jsonObj.get("data_decoded") != null && !jsonObj.get("data_decoded").isJsonNull()) {
        SafeTxDecodedData.validateJsonElement(jsonObj.get("data_decoded"));
      }
      if ((jsonObj.get("to_contract_name") != null && !jsonObj.get("to_contract_name").isJsonNull()) && !jsonObj.get("to_contract_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_contract_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_contract_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SafeTxSubTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SafeTxSubTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SafeTxSubTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SafeTxSubTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<SafeTxSubTransaction>() {
           @Override
           public void write(JsonWriter out, SafeTxSubTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SafeTxSubTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SafeTxSubTransaction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SafeTxSubTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SafeTxSubTransaction
  * @throws IOException if the JSON string is invalid with respect to SafeTxSubTransaction
  */
  public static SafeTxSubTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SafeTxSubTransaction.class);
  }

 /**
  * Convert an instance of SafeTxSubTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

