/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of the request. Possible values include:  - 0 : Ping. Used for heartbeat monitoring. - 1 : KeyGen. Creating new key shares for your MPC Wallets. - 2 : KeySign. Signing transactions or messages. - 3 : KeyReshare. Redistributing key shares among participants. - 5 : KeyShareSign. Signing messages with key shares. 
 */
@JsonAdapter(TSSCallbackRequestType.Adapter.class)
public enum TSSCallbackRequestType {
  UNKNOWN(null),
  
  PING(0),
  
  KEYGEN(1),
  
  KEYSIGN(2),
  
  KEYRESHARE(3),
  
  KEYSHARESIGN(5);

  private Integer value;

  TSSCallbackRequestType(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TSSCallbackRequestType fromValue(Integer value) {
    for (TSSCallbackRequestType b : TSSCallbackRequestType.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TSSCallbackRequestType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TSSCallbackRequestType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TSSCallbackRequestType read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return TSSCallbackRequestType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    TSSCallbackRequestType.fromValue(value);
  }
}

