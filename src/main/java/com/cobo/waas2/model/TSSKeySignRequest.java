/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.TSSProtocol;
import com.cobo.waas2.model.TSSSignatureType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * TSSKeySignRequest
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TSSKeySignRequest {
  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_ROOT_PUB_KEY = "root_pub_key";
  @SerializedName(SERIALIZED_NAME_ROOT_PUB_KEY)
  private String rootPubKey;

  public static final String SERIALIZED_NAME_USED_NODE_IDS = "used_node_ids";
  @SerializedName(SERIALIZED_NAME_USED_NODE_IDS)
  private List<String> usedNodeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIP32_PATH_LIST = "bip32_path_list";
  @SerializedName(SERIALIZED_NAME_BIP32_PATH_LIST)
  private List<String> bip32PathList = new ArrayList<>();

  public static final String SERIALIZED_NAME_MSG_HASH_LIST = "msg_hash_list";
  @SerializedName(SERIALIZED_NAME_MSG_HASH_LIST)
  private List<String> msgHashList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TWEAK_LIST = "tweak_list";
  @SerializedName(SERIALIZED_NAME_TWEAK_LIST)
  private List<String> tweakList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNATURE_TYPE = "signature_type";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_TYPE)
  private TSSSignatureType signatureType;

  public static final String SERIALIZED_NAME_TSS_PROTOCOL = "tss_protocol";
  @SerializedName(SERIALIZED_NAME_TSS_PROTOCOL)
  private TSSProtocol tssProtocol;

  public static final String SERIALIZED_NAME_TASK_ID = "task_id";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_BIZ_TASK_ID = "biz_task_id";
  @SerializedName(SERIALIZED_NAME_BIZ_TASK_ID)
  private String bizTaskId;

  public TSSKeySignRequest() {
  }

  public TSSKeySignRequest groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * The TSS key share group ID.
   * @return groupId
  **/
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public TSSKeySignRequest rootPubKey(String rootPubKey) {
    this.rootPubKey = rootPubKey;
    return this;
  }

   /**
   * The The old TSS key share group&#39;s root extended public key.
   * @return rootPubKey
  **/
  @javax.annotation.Nullable
  public String getRootPubKey() {
    return rootPubKey;
  }

  public void setRootPubKey(String rootPubKey) {
    this.rootPubKey = rootPubKey;
  }


  public TSSKeySignRequest usedNodeIds(List<String> usedNodeIds) {
    this.usedNodeIds = usedNodeIds;
    return this;
  }

  public TSSKeySignRequest addUsedNodeIdsItem(String usedNodeIdsItem) {
    if (this.usedNodeIds == null) {
      this.usedNodeIds = new ArrayList<>();
    }
    this.usedNodeIds.add(usedNodeIdsItem);
    return this;
  }

   /**
   * Get usedNodeIds
   * @return usedNodeIds
  **/
  @javax.annotation.Nullable
  public List<String> getUsedNodeIds() {
    return usedNodeIds;
  }

  public void setUsedNodeIds(List<String> usedNodeIds) {
    this.usedNodeIds = usedNodeIds;
  }


  public TSSKeySignRequest bip32PathList(List<String> bip32PathList) {
    this.bip32PathList = bip32PathList;
    return this;
  }

  public TSSKeySignRequest addBip32PathListItem(String bip32PathListItem) {
    if (this.bip32PathList == null) {
      this.bip32PathList = new ArrayList<>();
    }
    this.bip32PathList.add(bip32PathListItem);
    return this;
  }

   /**
   * Get bip32PathList
   * @return bip32PathList
  **/
  @javax.annotation.Nullable
  public List<String> getBip32PathList() {
    return bip32PathList;
  }

  public void setBip32PathList(List<String> bip32PathList) {
    this.bip32PathList = bip32PathList;
  }


  public TSSKeySignRequest msgHashList(List<String> msgHashList) {
    this.msgHashList = msgHashList;
    return this;
  }

  public TSSKeySignRequest addMsgHashListItem(String msgHashListItem) {
    if (this.msgHashList == null) {
      this.msgHashList = new ArrayList<>();
    }
    this.msgHashList.add(msgHashListItem);
    return this;
  }

   /**
   * Get msgHashList
   * @return msgHashList
  **/
  @javax.annotation.Nullable
  public List<String> getMsgHashList() {
    return msgHashList;
  }

  public void setMsgHashList(List<String> msgHashList) {
    this.msgHashList = msgHashList;
  }


  public TSSKeySignRequest tweakList(List<String> tweakList) {
    this.tweakList = tweakList;
    return this;
  }

  public TSSKeySignRequest addTweakListItem(String tweakListItem) {
    if (this.tweakList == null) {
      this.tweakList = new ArrayList<>();
    }
    this.tweakList.add(tweakListItem);
    return this;
  }

   /**
   * Get tweakList
   * @return tweakList
  **/
  @javax.annotation.Nullable
  public List<String> getTweakList() {
    return tweakList;
  }

  public void setTweakList(List<String> tweakList) {
    this.tweakList = tweakList;
  }


  public TSSKeySignRequest signatureType(TSSSignatureType signatureType) {
    this.signatureType = signatureType;
    return this;
  }

   /**
   * Get signatureType
   * @return signatureType
  **/
  @javax.annotation.Nullable
  public TSSSignatureType getSignatureType() {
    return signatureType;
  }

  public void setSignatureType(TSSSignatureType signatureType) {
    this.signatureType = signatureType;
  }


  public TSSKeySignRequest tssProtocol(TSSProtocol tssProtocol) {
    this.tssProtocol = tssProtocol;
    return this;
  }

   /**
   * Get tssProtocol
   * @return tssProtocol
  **/
  @javax.annotation.Nullable
  public TSSProtocol getTssProtocol() {
    return tssProtocol;
  }

  public void setTssProtocol(TSSProtocol tssProtocol) {
    this.tssProtocol = tssProtocol;
  }


  public TSSKeySignRequest taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * The task ID.
   * @return taskId
  **/
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public TSSKeySignRequest bizTaskId(String bizTaskId) {
    this.bizTaskId = bizTaskId;
    return this;
  }

   /**
   * The business task ID. This field contains the transaction ID.
   * @return bizTaskId
  **/
  @javax.annotation.Nullable
  public String getBizTaskId() {
    return bizTaskId;
  }

  public void setBizTaskId(String bizTaskId) {
    this.bizTaskId = bizTaskId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TSSKeySignRequest instance itself
   */
  public TSSKeySignRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TSSKeySignRequest tsSKeySignRequest = (TSSKeySignRequest) o;
    return Objects.equals(this.groupId, tsSKeySignRequest.groupId) &&
        Objects.equals(this.rootPubKey, tsSKeySignRequest.rootPubKey) &&
        Objects.equals(this.usedNodeIds, tsSKeySignRequest.usedNodeIds) &&
        Objects.equals(this.bip32PathList, tsSKeySignRequest.bip32PathList) &&
        Objects.equals(this.msgHashList, tsSKeySignRequest.msgHashList) &&
        Objects.equals(this.tweakList, tsSKeySignRequest.tweakList) &&
        Objects.equals(this.signatureType, tsSKeySignRequest.signatureType) &&
        Objects.equals(this.tssProtocol, tsSKeySignRequest.tssProtocol) &&
        Objects.equals(this.taskId, tsSKeySignRequest.taskId) &&
        Objects.equals(this.bizTaskId, tsSKeySignRequest.bizTaskId)&&
        Objects.equals(this.additionalProperties, tsSKeySignRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, rootPubKey, usedNodeIds, bip32PathList, msgHashList, tweakList, signatureType, tssProtocol, taskId, bizTaskId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TSSKeySignRequest {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    rootPubKey: ").append(toIndentedString(rootPubKey)).append("\n");
    sb.append("    usedNodeIds: ").append(toIndentedString(usedNodeIds)).append("\n");
    sb.append("    bip32PathList: ").append(toIndentedString(bip32PathList)).append("\n");
    sb.append("    msgHashList: ").append(toIndentedString(msgHashList)).append("\n");
    sb.append("    tweakList: ").append(toIndentedString(tweakList)).append("\n");
    sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
    sb.append("    tssProtocol: ").append(toIndentedString(tssProtocol)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    bizTaskId: ").append(toIndentedString(bizTaskId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group_id");
    openapiFields.add("root_pub_key");
    openapiFields.add("used_node_ids");
    openapiFields.add("bip32_path_list");
    openapiFields.add("msg_hash_list");
    openapiFields.add("tweak_list");
    openapiFields.add("signature_type");
    openapiFields.add("tss_protocol");
    openapiFields.add("task_id");
    openapiFields.add("biz_task_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TSSKeySignRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TSSKeySignRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TSSKeySignRequest is not found in the empty JSON string", TSSKeySignRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
      if ((jsonObj.get("root_pub_key") != null && !jsonObj.get("root_pub_key").isJsonNull()) && !jsonObj.get("root_pub_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_pub_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_pub_key").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("used_node_ids") != null && !jsonObj.get("used_node_ids").isJsonNull() && !jsonObj.get("used_node_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `used_node_ids` to be an array in the JSON string but got `%s`", jsonObj.get("used_node_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bip32_path_list") != null && !jsonObj.get("bip32_path_list").isJsonNull() && !jsonObj.get("bip32_path_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bip32_path_list` to be an array in the JSON string but got `%s`", jsonObj.get("bip32_path_list").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("msg_hash_list") != null && !jsonObj.get("msg_hash_list").isJsonNull() && !jsonObj.get("msg_hash_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg_hash_list` to be an array in the JSON string but got `%s`", jsonObj.get("msg_hash_list").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tweak_list") != null && !jsonObj.get("tweak_list").isJsonNull() && !jsonObj.get("tweak_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tweak_list` to be an array in the JSON string but got `%s`", jsonObj.get("tweak_list").toString()));
      }
      // validate the optional field `signature_type`
      if (jsonObj.get("signature_type") != null && !jsonObj.get("signature_type").isJsonNull()) {
        TSSSignatureType.validateJsonElement(jsonObj.get("signature_type"));
      }
      // validate the optional field `tss_protocol`
      if (jsonObj.get("tss_protocol") != null && !jsonObj.get("tss_protocol").isJsonNull()) {
        TSSProtocol.validateJsonElement(jsonObj.get("tss_protocol"));
      }
      if ((jsonObj.get("task_id") != null && !jsonObj.get("task_id").isJsonNull()) && !jsonObj.get("task_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_id").toString()));
      }
      if ((jsonObj.get("biz_task_id") != null && !jsonObj.get("biz_task_id").isJsonNull()) && !jsonObj.get("biz_task_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biz_task_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biz_task_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TSSKeySignRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TSSKeySignRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TSSKeySignRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TSSKeySignRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TSSKeySignRequest>() {
           @Override
           public void write(JsonWriter out, TSSKeySignRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TSSKeySignRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TSSKeySignRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TSSKeySignRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TSSKeySignRequest
  * @throws IOException if the JSON string is invalid with respect to TSSKeySignRequest
  */
  public static TSSKeySignRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TSSKeySignRequest.class);
  }

 /**
  * Convert an instance of TSSKeySignRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

