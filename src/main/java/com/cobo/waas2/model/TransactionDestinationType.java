/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The transaction destination type. Possible values include:   - &#x60;Address&#x60;: An address transfer destination, including an address of Custodial Wallets, MPC Wallets, or Smart Contract Wallets (Safe{Wallet}) and an external address.   - &#x60;ExchangeWallet&#x60;: An Exchange Wallet transfer destination.   - &#x60;EVM_Contract&#x60;: An EVM compatible contract.   - &#x60;EVM_EIP_191_Signature&#x60;: An EVM EIP-191 signature. For more details, see [Signed Data Standard](https://eips.ethereum.org/EIPS/eip-191).   - &#x60;EVM_EIP_712_Signature&#x60;: An EVM EIP-712 signature. For more details, see [Typed structured data hashing and signing](https://eips.ethereum.org/EIPS/eip-712).   - &#x60;DepositToAddress&#x60;: An address that can be a Cobo&#39;s wallet address or an external address.   - &#x60;DepositToWallet&#x60;: An Exchange Wallet.  For the same transaction, the transaction destination varies depending on whether you are the initiator or the receiver of the transaction.     - As the initiator, you will see detailed information about the transaction destination, and the &#x60;destination&#x60; will be displayed as one of the following types: &#x60;EVM_Contract&#x60;, &#x60;EVM_EIP_191_Signature&#x60;, &#x60;EVM_EIP_712_Signature&#x60;, &#x60;DepositToAddress&#x60;, or &#x60;DepositToWallet&#x60;. &#x60;DepositToWallet&#x60; indicates the destination is an Exchange Wallet, while &#x60;DepositToAddress&#x60; indicates the destination is a wallet of other wallet types or an external address.   - As the receiver, you will see the &#x60;destination&#x60; as the type &#x60;Address&#x60; or &#x60;ExchangeWallet&#x60;. &#x60;Address&#x60; indicates the destination is a wallet of other wallet types than Exchange Wallets or an external address. 
 */
@JsonAdapter(TransactionDestinationType.Adapter.class)
public enum TransactionDestinationType {
  UNKNOWN(null),
  
  ADDRESS("Address"),
  
  EXCHANGEWALLET("ExchangeWallet"),
  
  EVM_CONTRACT("EVM_Contract"),
  
  EVM_EIP_191_SIGNATURE("EVM_EIP_191_Signature"),
  
  EVM_EIP_712_SIGNATURE("EVM_EIP_712_Signature"),
  
  DEPOSITTOADDRESS("DepositToAddress"),
  
  DEPOSITTOWALLET("DepositToWallet");

  private String value;

  TransactionDestinationType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransactionDestinationType fromValue(String value) {
    for (TransactionDestinationType b : TransactionDestinationType.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TransactionDestinationType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransactionDestinationType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TransactionDestinationType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TransactionDestinationType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TransactionDestinationType.fromValue(value);
  }
}

