/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The current status of a subscription action. - &#x60;Pending&#x60;: The subscription has been created and is awaiting approve. - &#x60;WaitingApproval&#x60;: The subscription approve transaction is create and is awaiting transaction completed. - &#x60;Approved&#x60;: The subscription has been approved and is waiting subscript . - &#x60;Processing&#x60;: The subscription subscript transaction is create and is awaiting transaction completed. - &#x60;Active&#x60;: The subscription is active. - &#x60;InsufficientApproval&#x60;: The subscription is insufficient approval. - &#x60;Paused&#x60;: The subscription is paused. - &#x60;Ended&#x60;: The subscription is ended. - &#x60;Canceled&#x60;: The subscription is canceled. - &#x60;Failed&#x60;: The subscription is failed. 
 */
@JsonAdapter(PaymentSubscriptionStatus.Adapter.class)
public enum PaymentSubscriptionStatus {
  UNKNOWN(null),
  
  PENDING("Pending"),
  
  WAITINGAPPROVAL("WaitingApproval"),
  
  APPROVED("Approved"),
  
  PROCESSING("Processing"),
  
  ACTIVE("Active"),
  
  INSUFFICIENTAPPROVAL("InsufficientApproval"),
  
  PAUSED("Paused"),
  
  ENDED("Ended"),
  
  CANCELED("Canceled"),
  
  FAILED("Failed");

  private String value;

  PaymentSubscriptionStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PaymentSubscriptionStatus fromValue(String value) {
    for (PaymentSubscriptionStatus b : PaymentSubscriptionStatus.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PaymentSubscriptionStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final PaymentSubscriptionStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PaymentSubscriptionStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PaymentSubscriptionStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    PaymentSubscriptionStatus.fromValue(value);
  }
}

