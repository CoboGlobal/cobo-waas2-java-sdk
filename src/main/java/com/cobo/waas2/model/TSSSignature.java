/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * TSSSignature
 */
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TSSSignature {
  public static final String SERIALIZED_NAME_BIP32_PATH = "bip32_path";
  @SerializedName(SERIALIZED_NAME_BIP32_PATH)
  private String bip32Path;

  public static final String SERIALIZED_NAME_MSG_HASH = "msg_hash";
  @SerializedName(SERIALIZED_NAME_MSG_HASH)
  private String msgHash;

  public static final String SERIALIZED_NAME_TWEAK = "tweak";
  @SerializedName(SERIALIZED_NAME_TWEAK)
  private String tweak;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SIGNATURE_RECOVERY = "signature_recovery";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_RECOVERY)
  private String signatureRecovery;

  public TSSSignature() {
  }

  public TSSSignature bip32Path(String bip32Path) {
    this.bip32Path = bip32Path;
    return this;
  }

   /**
   * The BIP32 path.
   * @return bip32Path
  **/
  @jakarta.annotation.Nullable
  public String getBip32Path() {
    return bip32Path;
  }

  public void setBip32Path(String bip32Path) {
    this.bip32Path = bip32Path;
  }


  public TSSSignature msgHash(String msgHash) {
    this.msgHash = msgHash;
    return this;
  }

   /**
   * The message hash.
   * @return msgHash
  **/
  @jakarta.annotation.Nullable
  public String getMsgHash() {
    return msgHash;
  }

  public void setMsgHash(String msgHash) {
    this.msgHash = msgHash;
  }


  public TSSSignature tweak(String tweak) {
    this.tweak = tweak;
    return this;
  }

   /**
   * The tweak.
   * @return tweak
  **/
  @jakarta.annotation.Nullable
  public String getTweak() {
    return tweak;
  }

  public void setTweak(String tweak) {
    this.tweak = tweak;
  }


  public TSSSignature signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * The signature.
   * @return signature
  **/
  @jakarta.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public TSSSignature signatureRecovery(String signatureRecovery) {
    this.signatureRecovery = signatureRecovery;
    return this;
  }

   /**
   * The signature recovery.
   * @return signatureRecovery
  **/
  @jakarta.annotation.Nullable
  public String getSignatureRecovery() {
    return signatureRecovery;
  }

  public void setSignatureRecovery(String signatureRecovery) {
    this.signatureRecovery = signatureRecovery;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TSSSignature instance itself
   */
  public TSSSignature putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TSSSignature tsSSignature = (TSSSignature) o;
    return Objects.equals(this.bip32Path, tsSSignature.bip32Path) &&
        Objects.equals(this.msgHash, tsSSignature.msgHash) &&
        Objects.equals(this.tweak, tsSSignature.tweak) &&
        Objects.equals(this.signature, tsSSignature.signature) &&
        Objects.equals(this.signatureRecovery, tsSSignature.signatureRecovery)&&
        Objects.equals(this.additionalProperties, tsSSignature.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bip32Path, msgHash, tweak, signature, signatureRecovery, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TSSSignature {\n");
    sb.append("    bip32Path: ").append(toIndentedString(bip32Path)).append("\n");
    sb.append("    msgHash: ").append(toIndentedString(msgHash)).append("\n");
    sb.append("    tweak: ").append(toIndentedString(tweak)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    signatureRecovery: ").append(toIndentedString(signatureRecovery)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bip32_path");
    openapiFields.add("msg_hash");
    openapiFields.add("tweak");
    openapiFields.add("signature");
    openapiFields.add("signature_recovery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TSSSignature
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TSSSignature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TSSSignature is not found in the empty JSON string", TSSSignature.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bip32_path") != null && !jsonObj.get("bip32_path").isJsonNull()) && !jsonObj.get("bip32_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bip32_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bip32_path").toString()));
      }
      if ((jsonObj.get("msg_hash") != null && !jsonObj.get("msg_hash").isJsonNull()) && !jsonObj.get("msg_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg_hash").toString()));
      }
      if ((jsonObj.get("tweak") != null && !jsonObj.get("tweak").isJsonNull()) && !jsonObj.get("tweak").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tweak` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tweak").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("signature_recovery") != null && !jsonObj.get("signature_recovery").isJsonNull()) && !jsonObj.get("signature_recovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature_recovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature_recovery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TSSSignature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TSSSignature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TSSSignature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TSSSignature.class));

       return (TypeAdapter<T>) new TypeAdapter<TSSSignature>() {
           @Override
           public void write(JsonWriter out, TSSSignature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TSSSignature read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TSSSignature instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TSSSignature given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TSSSignature
  * @throws IOException if the JSON string is invalid with respect to TSSSignature
  */
  public static TSSSignature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TSSSignature.class);
  }

 /**
  * Convert an instance of TSSSignature to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

