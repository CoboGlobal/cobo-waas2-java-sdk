/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.KeyShareHolderGroup;
import com.cobo.waas2.model.MPCProject;
import com.cobo.waas2.model.MPCVault;
import com.cobo.waas2.model.MPCWalletInfo;
import com.cobo.waas2.model.OrgInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * TSSKeyShareSignExtra
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TSSKeyShareSignExtra {
  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private OrgInfo org;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private MPCProject project;

  public static final String SERIALIZED_NAME_VAULT = "vault";
  @SerializedName(SERIALIZED_NAME_VAULT)
  private MPCVault vault;

  public static final String SERIALIZED_NAME_WALLET = "wallet";
  @SerializedName(SERIALIZED_NAME_WALLET)
  private MPCWalletInfo wallet;

  public static final String SERIALIZED_NAME_VALIDITY_KEY_SHARE_HOLDER_GROUPS = "validity_key_share_holder_groups";
  @SerializedName(SERIALIZED_NAME_VALIDITY_KEY_SHARE_HOLDER_GROUPS)
  private List<KeyShareHolderGroup> validityKeyShareHolderGroups = new ArrayList<>();

  public TSSKeyShareSignExtra() {
  }

  public TSSKeyShareSignExtra org(OrgInfo org) {
    this.org = org;
    return this;
  }

   /**
   * Get org
   * @return org
  **/
  @javax.annotation.Nullable
  public OrgInfo getOrg() {
    return org;
  }

  public void setOrg(OrgInfo org) {
    this.org = org;
  }


  public TSSKeyShareSignExtra project(MPCProject project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable
  public MPCProject getProject() {
    return project;
  }

  public void setProject(MPCProject project) {
    this.project = project;
  }


  public TSSKeyShareSignExtra vault(MPCVault vault) {
    this.vault = vault;
    return this;
  }

   /**
   * Get vault
   * @return vault
  **/
  @javax.annotation.Nullable
  public MPCVault getVault() {
    return vault;
  }

  public void setVault(MPCVault vault) {
    this.vault = vault;
  }


  public TSSKeyShareSignExtra wallet(MPCWalletInfo wallet) {
    this.wallet = wallet;
    return this;
  }

   /**
   * Get wallet
   * @return wallet
  **/
  @javax.annotation.Nullable
  public MPCWalletInfo getWallet() {
    return wallet;
  }

  public void setWallet(MPCWalletInfo wallet) {
    this.wallet = wallet;
  }


  public TSSKeyShareSignExtra validityKeyShareHolderGroups(List<KeyShareHolderGroup> validityKeyShareHolderGroups) {
    this.validityKeyShareHolderGroups = validityKeyShareHolderGroups;
    return this;
  }

  public TSSKeyShareSignExtra addValidityKeyShareHolderGroupsItem(KeyShareHolderGroup validityKeyShareHolderGroupsItem) {
    if (this.validityKeyShareHolderGroups == null) {
      this.validityKeyShareHolderGroups = new ArrayList<>();
    }
    this.validityKeyShareHolderGroups.add(validityKeyShareHolderGroupsItem);
    return this;
  }

   /**
   * Get validityKeyShareHolderGroups
   * @return validityKeyShareHolderGroups
  **/
  @javax.annotation.Nullable
  public List<KeyShareHolderGroup> getValidityKeyShareHolderGroups() {
    return validityKeyShareHolderGroups;
  }

  public void setValidityKeyShareHolderGroups(List<KeyShareHolderGroup> validityKeyShareHolderGroups) {
    this.validityKeyShareHolderGroups = validityKeyShareHolderGroups;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TSSKeyShareSignExtra instance itself
   */
  public TSSKeyShareSignExtra putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TSSKeyShareSignExtra tsSKeyShareSignExtra = (TSSKeyShareSignExtra) o;
    return Objects.equals(this.org, tsSKeyShareSignExtra.org) &&
        Objects.equals(this.project, tsSKeyShareSignExtra.project) &&
        Objects.equals(this.vault, tsSKeyShareSignExtra.vault) &&
        Objects.equals(this.wallet, tsSKeyShareSignExtra.wallet) &&
        Objects.equals(this.validityKeyShareHolderGroups, tsSKeyShareSignExtra.validityKeyShareHolderGroups)&&
        Objects.equals(this.additionalProperties, tsSKeyShareSignExtra.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(org, project, vault, wallet, validityKeyShareHolderGroups, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TSSKeyShareSignExtra {\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    vault: ").append(toIndentedString(vault)).append("\n");
    sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
    sb.append("    validityKeyShareHolderGroups: ").append(toIndentedString(validityKeyShareHolderGroups)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("org");
    openapiFields.add("project");
    openapiFields.add("vault");
    openapiFields.add("wallet");
    openapiFields.add("validity_key_share_holder_groups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TSSKeyShareSignExtra
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TSSKeyShareSignExtra.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TSSKeyShareSignExtra is not found in the empty JSON string", TSSKeyShareSignExtra.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `org`
      if (jsonObj.get("org") != null && !jsonObj.get("org").isJsonNull()) {
        OrgInfo.validateJsonElement(jsonObj.get("org"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        MPCProject.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `vault`
      if (jsonObj.get("vault") != null && !jsonObj.get("vault").isJsonNull()) {
        MPCVault.validateJsonElement(jsonObj.get("vault"));
      }
      // validate the optional field `wallet`
      if (jsonObj.get("wallet") != null && !jsonObj.get("wallet").isJsonNull()) {
        MPCWalletInfo.validateJsonElement(jsonObj.get("wallet"));
      }
      if (jsonObj.get("validity_key_share_holder_groups") != null && !jsonObj.get("validity_key_share_holder_groups").isJsonNull()) {
        JsonArray jsonArrayvalidityKeyShareHolderGroups = jsonObj.getAsJsonArray("validity_key_share_holder_groups");
        if (jsonArrayvalidityKeyShareHolderGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validity_key_share_holder_groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validity_key_share_holder_groups` to be an array in the JSON string but got `%s`", jsonObj.get("validity_key_share_holder_groups").toString()));
          }

          // validate the optional field `validity_key_share_holder_groups` (array)
          for (int i = 0; i < jsonArrayvalidityKeyShareHolderGroups.size(); i++) {
            KeyShareHolderGroup.validateJsonElement(jsonArrayvalidityKeyShareHolderGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TSSKeyShareSignExtra.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TSSKeyShareSignExtra' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TSSKeyShareSignExtra> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TSSKeyShareSignExtra.class));

       return (TypeAdapter<T>) new TypeAdapter<TSSKeyShareSignExtra>() {
           @Override
           public void write(JsonWriter out, TSSKeyShareSignExtra value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TSSKeyShareSignExtra read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TSSKeyShareSignExtra instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TSSKeyShareSignExtra given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TSSKeyShareSignExtra
  * @throws IOException if the JSON string is invalid with respect to TSSKeyShareSignExtra
  */
  public static TSSKeyShareSignExtra fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TSSKeyShareSignExtra.class);
  }

 /**
  * Convert an instance of TSSKeyShareSignExtra to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

