/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * Role-based permission settings for the Solana Token-2022 Program. If not provided, all permissions will be granted to the issuing wallet by default.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TokenizationSolTokenPermissionParams {
  public static final String SERIALIZED_NAME_PERMANENT_DELEGATE = "permanent_delegate";
  @SerializedName(SERIALIZED_NAME_PERMANENT_DELEGATE)
  private String permanentDelegate;

  public static final String SERIALIZED_NAME_MINTER = "minter";
  @SerializedName(SERIALIZED_NAME_MINTER)
  private String minter;

  public static final String SERIALIZED_NAME_FREEZER = "freezer";
  @SerializedName(SERIALIZED_NAME_FREEZER)
  private String freezer;

  public static final String SERIALIZED_NAME_UPDATER = "updater";
  @SerializedName(SERIALIZED_NAME_UPDATER)
  private String updater;

  public static final String SERIALIZED_NAME_PAUSER = "pauser";
  @SerializedName(SERIALIZED_NAME_PAUSER)
  private String pauser;

  public TokenizationSolTokenPermissionParams() {
  }

  public TokenizationSolTokenPermissionParams permanentDelegate(String permanentDelegate) {
    this.permanentDelegate = permanentDelegate;
    return this;
  }

   /**
   * Solana wallet address assigned as the permanent delegate authority. It can perform delegated operations on behalf of token holders.
   * @return permanentDelegate
  **/
  @javax.annotation.Nullable
  public String getPermanentDelegate() {
    return permanentDelegate;
  }

  public void setPermanentDelegate(String permanentDelegate) {
    this.permanentDelegate = permanentDelegate;
  }


  public TokenizationSolTokenPermissionParams minter(String minter) {
    this.minter = minter;
    return this;
  }

   /**
   * Solana wallet address assigned as the mint authority. It can mint new tokens.
   * @return minter
  **/
  @javax.annotation.Nullable
  public String getMinter() {
    return minter;
  }

  public void setMinter(String minter) {
    this.minter = minter;
  }


  public TokenizationSolTokenPermissionParams freezer(String freezer) {
    this.freezer = freezer;
    return this;
  }

   /**
   * Solana wallet address assigned as the freeze authority. It can freeze token accounts.
   * @return freezer
  **/
  @javax.annotation.Nullable
  public String getFreezer() {
    return freezer;
  }

  public void setFreezer(String freezer) {
    this.freezer = freezer;
  }


  public TokenizationSolTokenPermissionParams updater(String updater) {
    this.updater = updater;
    return this;
  }

   /**
   * Solana wallet address assigned as the update authority. It can update token metadata.
   * @return updater
  **/
  @javax.annotation.Nullable
  public String getUpdater() {
    return updater;
  }

  public void setUpdater(String updater) {
    this.updater = updater;
  }


  public TokenizationSolTokenPermissionParams pauser(String pauser) {
    this.pauser = pauser;
    return this;
  }

   /**
   * Solana wallet address assigned as the pause authority. It can pause or unpause all token activities including transfers, burns, and mints.
   * @return pauser
  **/
  @javax.annotation.Nullable
  public String getPauser() {
    return pauser;
  }

  public void setPauser(String pauser) {
    this.pauser = pauser;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TokenizationSolTokenPermissionParams instance itself
   */
  public TokenizationSolTokenPermissionParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizationSolTokenPermissionParams tokenizationSolTokenPermissionParams = (TokenizationSolTokenPermissionParams) o;
    return Objects.equals(this.permanentDelegate, tokenizationSolTokenPermissionParams.permanentDelegate) &&
        Objects.equals(this.minter, tokenizationSolTokenPermissionParams.minter) &&
        Objects.equals(this.freezer, tokenizationSolTokenPermissionParams.freezer) &&
        Objects.equals(this.updater, tokenizationSolTokenPermissionParams.updater) &&
        Objects.equals(this.pauser, tokenizationSolTokenPermissionParams.pauser)&&
        Objects.equals(this.additionalProperties, tokenizationSolTokenPermissionParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permanentDelegate, minter, freezer, updater, pauser, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizationSolTokenPermissionParams {\n");
    sb.append("    permanentDelegate: ").append(toIndentedString(permanentDelegate)).append("\n");
    sb.append("    minter: ").append(toIndentedString(minter)).append("\n");
    sb.append("    freezer: ").append(toIndentedString(freezer)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    pauser: ").append(toIndentedString(pauser)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("permanent_delegate");
    openapiFields.add("minter");
    openapiFields.add("freezer");
    openapiFields.add("updater");
    openapiFields.add("pauser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenizationSolTokenPermissionParams
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenizationSolTokenPermissionParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenizationSolTokenPermissionParams is not found in the empty JSON string", TokenizationSolTokenPermissionParams.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("permanent_delegate") != null && !jsonObj.get("permanent_delegate").isJsonNull()) && !jsonObj.get("permanent_delegate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanent_delegate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permanent_delegate").toString()));
      }
      if ((jsonObj.get("minter") != null && !jsonObj.get("minter").isJsonNull()) && !jsonObj.get("minter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minter").toString()));
      }
      if ((jsonObj.get("freezer") != null && !jsonObj.get("freezer").isJsonNull()) && !jsonObj.get("freezer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freezer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freezer").toString()));
      }
      if ((jsonObj.get("updater") != null && !jsonObj.get("updater").isJsonNull()) && !jsonObj.get("updater").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updater` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updater").toString()));
      }
      if ((jsonObj.get("pauser") != null && !jsonObj.get("pauser").isJsonNull()) && !jsonObj.get("pauser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pauser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pauser").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenizationSolTokenPermissionParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenizationSolTokenPermissionParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenizationSolTokenPermissionParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenizationSolTokenPermissionParams.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenizationSolTokenPermissionParams>() {
           @Override
           public void write(JsonWriter out, TokenizationSolTokenPermissionParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenizationSolTokenPermissionParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TokenizationSolTokenPermissionParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenizationSolTokenPermissionParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenizationSolTokenPermissionParams
  * @throws IOException if the JSON string is invalid with respect to TokenizationSolTokenPermissionParams
  */
  public static TokenizationSolTokenPermissionParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenizationSolTokenPermissionParams.class);
  }

 /**
  * Convert an instance of TokenizationSolTokenPermissionParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

