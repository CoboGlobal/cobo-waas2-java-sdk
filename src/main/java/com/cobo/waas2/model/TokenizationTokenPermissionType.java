/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of permission for token operations. Each permission grants specific capabilities:  - &#x60;ManagePermissions&#x60;: Ability to grant and revoke permissions to addresses.  - &#x60;ManageAccessAndControls&#x60;: Ability to manage access control mechanisms including allowlist and blocklist operations.  - &#x60;MintTokens&#x60;: Ability to mint tokens and increase the total supply.  - &#x60;BurnTokens&#x60;: Ability to burn tokens and decrease the total supply.  - &#x60;RecoverTokens&#x60;: Ability to recover tokens from specified addresses.  - &#x60;UpgradeContract&#x60;: Ability to upgrade the smart contract implementation.  - &#x60;PauseContract&#x60;: Ability to pause and unpause the contract.  - &#x60;FreezeAccounts&#x60;: Ability to freeze and unfreeze addresses.  - &#x60;UpdateMetadata&#x60;: Ability to update token metadata.  - &#x60;WrapTokens&#x60;: Ability to wrap and unwrap tokens for wrapped token implementations.  - &#x60;PermanentDelegate&#x60;: An immutable delegate authority that cannot be changed once set. Has unlimited control over all token accounts including transfer and burn operations.  Supported permissions by chain: - **EVM (CoboERC20)**: ManagePermissions, ManageAccessAndControls, MintTokens, BurnTokens, RecoverTokens, UpgradeContract, PauseContract - **EVM (CoboERC20Wrapper)**: ManagePermissions, ManageAccessAndControls, MintTokens, WrapTokens, RecoverTokens, UpgradeContract, PauseContract - **Solana (SPL Token 2022)**: MintTokens, PauseContract, FreezeAccounts, UpdateMetadata, PermanentDelegate 
 */
@JsonAdapter(TokenizationTokenPermissionType.Adapter.class)
public enum TokenizationTokenPermissionType {
  UNKNOWN(null),
  
  MANAGEPERMISSIONS("ManagePermissions"),
  
  MANAGEACCESSANDCONTROLS("ManageAccessAndControls"),
  
  MINTTOKENS("MintTokens"),
  
  BURNTOKENS("BurnTokens"),
  
  WRAPTOKENS("WrapTokens"),
  
  RECOVERTOKENS("RecoverTokens"),
  
  UPGRADECONTRACT("UpgradeContract"),
  
  PAUSECONTRACT("PauseContract"),
  
  FREEZEACCOUNTS("FreezeAccounts"),
  
  UPDATEMETADATA("UpdateMetadata"),
  
  PERMANENTDELEGATE("PermanentDelegate");

  private String value;

  TokenizationTokenPermissionType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TokenizationTokenPermissionType fromValue(String value) {
    for (TokenizationTokenPermissionType b : TokenizationTokenPermissionType.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TokenizationTokenPermissionType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TokenizationTokenPermissionType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TokenizationTokenPermissionType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TokenizationTokenPermissionType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TokenizationTokenPermissionType.fromValue(value);
  }
}

