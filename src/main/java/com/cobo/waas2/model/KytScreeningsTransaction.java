/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.FundsStatusType;
import com.cobo.waas2.model.KytScreeningsTransactionType;
import com.cobo.waas2.model.ReviewStatusType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * The KYT screening status response containing transaction review and funds information.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class KytScreeningsTransaction {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private UUID transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transaction_type";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private KytScreeningsTransactionType transactionType;

  public static final String SERIALIZED_NAME_REVIEW_STATUS = "review_status";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATUS)
  private ReviewStatusType reviewStatus;

  public static final String SERIALIZED_NAME_FUNDS_STATUS = "funds_status";
  @SerializedName(SERIALIZED_NAME_FUNDS_STATUS)
  private FundsStatusType fundsStatus;

  public KytScreeningsTransaction() {
  }

  public KytScreeningsTransaction transactionId(UUID transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The UUID of the transaction that was screened.
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  public UUID getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(UUID transactionId) {
    this.transactionId = transactionId;
  }


  public KytScreeningsTransaction transactionType(KytScreeningsTransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @javax.annotation.Nonnull
  public KytScreeningsTransactionType getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(KytScreeningsTransactionType transactionType) {
    this.transactionType = transactionType;
  }


  public KytScreeningsTransaction reviewStatus(ReviewStatusType reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

   /**
   * Get reviewStatus
   * @return reviewStatus
  **/
  @javax.annotation.Nonnull
  public ReviewStatusType getReviewStatus() {
    return reviewStatus;
  }

  public void setReviewStatus(ReviewStatusType reviewStatus) {
    this.reviewStatus = reviewStatus;
  }


  public KytScreeningsTransaction fundsStatus(FundsStatusType fundsStatus) {
    this.fundsStatus = fundsStatus;
    return this;
  }

   /**
   * Get fundsStatus
   * @return fundsStatus
  **/
  @javax.annotation.Nonnull
  public FundsStatusType getFundsStatus() {
    return fundsStatus;
  }

  public void setFundsStatus(FundsStatusType fundsStatus) {
    this.fundsStatus = fundsStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the KytScreeningsTransaction instance itself
   */
  public KytScreeningsTransaction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KytScreeningsTransaction kytScreeningsTransaction = (KytScreeningsTransaction) o;
    return Objects.equals(this.transactionId, kytScreeningsTransaction.transactionId) &&
        Objects.equals(this.transactionType, kytScreeningsTransaction.transactionType) &&
        Objects.equals(this.reviewStatus, kytScreeningsTransaction.reviewStatus) &&
        Objects.equals(this.fundsStatus, kytScreeningsTransaction.fundsStatus)&&
        Objects.equals(this.additionalProperties, kytScreeningsTransaction.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, transactionType, reviewStatus, fundsStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KytScreeningsTransaction {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    reviewStatus: ").append(toIndentedString(reviewStatus)).append("\n");
    sb.append("    fundsStatus: ").append(toIndentedString(fundsStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transaction_id");
    openapiFields.add("transaction_type");
    openapiFields.add("review_status");
    openapiFields.add("funds_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("transaction_type");
    openapiRequiredFields.add("review_status");
    openapiRequiredFields.add("funds_status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to KytScreeningsTransaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KytScreeningsTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KytScreeningsTransaction is not found in the empty JSON string", KytScreeningsTransaction.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KytScreeningsTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      // validate the required field `transaction_type`
      KytScreeningsTransactionType.validateJsonElement(jsonObj.get("transaction_type"));
      // validate the required field `review_status`
      ReviewStatusType.validateJsonElement(jsonObj.get("review_status"));
      // validate the required field `funds_status`
      FundsStatusType.validateJsonElement(jsonObj.get("funds_status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KytScreeningsTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KytScreeningsTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KytScreeningsTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KytScreeningsTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<KytScreeningsTransaction>() {
           @Override
           public void write(JsonWriter out, KytScreeningsTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public KytScreeningsTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             KytScreeningsTransaction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KytScreeningsTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KytScreeningsTransaction
  * @throws IOException if the JSON string is invalid with respect to KytScreeningsTransaction
  */
  public static KytScreeningsTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KytScreeningsTransaction.class);
  }

 /**
  * Convert an instance of KytScreeningsTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

