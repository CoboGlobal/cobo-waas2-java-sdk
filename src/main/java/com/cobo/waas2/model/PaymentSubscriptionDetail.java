/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.PaymentSubscriptionAction;
import com.cobo.waas2.model.PaymentSubscriptionPeriodType;
import com.cobo.waas2.model.PaymentSubscriptionStatus;
import com.cobo.waas2.model.Transaction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * PaymentSubscriptionDetail
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class PaymentSubscriptionDetail {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<PaymentSubscriptionAction> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<Transaction> transactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAN_ID = "plan_id";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MERCHANT_ADDRESS = "merchant_address";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ADDRESS)
  private String merchantAddress;

  public static final String SERIALIZED_NAME_USER_ADDRESS = "user_address";
  @SerializedName(SERIALIZED_NAME_USER_ADDRESS)
  private String userAddress;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Integer startTime;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expiration_time";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private Integer expirationTime;

  public static final String SERIALIZED_NAME_CHARGES_MADE = "charges_made";
  @SerializedName(SERIALIZED_NAME_CHARGES_MADE)
  private Integer chargesMade;

  public static final String SERIALIZED_NAME_PERIOD_TYPE = "period_type";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPE)
  private PaymentSubscriptionPeriodType periodType;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private Integer periods;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PaymentSubscriptionStatus status;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Integer createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Integer updatedTimestamp;

  public PaymentSubscriptionDetail() {
  }

  public PaymentSubscriptionDetail actions(List<PaymentSubscriptionAction> actions) {
    this.actions = actions;
    return this;
  }

  public PaymentSubscriptionDetail addActionsItem(PaymentSubscriptionAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * An array of subscription actions.
   * @return actions
  **/
  @javax.annotation.Nullable
  public List<PaymentSubscriptionAction> getActions() {
    return actions;
  }

  public void setActions(List<PaymentSubscriptionAction> actions) {
    this.actions = actions;
  }


  public PaymentSubscriptionDetail transactions(List<Transaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public PaymentSubscriptionDetail addTransactionsItem(Transaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * An array of subscription transactions.
   * @return transactions
  **/
  @javax.annotation.Nullable
  public List<Transaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }


  public PaymentSubscriptionDetail planId(String planId) {
    this.planId = planId;
    return this;
  }

   /**
   * The plan id in cobo.
   * @return planId
  **/
  @javax.annotation.Nonnull
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public PaymentSubscriptionDetail subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

   /**
   * The subscription id in cobo.
   * @return subscriptionId
  **/
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public PaymentSubscriptionDetail merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant id in cobo.
   * @return merchantId
  **/
  @javax.annotation.Nonnull
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public PaymentSubscriptionDetail merchantAddress(String merchantAddress) {
    this.merchantAddress = merchantAddress;
    return this;
  }

   /**
   * The merchant address in cobo.
   * @return merchantAddress
  **/
  @javax.annotation.Nonnull
  public String getMerchantAddress() {
    return merchantAddress;
  }

  public void setMerchantAddress(String merchantAddress) {
    this.merchantAddress = merchantAddress;
  }


  public PaymentSubscriptionDetail userAddress(String userAddress) {
    this.userAddress = userAddress;
    return this;
  }

   /**
   * The user address in subscription.
   * @return userAddress
  **/
  @javax.annotation.Nonnull
  public String getUserAddress() {
    return userAddress;
  }

  public void setUserAddress(String userAddress) {
    this.userAddress = userAddress;
  }


  public PaymentSubscriptionDetail tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   * The token_id in subscription.
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public PaymentSubscriptionDetail amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount in subscription.
   * @return amount
  **/
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public PaymentSubscriptionDetail startTime(Integer startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The subscription start timestamp.
   * @return startTime
  **/
  @javax.annotation.Nonnull
  public Integer getStartTime() {
    return startTime;
  }

  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }


  public PaymentSubscriptionDetail expirationTime(Integer expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

   /**
   * The subscription expired timestamp.
   * @return expirationTime
  **/
  @javax.annotation.Nonnull
  public Integer getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(Integer expirationTime) {
    this.expirationTime = expirationTime;
  }


  public PaymentSubscriptionDetail chargesMade(Integer chargesMade) {
    this.chargesMade = chargesMade;
    return this;
  }

   /**
   * The subscription charge times.
   * @return chargesMade
  **/
  @javax.annotation.Nonnull
  public Integer getChargesMade() {
    return chargesMade;
  }

  public void setChargesMade(Integer chargesMade) {
    this.chargesMade = chargesMade;
  }


  public PaymentSubscriptionDetail periodType(PaymentSubscriptionPeriodType periodType) {
    this.periodType = periodType;
    return this;
  }

   /**
   * Get periodType
   * @return periodType
  **/
  @javax.annotation.Nonnull
  public PaymentSubscriptionPeriodType getPeriodType() {
    return periodType;
  }

  public void setPeriodType(PaymentSubscriptionPeriodType periodType) {
    this.periodType = periodType;
  }


  public PaymentSubscriptionDetail periods(Integer periods) {
    this.periods = periods;
    return this;
  }

   /**
   * Get periods
   * @return periods
  **/
  @javax.annotation.Nonnull
  public Integer getPeriods() {
    return periods;
  }

  public void setPeriods(Integer periods) {
    this.periods = periods;
  }


  public PaymentSubscriptionDetail interval(Integer interval) {
    this.interval = interval;
    return this;
  }

   /**
   * The subscription charge interval.
   * @return interval
  **/
  @javax.annotation.Nonnull
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  public PaymentSubscriptionDetail status(PaymentSubscriptionStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public PaymentSubscriptionStatus getStatus() {
    return status;
  }

  public void setStatus(PaymentSubscriptionStatus status) {
    this.status = status;
  }


  public PaymentSubscriptionDetail createdTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The created time of the subscription, represented as a UNIX timestamp in seconds.
   * @return createdTimestamp
  **/
  @javax.annotation.Nonnull
  public Integer getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public PaymentSubscriptionDetail updatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The updated time of the subscription, represented as a UNIX timestamp in seconds.
   * @return updatedTimestamp
  **/
  @javax.annotation.Nonnull
  public Integer getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentSubscriptionDetail instance itself
   */
  public PaymentSubscriptionDetail putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentSubscriptionDetail paymentSubscriptionDetail = (PaymentSubscriptionDetail) o;
    return Objects.equals(this.actions, paymentSubscriptionDetail.actions) &&
        Objects.equals(this.transactions, paymentSubscriptionDetail.transactions) &&
        Objects.equals(this.planId, paymentSubscriptionDetail.planId) &&
        Objects.equals(this.subscriptionId, paymentSubscriptionDetail.subscriptionId) &&
        Objects.equals(this.merchantId, paymentSubscriptionDetail.merchantId) &&
        Objects.equals(this.merchantAddress, paymentSubscriptionDetail.merchantAddress) &&
        Objects.equals(this.userAddress, paymentSubscriptionDetail.userAddress) &&
        Objects.equals(this.tokenId, paymentSubscriptionDetail.tokenId) &&
        Objects.equals(this.amount, paymentSubscriptionDetail.amount) &&
        Objects.equals(this.startTime, paymentSubscriptionDetail.startTime) &&
        Objects.equals(this.expirationTime, paymentSubscriptionDetail.expirationTime) &&
        Objects.equals(this.chargesMade, paymentSubscriptionDetail.chargesMade) &&
        Objects.equals(this.periodType, paymentSubscriptionDetail.periodType) &&
        Objects.equals(this.periods, paymentSubscriptionDetail.periods) &&
        Objects.equals(this.interval, paymentSubscriptionDetail.interval) &&
        Objects.equals(this.status, paymentSubscriptionDetail.status) &&
        Objects.equals(this.createdTimestamp, paymentSubscriptionDetail.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, paymentSubscriptionDetail.updatedTimestamp)&&
        Objects.equals(this.additionalProperties, paymentSubscriptionDetail.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, transactions, planId, subscriptionId, merchantId, merchantAddress, userAddress, tokenId, amount, startTime, expirationTime, chargesMade, periodType, periods, interval, status, createdTimestamp, updatedTimestamp, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentSubscriptionDetail {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantAddress: ").append(toIndentedString(merchantAddress)).append("\n");
    sb.append("    userAddress: ").append(toIndentedString(userAddress)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    chargesMade: ").append(toIndentedString(chargesMade)).append("\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plan_id");
    openapiFields.add("subscription_id");
    openapiFields.add("merchant_id");
    openapiFields.add("merchant_address");
    openapiFields.add("user_address");
    openapiFields.add("token_id");
    openapiFields.add("amount");
    openapiFields.add("start_time");
    openapiFields.add("expiration_time");
    openapiFields.add("charges_made");
    openapiFields.add("period_type");
    openapiFields.add("periods");
    openapiFields.add("interval");
    openapiFields.add("status");
    openapiFields.add("created_timestamp");
    openapiFields.add("updated_timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("plan_id");
    openapiRequiredFields.add("subscription_id");
    openapiRequiredFields.add("merchant_id");
    openapiRequiredFields.add("merchant_address");
    openapiRequiredFields.add("user_address");
    openapiRequiredFields.add("token_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("start_time");
    openapiRequiredFields.add("expiration_time");
    openapiRequiredFields.add("charges_made");
    openapiRequiredFields.add("period_type");
    openapiRequiredFields.add("periods");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("created_timestamp");
    openapiRequiredFields.add("updated_timestamp");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentSubscriptionDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentSubscriptionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentSubscriptionDetail is not found in the empty JSON string", PaymentSubscriptionDetail.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentSubscriptionDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            PaymentSubscriptionAction.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            Transaction.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
      if (!jsonObj.get("plan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan_id").toString()));
      }
      if (!jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      if (!jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (!jsonObj.get("merchant_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_address").toString()));
      }
      if (!jsonObj.get("user_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_address").toString()));
      }
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      // validate the required field `period_type`
      PaymentSubscriptionPeriodType.validateJsonElement(jsonObj.get("period_type"));
      // validate the required field `status`
      PaymentSubscriptionStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentSubscriptionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentSubscriptionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentSubscriptionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentSubscriptionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentSubscriptionDetail>() {
           @Override
           public void write(JsonWriter out, PaymentSubscriptionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentSubscriptionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PaymentSubscriptionDetail instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentSubscriptionDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentSubscriptionDetail
  * @throws IOException if the JSON string is invalid with respect to PaymentSubscriptionDetail
  */
  public static PaymentSubscriptionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentSubscriptionDetail.class);
  }

 /**
  * Convert an instance of PaymentSubscriptionDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

