/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies the period of charge for the subscription plan: - &#x60;Create&#x60;: The subscription create action. - &#x60;Approve&#x60;: The subscription approve action. - &#x60;Subscribe&#x60;: The subscription subscribe action. - &#x60;SubscribeAndCharge&#x60;: The subscription subscript and charge action. - &#x60;Charge&#x60;: The subscription charge action. - &#x60;Cancel&#x60;: The subscription cancel action. - &#x60;DeveloperPause&#x60;: The subscription developer pause action. - &#x60;DeveloperUnpause&#x60;: The subscription developer unpause action. - &#x60;ExtendPeriod&#x60;: The subscription extend period action. - &#x60;Upgrade&#x60;: The subscription upgrade action. - &#x60;Downgrade&#x60;: The subscription downgrade action. - &#x60;UpdateTokenId&#x60;: The subscription update token id action. 
 */
@JsonAdapter(PaymentSubscriptionActionType.Adapter.class)
public enum PaymentSubscriptionActionType {
  UNKNOWN(null),
  
  CREATE("Create"),
  
  APPROVE("Approve"),
  
  SUBSCRIBE("Subscribe"),
  
  SUBSCRIBEANDCHARGE("SubscribeAndCharge"),
  
  CHARGE("Charge"),
  
  CANCEL("Cancel"),
  
  DEVELOPERPAUSE("DeveloperPause"),
  
  DEVELOPERUNPAUSE("DeveloperUnpause"),
  
  EXTENDPERIOD("ExtendPeriod"),
  
  UPGRADE("Upgrade"),
  
  DOWNGRADE("Downgrade"),
  
  UPDATETOKENID("UpdateTokenId");

  private String value;

  PaymentSubscriptionActionType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PaymentSubscriptionActionType fromValue(String value) {
    for (PaymentSubscriptionActionType b : PaymentSubscriptionActionType.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PaymentSubscriptionActionType> {
    @Override
    public void write(final JsonWriter jsonWriter, final PaymentSubscriptionActionType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PaymentSubscriptionActionType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PaymentSubscriptionActionType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    PaymentSubscriptionActionType.fromValue(value);
  }
}

