/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * CreatePaymentOrderRequest
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class CreatePaymentOrderRequest {
  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_FIAT_CURRENCY = "fiat_currency";
  @SerializedName(SERIALIZED_NAME_FIAT_CURRENCY)
  private String fiatCurrency = "USD";

  public static final String SERIALIZED_NAME_FIAT_AMOUNT = "fiat_amount";
  @SerializedName(SERIALIZED_NAME_FIAT_AMOUNT)
  private String fiatAmount;

  public static final String SERIALIZED_NAME_FEE_FIAT_AMOUNT = "fee_fiat_amount";
  @SerializedName(SERIALIZED_NAME_FEE_FIAT_AMOUNT)
  private String feeFiatAmount;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_CODE = "merchant_order_code";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_CODE)
  private String merchantOrderCode;

  public static final String SERIALIZED_NAME_PSP_ORDER_CODE = "psp_order_code";
  @SerializedName(SERIALIZED_NAME_PSP_ORDER_CODE)
  private String pspOrderCode;

  public static final String SERIALIZED_NAME_EXPIRED_AT = "expired_at";
  @SerializedName(SERIALIZED_NAME_EXPIRED_AT)
  private Integer expiredAt;

  public CreatePaymentOrderRequest() {
  }

  public CreatePaymentOrderRequest merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The unique identifier of the merchant.
   * @return merchantId
  **/
  @javax.annotation.Nonnull
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public CreatePaymentOrderRequest tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Cryptocurrency token used for payment (e.g., USDT, BTC, ETH).
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public CreatePaymentOrderRequest fiatCurrency(String fiatCurrency) {
    this.fiatCurrency = fiatCurrency;
    return this;
  }

   /**
   * The fiat currency for the order.
   * @return fiatCurrency
  **/
  @javax.annotation.Nullable
  public String getFiatCurrency() {
    return fiatCurrency;
  }

  public void setFiatCurrency(String fiatCurrency) {
    this.fiatCurrency = fiatCurrency;
  }


  public CreatePaymentOrderRequest fiatAmount(String fiatAmount) {
    this.fiatAmount = fiatAmount;
    return this;
  }

   /**
   * The fiat amount of the order.
   * @return fiatAmount
  **/
  @javax.annotation.Nonnull
  public String getFiatAmount() {
    return fiatAmount;
  }

  public void setFiatAmount(String fiatAmount) {
    this.fiatAmount = fiatAmount;
  }


  public CreatePaymentOrderRequest feeFiatAmount(String feeFiatAmount) {
    this.feeFiatAmount = feeFiatAmount;
    return this;
  }

   /**
   * Transaction fee in fiat currency.
   * @return feeFiatAmount
  **/
  @javax.annotation.Nonnull
  public String getFeeFiatAmount() {
    return feeFiatAmount;
  }

  public void setFeeFiatAmount(String feeFiatAmount) {
    this.feeFiatAmount = feeFiatAmount;
  }


  public CreatePaymentOrderRequest merchantOrderCode(String merchantOrderCode) {
    this.merchantOrderCode = merchantOrderCode;
    return this;
  }

   /**
   * The merchant-provided order identifier.
   * @return merchantOrderCode
  **/
  @javax.annotation.Nullable
  public String getMerchantOrderCode() {
    return merchantOrderCode;
  }

  public void setMerchantOrderCode(String merchantOrderCode) {
    this.merchantOrderCode = merchantOrderCode;
  }


  public CreatePaymentOrderRequest pspOrderCode(String pspOrderCode) {
    this.pspOrderCode = pspOrderCode;
    return this;
  }

   /**
   * The PSP-provided order identifier.
   * @return pspOrderCode
  **/
  @javax.annotation.Nonnull
  public String getPspOrderCode() {
    return pspOrderCode;
  }

  public void setPspOrderCode(String pspOrderCode) {
    this.pspOrderCode = pspOrderCode;
  }


  public CreatePaymentOrderRequest expiredAt(Integer expiredAt) {
    this.expiredAt = expiredAt;
    return this;
  }

   /**
   * Expiration time in UNIX timestamp.
   * @return expiredAt
  **/
  @javax.annotation.Nullable
  public Integer getExpiredAt() {
    return expiredAt;
  }

  public void setExpiredAt(Integer expiredAt) {
    this.expiredAt = expiredAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreatePaymentOrderRequest instance itself
   */
  public CreatePaymentOrderRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentOrderRequest createPaymentOrderRequest = (CreatePaymentOrderRequest) o;
    return Objects.equals(this.merchantId, createPaymentOrderRequest.merchantId) &&
        Objects.equals(this.tokenId, createPaymentOrderRequest.tokenId) &&
        Objects.equals(this.fiatCurrency, createPaymentOrderRequest.fiatCurrency) &&
        Objects.equals(this.fiatAmount, createPaymentOrderRequest.fiatAmount) &&
        Objects.equals(this.feeFiatAmount, createPaymentOrderRequest.feeFiatAmount) &&
        Objects.equals(this.merchantOrderCode, createPaymentOrderRequest.merchantOrderCode) &&
        Objects.equals(this.pspOrderCode, createPaymentOrderRequest.pspOrderCode) &&
        Objects.equals(this.expiredAt, createPaymentOrderRequest.expiredAt)&&
        Objects.equals(this.additionalProperties, createPaymentOrderRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, tokenId, fiatCurrency, fiatAmount, feeFiatAmount, merchantOrderCode, pspOrderCode, expiredAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentOrderRequest {\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    fiatCurrency: ").append(toIndentedString(fiatCurrency)).append("\n");
    sb.append("    fiatAmount: ").append(toIndentedString(fiatAmount)).append("\n");
    sb.append("    feeFiatAmount: ").append(toIndentedString(feeFiatAmount)).append("\n");
    sb.append("    merchantOrderCode: ").append(toIndentedString(merchantOrderCode)).append("\n");
    sb.append("    pspOrderCode: ").append(toIndentedString(pspOrderCode)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchant_id");
    openapiFields.add("token_id");
    openapiFields.add("fiat_currency");
    openapiFields.add("fiat_amount");
    openapiFields.add("fee_fiat_amount");
    openapiFields.add("merchant_order_code");
    openapiFields.add("psp_order_code");
    openapiFields.add("expired_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchant_id");
    openapiRequiredFields.add("token_id");
    openapiRequiredFields.add("fiat_amount");
    openapiRequiredFields.add("fee_fiat_amount");
    openapiRequiredFields.add("psp_order_code");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreatePaymentOrderRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePaymentOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePaymentOrderRequest is not found in the empty JSON string", CreatePaymentOrderRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePaymentOrderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
      if ((jsonObj.get("fiat_currency") != null && !jsonObj.get("fiat_currency").isJsonNull()) && !jsonObj.get("fiat_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiat_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiat_currency").toString()));
      }
      if (!jsonObj.get("fiat_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiat_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiat_amount").toString()));
      }
      if (!jsonObj.get("fee_fiat_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee_fiat_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee_fiat_amount").toString()));
      }
      if ((jsonObj.get("merchant_order_code") != null && !jsonObj.get("merchant_order_code").isJsonNull()) && !jsonObj.get("merchant_order_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_order_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_order_code").toString()));
      }
      if (!jsonObj.get("psp_order_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `psp_order_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("psp_order_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePaymentOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePaymentOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePaymentOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePaymentOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePaymentOrderRequest>() {
           @Override
           public void write(JsonWriter out, CreatePaymentOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePaymentOrderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CreatePaymentOrderRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreatePaymentOrderRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreatePaymentOrderRequest
  * @throws IOException if the JSON string is invalid with respect to CreatePaymentOrderRequest
  */
  public static CreatePaymentOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePaymentOrderRequest.class);
  }

 /**
  * Convert an instance of CreatePaymentOrderRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

