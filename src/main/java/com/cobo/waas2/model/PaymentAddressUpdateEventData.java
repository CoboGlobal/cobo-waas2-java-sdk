/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * PaymentAddressUpdateEventData
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class PaymentAddressUpdateEventData {
  /**
   *  The data type of the event. - &#x60;Transaction&#x60;: The transaction event data. - &#x60;TSSRequest&#x60;: The TSS request event data. - &#x60;Addresses&#x60;: The addresses event data. - &#x60;WalletInfo&#x60;: The wallet information event data. - &#x60;MPCVault&#x60;: The MPC vault event data. - &#x60;Chains&#x60;: The enabled chain event data. - &#x60;Tokens&#x60;: The enabled token event data. - &#x60;TokenListing&#x60;: The token listing event data.        - &#x60;PaymentOrder&#x60;: The payment order event data. - &#x60;PaymentRefund&#x60;: The payment refund event data. - &#x60;PaymentSettlement&#x60;: The payment settlement event data. - &#x60;PaymentTransaction&#x60;: The payment transaction event data. - &#x60;PaymentAddressUpdate&#x60;: The top-up address update event data. - &#x60;BalanceUpdateInfo&#x60;: The balance update event data. - &#x60;SuspendedToken&#x60;: The token suspension event data. - &#x60;ComplianceDisposition&#x60;: The compliance disposition event data.
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    TRANSACTION("Transaction"),
    
    TSSREQUEST("TSSRequest"),
    
    ADDRESSES("Addresses"),
    
    WALLETINFO("WalletInfo"),
    
    MPCVAULT("MPCVault"),
    
    CHAINS("Chains"),
    
    TOKENS("Tokens"),
    
    TOKENLISTING("TokenListing"),
    
    PAYMENTORDER("PaymentOrder"),
    
    PAYMENTREFUND("PaymentRefund"),
    
    PAYMENTSETTLEMENT("PaymentSettlement"),
    
    PAYMENTTRANSACTION("PaymentTransaction"),
    
    PAYMENTADDRESSUPDATE("PaymentAddressUpdate"),
    
    BALANCEUPDATEINFO("BalanceUpdateInfo"),
    
    SUSPENDEDTOKEN("SuspendedToken"),
    
    COMPLIANCEDISPOSITION("ComplianceDisposition");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_CUSTOM_PAYER_ID = "custom_payer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PAYER_ID)
  private String customPayerId;

  public static final String SERIALIZED_NAME_PAYER_ID = "payer_id";
  @SerializedName(SERIALIZED_NAME_PAYER_ID)
  private String payerId;

  public static final String SERIALIZED_NAME_CHAIN = "chain";
  @SerializedName(SERIALIZED_NAME_CHAIN)
  private String chain;

  public static final String SERIALIZED_NAME_PREVIOUS_ADDRESS = "previous_address";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ADDRESS)
  private String previousAddress;

  public static final String SERIALIZED_NAME_UPDATED_ADDRESS = "updated_address";
  @SerializedName(SERIALIZED_NAME_UPDATED_ADDRESS)
  private String updatedAddress;

  public PaymentAddressUpdateEventData() {
  }

  public PaymentAddressUpdateEventData dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   *  The data type of the event. - &#x60;Transaction&#x60;: The transaction event data. - &#x60;TSSRequest&#x60;: The TSS request event data. - &#x60;Addresses&#x60;: The addresses event data. - &#x60;WalletInfo&#x60;: The wallet information event data. - &#x60;MPCVault&#x60;: The MPC vault event data. - &#x60;Chains&#x60;: The enabled chain event data. - &#x60;Tokens&#x60;: The enabled token event data. - &#x60;TokenListing&#x60;: The token listing event data.        - &#x60;PaymentOrder&#x60;: The payment order event data. - &#x60;PaymentRefund&#x60;: The payment refund event data. - &#x60;PaymentSettlement&#x60;: The payment settlement event data. - &#x60;PaymentTransaction&#x60;: The payment transaction event data. - &#x60;PaymentAddressUpdate&#x60;: The top-up address update event data. - &#x60;BalanceUpdateInfo&#x60;: The balance update event data. - &#x60;SuspendedToken&#x60;: The token suspension event data. - &#x60;ComplianceDisposition&#x60;: The compliance disposition event data.
   * @return dataType
  **/
  @javax.annotation.Nonnull
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public PaymentAddressUpdateEventData customPayerId(String customPayerId) {
    this.customPayerId = customPayerId;
    return this;
  }

   /**
   * A unique identifier assigned by the developer to track and identify individual payers in their system.
   * @return customPayerId
  **/
  @javax.annotation.Nonnull
  public String getCustomPayerId() {
    return customPayerId;
  }

  public void setCustomPayerId(String customPayerId) {
    this.customPayerId = customPayerId;
  }


  public PaymentAddressUpdateEventData payerId(String payerId) {
    this.payerId = payerId;
    return this;
  }

   /**
   * A unique identifier assigned by Cobo to track and identify individual payers.
   * @return payerId
  **/
  @javax.annotation.Nonnull
  public String getPayerId() {
    return payerId;
  }

  public void setPayerId(String payerId) {
    this.payerId = payerId;
  }


  public PaymentAddressUpdateEventData chain(String chain) {
    this.chain = chain;
    return this;
  }

   /**
   * The chain ID.
   * @return chain
  **/
  @javax.annotation.Nonnull
  public String getChain() {
    return chain;
  }

  public void setChain(String chain) {
    this.chain = chain;
  }


  public PaymentAddressUpdateEventData previousAddress(String previousAddress) {
    this.previousAddress = previousAddress;
    return this;
  }

   /**
   * The previous top-up address that was assigned to the payer.
   * @return previousAddress
  **/
  @javax.annotation.Nonnull
  public String getPreviousAddress() {
    return previousAddress;
  }

  public void setPreviousAddress(String previousAddress) {
    this.previousAddress = previousAddress;
  }


  public PaymentAddressUpdateEventData updatedAddress(String updatedAddress) {
    this.updatedAddress = updatedAddress;
    return this;
  }

   /**
   * The new top-up address that has been assigned to the payer.
   * @return updatedAddress
  **/
  @javax.annotation.Nonnull
  public String getUpdatedAddress() {
    return updatedAddress;
  }

  public void setUpdatedAddress(String updatedAddress) {
    this.updatedAddress = updatedAddress;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentAddressUpdateEventData instance itself
   */
  public PaymentAddressUpdateEventData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAddressUpdateEventData paymentAddressUpdateEventData = (PaymentAddressUpdateEventData) o;
    return Objects.equals(this.dataType, paymentAddressUpdateEventData.dataType) &&
        Objects.equals(this.customPayerId, paymentAddressUpdateEventData.customPayerId) &&
        Objects.equals(this.payerId, paymentAddressUpdateEventData.payerId) &&
        Objects.equals(this.chain, paymentAddressUpdateEventData.chain) &&
        Objects.equals(this.previousAddress, paymentAddressUpdateEventData.previousAddress) &&
        Objects.equals(this.updatedAddress, paymentAddressUpdateEventData.updatedAddress)&&
        Objects.equals(this.additionalProperties, paymentAddressUpdateEventData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, customPayerId, payerId, chain, previousAddress, updatedAddress, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAddressUpdateEventData {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    customPayerId: ").append(toIndentedString(customPayerId)).append("\n");
    sb.append("    payerId: ").append(toIndentedString(payerId)).append("\n");
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("    previousAddress: ").append(toIndentedString(previousAddress)).append("\n");
    sb.append("    updatedAddress: ").append(toIndentedString(updatedAddress)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data_type");
    openapiFields.add("custom_payer_id");
    openapiFields.add("payer_id");
    openapiFields.add("chain");
    openapiFields.add("previous_address");
    openapiFields.add("updated_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data_type");
    openapiRequiredFields.add("custom_payer_id");
    openapiRequiredFields.add("payer_id");
    openapiRequiredFields.add("chain");
    openapiRequiredFields.add("previous_address");
    openapiRequiredFields.add("updated_address");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentAddressUpdateEventData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentAddressUpdateEventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentAddressUpdateEventData is not found in the empty JSON string", PaymentAddressUpdateEventData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentAddressUpdateEventData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      // validate the required field `data_type`
      DataTypeEnum.validateJsonElement(jsonObj.get("data_type"));
      if (!jsonObj.get("custom_payer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_payer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_payer_id").toString()));
      }
      if (!jsonObj.get("payer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payer_id").toString()));
      }
      if (!jsonObj.get("chain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain").toString()));
      }
      if (!jsonObj.get("previous_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_address").toString()));
      }
      if (!jsonObj.get("updated_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAddressUpdateEventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAddressUpdateEventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAddressUpdateEventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAddressUpdateEventData.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAddressUpdateEventData>() {
           @Override
           public void write(JsonWriter out, PaymentAddressUpdateEventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAddressUpdateEventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PaymentAddressUpdateEventData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentAddressUpdateEventData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentAddressUpdateEventData
  * @throws IOException if the JSON string is invalid with respect to PaymentAddressUpdateEventData
  */
  public static PaymentAddressUpdateEventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAddressUpdateEventData.class);
  }

 /**
  * Convert an instance of PaymentAddressUpdateEventData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

