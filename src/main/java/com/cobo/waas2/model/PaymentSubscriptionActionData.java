/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.PaymentBaseSubscriptionActionData;
import com.cobo.waas2.model.PaymentCreateSubscriptionActionData;
import com.cobo.waas2.model.PaymentExtendPeriodSubscriptionActionData;
import com.cobo.waas2.model.PaymentSubscriptionActionType;
import com.cobo.waas2.model.PaymentUpdateAmountSubscriptionActionData;
import com.cobo.waas2.model.PaymentUpdateTokenIdSubscriptionActionData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.cobo.waas2.JSON;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class PaymentSubscriptionActionData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PaymentSubscriptionActionData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PaymentSubscriptionActionData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PaymentSubscriptionActionData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PaymentCreateSubscriptionActionData> adapterPaymentCreateSubscriptionActionData = gson.getDelegateAdapter(this, TypeToken.get(PaymentCreateSubscriptionActionData.class));
            final TypeAdapter<PaymentBaseSubscriptionActionData> adapterPaymentBaseSubscriptionActionData = gson.getDelegateAdapter(this, TypeToken.get(PaymentBaseSubscriptionActionData.class));
            final TypeAdapter<PaymentExtendPeriodSubscriptionActionData> adapterPaymentExtendPeriodSubscriptionActionData = gson.getDelegateAdapter(this, TypeToken.get(PaymentExtendPeriodSubscriptionActionData.class));
            final TypeAdapter<PaymentUpdateAmountSubscriptionActionData> adapterPaymentUpdateAmountSubscriptionActionData = gson.getDelegateAdapter(this, TypeToken.get(PaymentUpdateAmountSubscriptionActionData.class));
            final TypeAdapter<PaymentUpdateTokenIdSubscriptionActionData> adapterPaymentUpdateTokenIdSubscriptionActionData = gson.getDelegateAdapter(this, TypeToken.get(PaymentUpdateTokenIdSubscriptionActionData.class));

            return (TypeAdapter<T>) new TypeAdapter<PaymentSubscriptionActionData>() {
                @Override
                public void write(JsonWriter out, PaymentSubscriptionActionData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PaymentCreateSubscriptionActionData`
                    if (value.getActualInstance() instanceof PaymentCreateSubscriptionActionData) {
                        JsonElement element = adapterPaymentCreateSubscriptionActionData.toJsonTree((PaymentCreateSubscriptionActionData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PaymentBaseSubscriptionActionData`
                    if (value.getActualInstance() instanceof PaymentBaseSubscriptionActionData) {
                        JsonElement element = adapterPaymentBaseSubscriptionActionData.toJsonTree((PaymentBaseSubscriptionActionData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PaymentExtendPeriodSubscriptionActionData`
                    if (value.getActualInstance() instanceof PaymentExtendPeriodSubscriptionActionData) {
                        JsonElement element = adapterPaymentExtendPeriodSubscriptionActionData.toJsonTree((PaymentExtendPeriodSubscriptionActionData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PaymentUpdateAmountSubscriptionActionData`
                    if (value.getActualInstance() instanceof PaymentUpdateAmountSubscriptionActionData) {
                        JsonElement element = adapterPaymentUpdateAmountSubscriptionActionData.toJsonTree((PaymentUpdateAmountSubscriptionActionData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PaymentUpdateTokenIdSubscriptionActionData`
                    if (value.getActualInstance() instanceof PaymentUpdateTokenIdSubscriptionActionData) {
                        JsonElement element = adapterPaymentUpdateTokenIdSubscriptionActionData.toJsonTree((PaymentUpdateTokenIdSubscriptionActionData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData, PaymentUpdateTokenIdSubscriptionActionData");
                }

                @Override
                public PaymentSubscriptionActionData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    PaymentSubscriptionActionData newPaymentSubscriptionActionData = new PaymentSubscriptionActionData();
                    if (jsonObject.get("action_type") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for PaymentSubscriptionActionData as `action_type` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `action_type`
                        switch (jsonObject.get("action_type").getAsString()) {
                            case "Approve":
                                deserialized = adapterPaymentBaseSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "Charge":
                                deserialized = adapterPaymentBaseSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "Create":
                                deserialized = adapterPaymentCreateSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "DeveloperPause":
                                deserialized = adapterPaymentBaseSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "DeveloperUnpause":
                                deserialized = adapterPaymentBaseSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "Downgrade":
                                deserialized = adapterPaymentUpdateAmountSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "ExtendPeriod":
                                deserialized = adapterPaymentExtendPeriodSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "Subscribe":
                                deserialized = adapterPaymentBaseSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "SubscribeAndCharge":
                                deserialized = adapterPaymentBaseSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "UpdateTokenId":
                                deserialized = adapterPaymentUpdateTokenIdSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "Upgrade":
                                deserialized = adapterPaymentUpdateAmountSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "PaymentBaseSubscriptionActionData":
                                deserialized = adapterPaymentBaseSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "PaymentCreateSubscriptionActionData":
                                deserialized = adapterPaymentCreateSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "PaymentExtendPeriodSubscriptionActionData":
                                deserialized = adapterPaymentExtendPeriodSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "PaymentUpdateAmountSubscriptionActionData":
                                deserialized = adapterPaymentUpdateAmountSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            case "PaymentUpdateTokenIdSubscriptionActionData":
                                deserialized = adapterPaymentUpdateTokenIdSubscriptionActionData.fromJsonTree(jsonObject);
                                newPaymentSubscriptionActionData.setActualInstance(deserialized);
                                return newPaymentSubscriptionActionData;
                            default:
                                log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for PaymentSubscriptionActionData. Possible values: Approve Charge Create DeveloperPause DeveloperUnpause Downgrade ExtendPeriod Subscribe SubscribeAndCharge UpdateTokenId Upgrade PaymentBaseSubscriptionActionData PaymentCreateSubscriptionActionData PaymentExtendPeriodSubscriptionActionData PaymentUpdateAmountSubscriptionActionData PaymentUpdateTokenIdSubscriptionActionData", jsonObject.get("action_type").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PaymentCreateSubscriptionActionData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentCreateSubscriptionActionData.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentCreateSubscriptionActionData;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentCreateSubscriptionActionData'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentCreateSubscriptionActionData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentCreateSubscriptionActionData'", e);
                    }
                    // deserialize PaymentBaseSubscriptionActionData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentBaseSubscriptionActionData.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentBaseSubscriptionActionData;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentBaseSubscriptionActionData'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentBaseSubscriptionActionData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentBaseSubscriptionActionData'", e);
                    }
                    // deserialize PaymentExtendPeriodSubscriptionActionData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentExtendPeriodSubscriptionActionData.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentExtendPeriodSubscriptionActionData;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentExtendPeriodSubscriptionActionData'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentExtendPeriodSubscriptionActionData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentExtendPeriodSubscriptionActionData'", e);
                    }
                    // deserialize PaymentUpdateAmountSubscriptionActionData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentUpdateAmountSubscriptionActionData.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentUpdateAmountSubscriptionActionData;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentUpdateAmountSubscriptionActionData'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentUpdateAmountSubscriptionActionData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentUpdateAmountSubscriptionActionData'", e);
                    }
                    // deserialize PaymentUpdateTokenIdSubscriptionActionData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentUpdateTokenIdSubscriptionActionData.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentUpdateTokenIdSubscriptionActionData;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentUpdateTokenIdSubscriptionActionData'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentUpdateTokenIdSubscriptionActionData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentUpdateTokenIdSubscriptionActionData'", e);
                    }

                    if (match == 1) {
                        PaymentSubscriptionActionData ret = new PaymentSubscriptionActionData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for PaymentSubscriptionActionData: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PaymentSubscriptionActionData() {
        super("oneOf", Boolean.FALSE);
    }

    public PaymentSubscriptionActionData(PaymentBaseSubscriptionActionData o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentSubscriptionActionData(PaymentCreateSubscriptionActionData o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentSubscriptionActionData(PaymentExtendPeriodSubscriptionActionData o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentSubscriptionActionData(PaymentUpdateAmountSubscriptionActionData o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentSubscriptionActionData(PaymentUpdateTokenIdSubscriptionActionData o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PaymentCreateSubscriptionActionData", PaymentCreateSubscriptionActionData.class);
        schemas.put("PaymentBaseSubscriptionActionData", PaymentBaseSubscriptionActionData.class);
        schemas.put("PaymentExtendPeriodSubscriptionActionData", PaymentExtendPeriodSubscriptionActionData.class);
        schemas.put("PaymentUpdateAmountSubscriptionActionData", PaymentUpdateAmountSubscriptionActionData.class);
        schemas.put("PaymentUpdateTokenIdSubscriptionActionData", PaymentUpdateTokenIdSubscriptionActionData.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PaymentSubscriptionActionData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData, PaymentUpdateTokenIdSubscriptionActionData
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PaymentCreateSubscriptionActionData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaymentBaseSubscriptionActionData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaymentExtendPeriodSubscriptionActionData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaymentUpdateAmountSubscriptionActionData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaymentUpdateTokenIdSubscriptionActionData) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData, PaymentUpdateTokenIdSubscriptionActionData");
    }

    /**
     * Get the actual instance, which can be the following:
     * PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData, PaymentUpdateTokenIdSubscriptionActionData
     *
     * @return The actual instance (PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData, PaymentUpdateTokenIdSubscriptionActionData)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentCreateSubscriptionActionData`. If the actual instance is not `PaymentCreateSubscriptionActionData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentCreateSubscriptionActionData`
     * @throws ClassCastException if the instance is not `PaymentCreateSubscriptionActionData`
     */
    public PaymentCreateSubscriptionActionData getPaymentCreateSubscriptionActionData() throws ClassCastException {
        return (PaymentCreateSubscriptionActionData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PaymentBaseSubscriptionActionData`. If the actual instance is not `PaymentBaseSubscriptionActionData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentBaseSubscriptionActionData`
     * @throws ClassCastException if the instance is not `PaymentBaseSubscriptionActionData`
     */
    public PaymentBaseSubscriptionActionData getPaymentBaseSubscriptionActionData() throws ClassCastException {
        return (PaymentBaseSubscriptionActionData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PaymentExtendPeriodSubscriptionActionData`. If the actual instance is not `PaymentExtendPeriodSubscriptionActionData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentExtendPeriodSubscriptionActionData`
     * @throws ClassCastException if the instance is not `PaymentExtendPeriodSubscriptionActionData`
     */
    public PaymentExtendPeriodSubscriptionActionData getPaymentExtendPeriodSubscriptionActionData() throws ClassCastException {
        return (PaymentExtendPeriodSubscriptionActionData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PaymentUpdateAmountSubscriptionActionData`. If the actual instance is not `PaymentUpdateAmountSubscriptionActionData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentUpdateAmountSubscriptionActionData`
     * @throws ClassCastException if the instance is not `PaymentUpdateAmountSubscriptionActionData`
     */
    public PaymentUpdateAmountSubscriptionActionData getPaymentUpdateAmountSubscriptionActionData() throws ClassCastException {
        return (PaymentUpdateAmountSubscriptionActionData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PaymentUpdateTokenIdSubscriptionActionData`. If the actual instance is not `PaymentUpdateTokenIdSubscriptionActionData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentUpdateTokenIdSubscriptionActionData`
     * @throws ClassCastException if the instance is not `PaymentUpdateTokenIdSubscriptionActionData`
     */
    public PaymentUpdateTokenIdSubscriptionActionData getPaymentUpdateTokenIdSubscriptionActionData() throws ClassCastException {
        return (PaymentUpdateTokenIdSubscriptionActionData)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PaymentSubscriptionActionData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PaymentCreateSubscriptionActionData
        try {
            PaymentCreateSubscriptionActionData.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentCreateSubscriptionActionData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PaymentBaseSubscriptionActionData
        try {
            PaymentBaseSubscriptionActionData.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentBaseSubscriptionActionData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PaymentExtendPeriodSubscriptionActionData
        try {
            PaymentExtendPeriodSubscriptionActionData.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentExtendPeriodSubscriptionActionData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PaymentUpdateAmountSubscriptionActionData
        try {
            PaymentUpdateAmountSubscriptionActionData.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentUpdateAmountSubscriptionActionData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PaymentUpdateTokenIdSubscriptionActionData
        try {
            PaymentUpdateTokenIdSubscriptionActionData.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentUpdateTokenIdSubscriptionActionData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            // throw new IOException(String.format("The JSON string is invalid for PaymentSubscriptionActionData with oneOf schemas: PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData, PaymentUpdateTokenIdSubscriptionActionData. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of PaymentSubscriptionActionData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PaymentSubscriptionActionData
     * @throws IOException if the JSON string is invalid with respect to PaymentSubscriptionActionData
     */
    public static PaymentSubscriptionActionData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PaymentSubscriptionActionData.class);
    }

    /**
     * Convert an instance of PaymentSubscriptionActionData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

