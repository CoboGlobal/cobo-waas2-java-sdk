/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The transaction category defined by Cobo. Possible values include:    - &#x60;AutoSweep&#x60;: An auto-sweep transaction.   - &#x60;AutoFueling&#x60;: A transaction where Fee Station pays transaction fees to an address within your MPC Wallets.   - &#x60;AutoFuelingRefund&#x60;: A refund for an auto-fueling transaction.   - &#x60;SafeTxMessage&#x60;: A message signing transaction initiated by an MPC wallet to authorize a Smart Contract Wallet (Safe\\{Wallet\\}) transaction.   - &#x60;BillPayment&#x60;: A transaction to pay Cobo bills through Fee Station.   - &#x60;BillRefund&#x60;: A refund for a previously made bill payment.   - &#x60;CommissionFeeCharge&#x60;: A transaction to charge commission fees via Fee Station.   - &#x60;CommissionFeeRefund&#x60;: A refund of previously charged commission fees.   - &#x60;StakingBabylonBtcDelegation&#x60;: A transaction for delegating BTC in Babylon staking.   - &#x60;StakingBabylonBtcSignBabylon&#x60;: A transaction for signing Babylon operations with BTC.   - &#x60;StakingBabylonClaim&#x60;: A transaction for claiming rewards from Babylon staking.   - &#x60;StakingBabylonSlashing&#x60;: A transaction related to slashing penalties in Babylon staking.   - &#x60;StakingBabylonStake&#x60;: A transaction for staking assets in the Babylon platform.   - &#x60;StakingBabylonUnstake&#x60;: A transaction for unstaking assets from the Babylon platform.   - &#x60;StakingBabylonWithdraw&#x60;: A transaction for withdrawing assets from Babylon staking.   - &#x60;StakingBithiveClaim&#x60;: A transaction for claiming rewards from BitHive staking.   - &#x60;StakingBithiveStake&#x60;: A transaction for staking assets in the BitHive platform.   - &#x60;StakingBithiveUnstake&#x60;: A transaction for unstaking assets from the BitHive platform.   - &#x60;StakingBithiveWithdraw&#x60;: A transaction for withdrawing assets from BitHive staking.   - &#x60;StakingCoreStake&#x60;: A transaction for staking assets in the Core staking platform.   - &#x60;StakingCoreWithdraw&#x60;: A transaction for withdrawing assets from Core staking.   - &#x60;StakingEthClaim&#x60;: A transaction for claiming rewards from ETH staking.   - &#x60;StakingEthStake&#x60;: A transaction for staking ETH assets.   - &#x60;StakingEthUnstake&#x60;: A transaction for unstaking ETH assets.   - &#x60;StakingSkyfarmClaim&#x60;: A transaction for claiming rewards from Skyfarm staking.   - &#x60;StakingSkyfarmStake&#x60;: A transaction for staking assets in the Skyfarm platform.   - &#x60;StakingSkyfarmUnstake&#x60;: A transaction for unstaking assets from the Skyfarm platform. 
 */
@JsonAdapter(TransactionCoboCategory.Adapter.class)
public enum TransactionCoboCategory {
  UNKNOWN(null),
  
  AUTOFUELING("AutoFueling"),
  
  AUTOFUELINGREFUND("AutoFuelingRefund"),
  
  AUTOSWEEP("AutoSweep"),
  
  BILLPAYMENT("BillPayment"),
  
  BILLREFUND("BillRefund"),
  
  COMMISSIONFEECHARGE("CommissionFeeCharge"),
  
  COMMISSIONFEEREFUND("CommissionFeeRefund"),
  
  SAFETXMESSAGE("SafeTxMessage"),
  
  STAKINGBABYLONBTCDELEGATION("StakingBabylonBtcDelegation"),
  
  STAKINGBABYLONBTCSIGNBABYLON("StakingBabylonBtcSignBabylon"),
  
  STAKINGBABYLONCLAIM("StakingBabylonClaim"),
  
  STAKINGBABYLONSLASHING("StakingBabylonSlashing"),
  
  STAKINGBABYLONSTAKE("StakingBabylonStake"),
  
  STAKINGBABYLONUNSTAKE("StakingBabylonUnstake"),
  
  STAKINGBABYLONWITHDRAW("StakingBabylonWithdraw"),
  
  STAKINGBITHIVECLAIM("StakingBithiveClaim"),
  
  STAKINGBITHIVESTAKE("StakingBithiveStake"),
  
  STAKINGBITHIVEUNSTAKE("StakingBithiveUnstake"),
  
  STAKINGBITHIVEWITHDRAW("StakingBithiveWithdraw"),
  
  STAKINGCORESTAKE("StakingCoreStake"),
  
  STAKINGCOREWITHDRAW("StakingCoreWithdraw"),
  
  STAKINGETHCLAIM("StakingEthClaim"),
  
  STAKINGETHSTAKE("StakingEthStake"),
  
  STAKINGETHUNSTAKE("StakingEthUnstake"),
  
  STAKINGSKYFARMCLAIM("StakingSkyfarmClaim"),
  
  STAKINGSKYFARMSTAKE("StakingSkyfarmStake"),
  
  STAKINGSKYFARMUNSTAKE("StakingSkyfarmUnstake"),
  
  SCREENAPPREFUND("ScreenAppRefund"),
  
  SCREENAPPISOLATE("ScreenAppIsolate"),
  
  COMPLIANCEREFUND("ComplianceRefund"),
  
  COMPLIANCEISOLATE("ComplianceIsolate");

  private String value;

  TransactionCoboCategory(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransactionCoboCategory fromValue(String value) {
    for (TransactionCoboCategory b : TransactionCoboCategory.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TransactionCoboCategory> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransactionCoboCategory enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TransactionCoboCategory read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TransactionCoboCategory.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TransactionCoboCategory.fromValue(value);
  }
}

