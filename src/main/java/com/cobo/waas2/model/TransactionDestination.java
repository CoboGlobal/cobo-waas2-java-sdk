/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.ExchangeId;
import com.cobo.waas2.model.SafeTxExtraData;
import com.cobo.waas2.model.TransactionBIP137Destination;
import com.cobo.waas2.model.TransactionBIP322Destination;
import com.cobo.waas2.model.TransactionCosmosAdr36Destination;
import com.cobo.waas2.model.TransactionCosmosContractDestination;
import com.cobo.waas2.model.TransactionCosmosMessage;
import com.cobo.waas2.model.TransactionDepositToAddressDestination;
import com.cobo.waas2.model.TransactionDepositToAddressDestinationTxInfo;
import com.cobo.waas2.model.TransactionDepositToWalletDestination;
import com.cobo.waas2.model.TransactionDestinationType;
import com.cobo.waas2.model.TransactionEvmCalldataInfo;
import com.cobo.waas2.model.TransactionEvmContractDestination;
import com.cobo.waas2.model.TransactionMessageSignBTCEIP191Destination;
import com.cobo.waas2.model.TransactionMessageSignEIP191Destination;
import com.cobo.waas2.model.TransactionMessageSignEIP712Destination;
import com.cobo.waas2.model.TransactionRawMessageSignDestination;
import com.cobo.waas2.model.TransactionSolContractDestination;
import com.cobo.waas2.model.TransactionSolContractInstruction;
import com.cobo.waas2.model.TransactionTransferToAddressDestination;
import com.cobo.waas2.model.TransactionTransferToAddressDestinationAccountOutput;
import com.cobo.waas2.model.TransactionTransferToAddressDestinationUtxoOutputsInner;
import com.cobo.waas2.model.TransactionTransferToWalletDestination;
import com.cobo.waas2.model.WalletSubtype;
import com.cobo.waas2.model.WalletType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.cobo.waas2.JSON;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TransactionDestination extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TransactionDestination.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TransactionDestination.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TransactionDestination' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TransactionTransferToAddressDestination> adapterTransactionTransferToAddressDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionTransferToAddressDestination.class));
            final TypeAdapter<TransactionTransferToWalletDestination> adapterTransactionTransferToWalletDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionTransferToWalletDestination.class));
            final TypeAdapter<TransactionEvmContractDestination> adapterTransactionEvmContractDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionEvmContractDestination.class));
            final TypeAdapter<TransactionSolContractDestination> adapterTransactionSolContractDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionSolContractDestination.class));
            final TypeAdapter<TransactionCosmosContractDestination> adapterTransactionCosmosContractDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionCosmosContractDestination.class));
            final TypeAdapter<TransactionMessageSignEIP191Destination> adapterTransactionMessageSignEIP191Destination = gson.getDelegateAdapter(this, TypeToken.get(TransactionMessageSignEIP191Destination.class));
            final TypeAdapter<TransactionMessageSignEIP712Destination> adapterTransactionMessageSignEIP712Destination = gson.getDelegateAdapter(this, TypeToken.get(TransactionMessageSignEIP712Destination.class));
            final TypeAdapter<TransactionMessageSignBTCEIP191Destination> adapterTransactionMessageSignBTCEIP191Destination = gson.getDelegateAdapter(this, TypeToken.get(TransactionMessageSignBTCEIP191Destination.class));
            final TypeAdapter<TransactionRawMessageSignDestination> adapterTransactionRawMessageSignDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionRawMessageSignDestination.class));
            final TypeAdapter<TransactionDepositToAddressDestination> adapterTransactionDepositToAddressDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionDepositToAddressDestination.class));
            final TypeAdapter<TransactionDepositToWalletDestination> adapterTransactionDepositToWalletDestination = gson.getDelegateAdapter(this, TypeToken.get(TransactionDepositToWalletDestination.class));
            final TypeAdapter<TransactionBIP137Destination> adapterTransactionBIP137Destination = gson.getDelegateAdapter(this, TypeToken.get(TransactionBIP137Destination.class));
            final TypeAdapter<TransactionBIP322Destination> adapterTransactionBIP322Destination = gson.getDelegateAdapter(this, TypeToken.get(TransactionBIP322Destination.class));
            final TypeAdapter<TransactionCosmosAdr36Destination> adapterTransactionCosmosAdr36Destination = gson.getDelegateAdapter(this, TypeToken.get(TransactionCosmosAdr36Destination.class));

            return (TypeAdapter<T>) new TypeAdapter<TransactionDestination>() {
                @Override
                public void write(JsonWriter out, TransactionDestination value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TransactionTransferToAddressDestination`
                    if (value.getActualInstance() instanceof TransactionTransferToAddressDestination) {
                        JsonElement element = adapterTransactionTransferToAddressDestination.toJsonTree((TransactionTransferToAddressDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionTransferToWalletDestination`
                    if (value.getActualInstance() instanceof TransactionTransferToWalletDestination) {
                        JsonElement element = adapterTransactionTransferToWalletDestination.toJsonTree((TransactionTransferToWalletDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionEvmContractDestination`
                    if (value.getActualInstance() instanceof TransactionEvmContractDestination) {
                        JsonElement element = adapterTransactionEvmContractDestination.toJsonTree((TransactionEvmContractDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionSolContractDestination`
                    if (value.getActualInstance() instanceof TransactionSolContractDestination) {
                        JsonElement element = adapterTransactionSolContractDestination.toJsonTree((TransactionSolContractDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionCosmosContractDestination`
                    if (value.getActualInstance() instanceof TransactionCosmosContractDestination) {
                        JsonElement element = adapterTransactionCosmosContractDestination.toJsonTree((TransactionCosmosContractDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionMessageSignEIP191Destination`
                    if (value.getActualInstance() instanceof TransactionMessageSignEIP191Destination) {
                        JsonElement element = adapterTransactionMessageSignEIP191Destination.toJsonTree((TransactionMessageSignEIP191Destination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionMessageSignEIP712Destination`
                    if (value.getActualInstance() instanceof TransactionMessageSignEIP712Destination) {
                        JsonElement element = adapterTransactionMessageSignEIP712Destination.toJsonTree((TransactionMessageSignEIP712Destination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionMessageSignBTCEIP191Destination`
                    if (value.getActualInstance() instanceof TransactionMessageSignBTCEIP191Destination) {
                        JsonElement element = adapterTransactionMessageSignBTCEIP191Destination.toJsonTree((TransactionMessageSignBTCEIP191Destination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionRawMessageSignDestination`
                    if (value.getActualInstance() instanceof TransactionRawMessageSignDestination) {
                        JsonElement element = adapterTransactionRawMessageSignDestination.toJsonTree((TransactionRawMessageSignDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionDepositToAddressDestination`
                    if (value.getActualInstance() instanceof TransactionDepositToAddressDestination) {
                        JsonElement element = adapterTransactionDepositToAddressDestination.toJsonTree((TransactionDepositToAddressDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionDepositToWalletDestination`
                    if (value.getActualInstance() instanceof TransactionDepositToWalletDestination) {
                        JsonElement element = adapterTransactionDepositToWalletDestination.toJsonTree((TransactionDepositToWalletDestination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionBIP137Destination`
                    if (value.getActualInstance() instanceof TransactionBIP137Destination) {
                        JsonElement element = adapterTransactionBIP137Destination.toJsonTree((TransactionBIP137Destination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionBIP322Destination`
                    if (value.getActualInstance() instanceof TransactionBIP322Destination) {
                        JsonElement element = adapterTransactionBIP322Destination.toJsonTree((TransactionBIP322Destination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionCosmosAdr36Destination`
                    if (value.getActualInstance() instanceof TransactionCosmosAdr36Destination) {
                        JsonElement element = adapterTransactionCosmosAdr36Destination.toJsonTree((TransactionCosmosAdr36Destination)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignBTCEIP191Destination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination");
                }

                @Override
                public TransactionDestination read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    TransactionDestination newTransactionDestination = new TransactionDestination();
                    if (jsonObject.get("destination_type") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for TransactionDestination as `destination_type` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `destination_type`
                        switch (jsonObject.get("destination_type").getAsString()) {
                            case "Address":
                                deserialized = adapterTransactionTransferToAddressDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "BTC_BIP_137_Signature":
                                deserialized = adapterTransactionBIP137Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "BTC_BIP_322_Signature":
                                deserialized = adapterTransactionBIP322Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "BTC_EIP_191_Signature":
                                deserialized = adapterTransactionMessageSignBTCEIP191Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "COSMOS_ADR_36_Signature":
                                deserialized = adapterTransactionCosmosAdr36Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "COSMOS_Contract":
                                deserialized = adapterTransactionCosmosContractDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "DepositToAddress":
                                deserialized = adapterTransactionDepositToAddressDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "DepositToWallet":
                                deserialized = adapterTransactionDepositToWalletDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "EVM_Contract":
                                deserialized = adapterTransactionEvmContractDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "EVM_EIP_191_Signature":
                                deserialized = adapterTransactionMessageSignEIP191Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "EVM_EIP_712_Signature":
                                deserialized = adapterTransactionMessageSignEIP712Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "ExchangeWallet":
                                deserialized = adapterTransactionTransferToWalletDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "Raw_Message_Signature":
                                deserialized = adapterTransactionRawMessageSignDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "SOL_Contract":
                                deserialized = adapterTransactionSolContractDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionBIP137Destination":
                                deserialized = adapterTransactionBIP137Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionBIP322Destination":
                                deserialized = adapterTransactionBIP322Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionCosmosAdr36Destination":
                                deserialized = adapterTransactionCosmosAdr36Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionCosmosContractDestination":
                                deserialized = adapterTransactionCosmosContractDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionDepositToAddressDestination":
                                deserialized = adapterTransactionDepositToAddressDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionDepositToWalletDestination":
                                deserialized = adapterTransactionDepositToWalletDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionEvmContractDestination":
                                deserialized = adapterTransactionEvmContractDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionMessageSignBTCEIP191Destination":
                                deserialized = adapterTransactionMessageSignBTCEIP191Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionMessageSignEIP191Destination":
                                deserialized = adapterTransactionMessageSignEIP191Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionMessageSignEIP712Destination":
                                deserialized = adapterTransactionMessageSignEIP712Destination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionRawMessageSignDestination":
                                deserialized = adapterTransactionRawMessageSignDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionSolContractDestination":
                                deserialized = adapterTransactionSolContractDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionTransferToAddressDestination":
                                deserialized = adapterTransactionTransferToAddressDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            case "TransactionTransferToWalletDestination":
                                deserialized = adapterTransactionTransferToWalletDestination.fromJsonTree(jsonObject);
                                newTransactionDestination.setActualInstance(deserialized);
                                return newTransactionDestination;
                            default:
                                log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for TransactionDestination. Possible values: Address BTC_BIP_137_Signature BTC_BIP_322_Signature BTC_EIP_191_Signature COSMOS_ADR_36_Signature COSMOS_Contract DepositToAddress DepositToWallet EVM_Contract EVM_EIP_191_Signature EVM_EIP_712_Signature ExchangeWallet Raw_Message_Signature SOL_Contract TransactionBIP137Destination TransactionBIP322Destination TransactionCosmosAdr36Destination TransactionCosmosContractDestination TransactionDepositToAddressDestination TransactionDepositToWalletDestination TransactionEvmContractDestination TransactionMessageSignBTCEIP191Destination TransactionMessageSignEIP191Destination TransactionMessageSignEIP712Destination TransactionRawMessageSignDestination TransactionSolContractDestination TransactionTransferToAddressDestination TransactionTransferToWalletDestination", jsonObject.get("destination_type").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TransactionTransferToAddressDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionTransferToAddressDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionTransferToAddressDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionTransferToAddressDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionTransferToAddressDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionTransferToAddressDestination'", e);
                    }
                    // deserialize TransactionTransferToWalletDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionTransferToWalletDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionTransferToWalletDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionTransferToWalletDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionTransferToWalletDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionTransferToWalletDestination'", e);
                    }
                    // deserialize TransactionEvmContractDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionEvmContractDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionEvmContractDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionEvmContractDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionEvmContractDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionEvmContractDestination'", e);
                    }
                    // deserialize TransactionSolContractDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionSolContractDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionSolContractDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionSolContractDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionSolContractDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionSolContractDestination'", e);
                    }
                    // deserialize TransactionCosmosContractDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionCosmosContractDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionCosmosContractDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionCosmosContractDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionCosmosContractDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionCosmosContractDestination'", e);
                    }
                    // deserialize TransactionMessageSignEIP191Destination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionMessageSignEIP191Destination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionMessageSignEIP191Destination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionMessageSignEIP191Destination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionMessageSignEIP191Destination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionMessageSignEIP191Destination'", e);
                    }
                    // deserialize TransactionMessageSignEIP712Destination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionMessageSignEIP712Destination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionMessageSignEIP712Destination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionMessageSignEIP712Destination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionMessageSignEIP712Destination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionMessageSignEIP712Destination'", e);
                    }
                    // deserialize TransactionMessageSignBTCEIP191Destination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionMessageSignBTCEIP191Destination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionMessageSignBTCEIP191Destination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionMessageSignBTCEIP191Destination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionMessageSignBTCEIP191Destination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionMessageSignBTCEIP191Destination'", e);
                    }
                    // deserialize TransactionRawMessageSignDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionRawMessageSignDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionRawMessageSignDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionRawMessageSignDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionRawMessageSignDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionRawMessageSignDestination'", e);
                    }
                    // deserialize TransactionDepositToAddressDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionDepositToAddressDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionDepositToAddressDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionDepositToAddressDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionDepositToAddressDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionDepositToAddressDestination'", e);
                    }
                    // deserialize TransactionDepositToWalletDestination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionDepositToWalletDestination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionDepositToWalletDestination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionDepositToWalletDestination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionDepositToWalletDestination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionDepositToWalletDestination'", e);
                    }
                    // deserialize TransactionBIP137Destination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionBIP137Destination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionBIP137Destination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionBIP137Destination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionBIP137Destination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionBIP137Destination'", e);
                    }
                    // deserialize TransactionBIP322Destination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionBIP322Destination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionBIP322Destination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionBIP322Destination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionBIP322Destination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionBIP322Destination'", e);
                    }
                    // deserialize TransactionCosmosAdr36Destination
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionCosmosAdr36Destination.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionCosmosAdr36Destination;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionCosmosAdr36Destination'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionCosmosAdr36Destination failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionCosmosAdr36Destination'", e);
                    }

                    if (match == 1) {
                        TransactionDestination ret = new TransactionDestination();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TransactionDestination: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TransactionDestination() {
        super("oneOf", Boolean.FALSE);
    }

    public TransactionDestination(TransactionBIP137Destination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionBIP322Destination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionCosmosAdr36Destination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionCosmosContractDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionDepositToAddressDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionDepositToWalletDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionEvmContractDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionMessageSignBTCEIP191Destination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionMessageSignEIP191Destination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionMessageSignEIP712Destination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionRawMessageSignDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionSolContractDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionTransferToAddressDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionDestination(TransactionTransferToWalletDestination o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TransactionTransferToAddressDestination", TransactionTransferToAddressDestination.class);
        schemas.put("TransactionTransferToWalletDestination", TransactionTransferToWalletDestination.class);
        schemas.put("TransactionEvmContractDestination", TransactionEvmContractDestination.class);
        schemas.put("TransactionSolContractDestination", TransactionSolContractDestination.class);
        schemas.put("TransactionCosmosContractDestination", TransactionCosmosContractDestination.class);
        schemas.put("TransactionMessageSignEIP191Destination", TransactionMessageSignEIP191Destination.class);
        schemas.put("TransactionMessageSignEIP712Destination", TransactionMessageSignEIP712Destination.class);
        schemas.put("TransactionMessageSignBTCEIP191Destination", TransactionMessageSignBTCEIP191Destination.class);
        schemas.put("TransactionRawMessageSignDestination", TransactionRawMessageSignDestination.class);
        schemas.put("TransactionDepositToAddressDestination", TransactionDepositToAddressDestination.class);
        schemas.put("TransactionDepositToWalletDestination", TransactionDepositToWalletDestination.class);
        schemas.put("TransactionBIP137Destination", TransactionBIP137Destination.class);
        schemas.put("TransactionBIP322Destination", TransactionBIP322Destination.class);
        schemas.put("TransactionCosmosAdr36Destination", TransactionCosmosAdr36Destination.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TransactionDestination.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignBTCEIP191Destination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TransactionTransferToAddressDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionTransferToWalletDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionEvmContractDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionSolContractDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionCosmosContractDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionMessageSignEIP191Destination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionMessageSignEIP712Destination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionMessageSignBTCEIP191Destination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionRawMessageSignDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionDepositToAddressDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionDepositToWalletDestination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionBIP137Destination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionBIP322Destination) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionCosmosAdr36Destination) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignBTCEIP191Destination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination");
    }

    /**
     * Get the actual instance, which can be the following:
     * TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignBTCEIP191Destination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination
     *
     * @return The actual instance (TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignBTCEIP191Destination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TransactionTransferToAddressDestination`. If the actual instance is not `TransactionTransferToAddressDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionTransferToAddressDestination`
     * @throws ClassCastException if the instance is not `TransactionTransferToAddressDestination`
     */
    public TransactionTransferToAddressDestination getTransactionTransferToAddressDestination() throws ClassCastException {
        return (TransactionTransferToAddressDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionTransferToWalletDestination`. If the actual instance is not `TransactionTransferToWalletDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionTransferToWalletDestination`
     * @throws ClassCastException if the instance is not `TransactionTransferToWalletDestination`
     */
    public TransactionTransferToWalletDestination getTransactionTransferToWalletDestination() throws ClassCastException {
        return (TransactionTransferToWalletDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionEvmContractDestination`. If the actual instance is not `TransactionEvmContractDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionEvmContractDestination`
     * @throws ClassCastException if the instance is not `TransactionEvmContractDestination`
     */
    public TransactionEvmContractDestination getTransactionEvmContractDestination() throws ClassCastException {
        return (TransactionEvmContractDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionSolContractDestination`. If the actual instance is not `TransactionSolContractDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionSolContractDestination`
     * @throws ClassCastException if the instance is not `TransactionSolContractDestination`
     */
    public TransactionSolContractDestination getTransactionSolContractDestination() throws ClassCastException {
        return (TransactionSolContractDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionCosmosContractDestination`. If the actual instance is not `TransactionCosmosContractDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionCosmosContractDestination`
     * @throws ClassCastException if the instance is not `TransactionCosmosContractDestination`
     */
    public TransactionCosmosContractDestination getTransactionCosmosContractDestination() throws ClassCastException {
        return (TransactionCosmosContractDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionMessageSignEIP191Destination`. If the actual instance is not `TransactionMessageSignEIP191Destination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionMessageSignEIP191Destination`
     * @throws ClassCastException if the instance is not `TransactionMessageSignEIP191Destination`
     */
    public TransactionMessageSignEIP191Destination getTransactionMessageSignEIP191Destination() throws ClassCastException {
        return (TransactionMessageSignEIP191Destination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionMessageSignEIP712Destination`. If the actual instance is not `TransactionMessageSignEIP712Destination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionMessageSignEIP712Destination`
     * @throws ClassCastException if the instance is not `TransactionMessageSignEIP712Destination`
     */
    public TransactionMessageSignEIP712Destination getTransactionMessageSignEIP712Destination() throws ClassCastException {
        return (TransactionMessageSignEIP712Destination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionMessageSignBTCEIP191Destination`. If the actual instance is not `TransactionMessageSignBTCEIP191Destination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionMessageSignBTCEIP191Destination`
     * @throws ClassCastException if the instance is not `TransactionMessageSignBTCEIP191Destination`
     */
    public TransactionMessageSignBTCEIP191Destination getTransactionMessageSignBTCEIP191Destination() throws ClassCastException {
        return (TransactionMessageSignBTCEIP191Destination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionRawMessageSignDestination`. If the actual instance is not `TransactionRawMessageSignDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionRawMessageSignDestination`
     * @throws ClassCastException if the instance is not `TransactionRawMessageSignDestination`
     */
    public TransactionRawMessageSignDestination getTransactionRawMessageSignDestination() throws ClassCastException {
        return (TransactionRawMessageSignDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionDepositToAddressDestination`. If the actual instance is not `TransactionDepositToAddressDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionDepositToAddressDestination`
     * @throws ClassCastException if the instance is not `TransactionDepositToAddressDestination`
     */
    public TransactionDepositToAddressDestination getTransactionDepositToAddressDestination() throws ClassCastException {
        return (TransactionDepositToAddressDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionDepositToWalletDestination`. If the actual instance is not `TransactionDepositToWalletDestination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionDepositToWalletDestination`
     * @throws ClassCastException if the instance is not `TransactionDepositToWalletDestination`
     */
    public TransactionDepositToWalletDestination getTransactionDepositToWalletDestination() throws ClassCastException {
        return (TransactionDepositToWalletDestination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionBIP137Destination`. If the actual instance is not `TransactionBIP137Destination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionBIP137Destination`
     * @throws ClassCastException if the instance is not `TransactionBIP137Destination`
     */
    public TransactionBIP137Destination getTransactionBIP137Destination() throws ClassCastException {
        return (TransactionBIP137Destination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionBIP322Destination`. If the actual instance is not `TransactionBIP322Destination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionBIP322Destination`
     * @throws ClassCastException if the instance is not `TransactionBIP322Destination`
     */
    public TransactionBIP322Destination getTransactionBIP322Destination() throws ClassCastException {
        return (TransactionBIP322Destination)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionCosmosAdr36Destination`. If the actual instance is not `TransactionCosmosAdr36Destination`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionCosmosAdr36Destination`
     * @throws ClassCastException if the instance is not `TransactionCosmosAdr36Destination`
     */
    public TransactionCosmosAdr36Destination getTransactionCosmosAdr36Destination() throws ClassCastException {
        return (TransactionCosmosAdr36Destination)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TransactionDestination
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TransactionTransferToAddressDestination
        try {
            TransactionTransferToAddressDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionTransferToAddressDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionTransferToWalletDestination
        try {
            TransactionTransferToWalletDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionTransferToWalletDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionEvmContractDestination
        try {
            TransactionEvmContractDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionEvmContractDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionSolContractDestination
        try {
            TransactionSolContractDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionSolContractDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionCosmosContractDestination
        try {
            TransactionCosmosContractDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionCosmosContractDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionMessageSignEIP191Destination
        try {
            TransactionMessageSignEIP191Destination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionMessageSignEIP191Destination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionMessageSignEIP712Destination
        try {
            TransactionMessageSignEIP712Destination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionMessageSignEIP712Destination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionMessageSignBTCEIP191Destination
        try {
            TransactionMessageSignBTCEIP191Destination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionMessageSignBTCEIP191Destination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionRawMessageSignDestination
        try {
            TransactionRawMessageSignDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionRawMessageSignDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionDepositToAddressDestination
        try {
            TransactionDepositToAddressDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionDepositToAddressDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionDepositToWalletDestination
        try {
            TransactionDepositToWalletDestination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionDepositToWalletDestination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionBIP137Destination
        try {
            TransactionBIP137Destination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionBIP137Destination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionBIP322Destination
        try {
            TransactionBIP322Destination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionBIP322Destination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionCosmosAdr36Destination
        try {
            TransactionCosmosAdr36Destination.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionCosmosAdr36Destination failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            // throw new IOException(String.format("The JSON string is invalid for TransactionDestination with oneOf schemas: TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignBTCEIP191Destination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TransactionDestination given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TransactionDestination
     * @throws IOException if the JSON string is invalid with respect to TransactionDestination
     */
    public static TransactionDestination fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TransactionDestination.class);
    }

    /**
     * Convert an instance of TransactionDestination to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

