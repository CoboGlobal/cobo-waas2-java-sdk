/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.OrderStatus;
import com.cobo.waas2.model.PaymentTransaction;
import com.cobo.waas2.model.SettleStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * Order
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class Order {
  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chain_id";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_PAYABLE_AMOUNT = "payable_amount";
  @SerializedName(SERIALIZED_NAME_PAYABLE_AMOUNT)
  private String payableAmount;

  public static final String SERIALIZED_NAME_RECEIVE_ADDRESS = "receive_address";
  @SerializedName(SERIALIZED_NAME_RECEIVE_ADDRESS)
  private String receiveAddress;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ORDER_AMOUNT = "order_amount";
  @SerializedName(SERIALIZED_NAME_ORDER_AMOUNT)
  private String orderAmount;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "fee_amount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private String feeAmount;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchange_rate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private String exchangeRate;

  public static final String SERIALIZED_NAME_EXPIRED_AT = "expired_at";
  @SerializedName(SERIALIZED_NAME_EXPIRED_AT)
  private Integer expiredAt;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_CODE = "merchant_order_code";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_CODE)
  private String merchantOrderCode;

  public static final String SERIALIZED_NAME_PSP_ORDER_CODE = "psp_order_code";
  @SerializedName(SERIALIZED_NAME_PSP_ORDER_CODE)
  private String pspOrderCode;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OrderStatus status;

  public static final String SERIALIZED_NAME_RECEIVED_TOKEN_AMOUNT = "received_token_amount";
  @SerializedName(SERIALIZED_NAME_RECEIVED_TOKEN_AMOUNT)
  private String receivedTokenAmount;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Integer createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Integer updatedTimestamp;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<PaymentTransaction> transactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTLEMENT_STATUS = "settlement_status";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_STATUS)
  private SettleStatus settlementStatus;

  public static final String SERIALIZED_NAME_AMOUNT_TOLERANCE = "amount_tolerance";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TOLERANCE)
  private String amountTolerance;

  public Order() {
  }

  public Order orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * The order ID.
   * @return orderId
  **/
  @javax.annotation.Nonnull
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Order merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant ID.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Order tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   *  The ID of the cryptocurrency used for payment. Supported tokens:  - USDC: &#x60;ETH_USDC&#x60;, &#x60;ARBITRUM_USDCOIN&#x60;, &#x60;SOL_USDC&#x60;, &#x60;BASE_USDC&#x60;, &#x60;MATIC_USDC2&#x60;, &#x60;BSC_USDC&#x60; - USDT: &#x60;TRON_USDT&#x60;, &#x60;ETH_USDT&#x60;, &#x60;ARBITRUM_USDT&#x60;, &#x60;SOL_USDT&#x60;, &#x60;BASE_USDT&#x60;, &#x60;MATIC_USDT&#x60;, &#x60;BSC_USDT&#x60; 
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public Order chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   *  The ID of the blockchain network where the payment transaction should be made. Supported chains:  - USDC: &#x60;ETH&#x60;, &#x60;ARBITRUM&#x60;, &#x60;SOL&#x60;, &#x60;BASE&#x60;, &#x60;MATIC&#x60;, &#x60;BSC&#x60; - USDT: &#x60;TRON&#x60;, &#x60;ETH&#x60;, &#x60;ARBITRUM&#x60;, &#x60;SOL&#x60;, &#x60;BASE&#x60;, &#x60;MATIC&#x60;, &#x60;BSC&#x60; 
   * @return chainId
  **/
  @javax.annotation.Nonnull
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public Order payableAmount(String payableAmount) {
    this.payableAmount = payableAmount;
    return this;
  }

   /**
   * The cryptocurrency amount to be paid for this order.
   * @return payableAmount
  **/
  @javax.annotation.Nonnull
  public String getPayableAmount() {
    return payableAmount;
  }

  public void setPayableAmount(String payableAmount) {
    this.payableAmount = payableAmount;
  }


  public Order receiveAddress(String receiveAddress) {
    this.receiveAddress = receiveAddress;
    return this;
  }

   /**
   * The recipient wallet address to be used for the payment transaction.
   * @return receiveAddress
  **/
  @javax.annotation.Nonnull
  public String getReceiveAddress() {
    return receiveAddress;
  }

  public void setReceiveAddress(String receiveAddress) {
    this.receiveAddress = receiveAddress;
  }


  public Order currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The fiat currency of the order.
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Order orderAmount(String orderAmount) {
    this.orderAmount = orderAmount;
    return this;
  }

   /**
   * The base amount of the order in fiat currency, excluding the developer fee (specified in &#x60;fee_amount&#x60;).
   * @return orderAmount
  **/
  @javax.annotation.Nonnull
  public String getOrderAmount() {
    return orderAmount;
  }

  public void setOrderAmount(String orderAmount) {
    this.orderAmount = orderAmount;
  }


  public Order feeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

   /**
   * The developer fee for the order in fiat currency. It is added to the base amount (&#x60;order_amount&#x60;) to determine the final charge.
   * @return feeAmount
  **/
  @javax.annotation.Nonnull
  public String getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }


  public Order exchangeRate(String exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The exchange rate between a currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of \&quot;0.99\&quot; means 1 USDT &#x3D; 0.99 USD.
   * @return exchangeRate
  **/
  @javax.annotation.Nonnull
  public String getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(String exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public Order expiredAt(Integer expiredAt) {
    this.expiredAt = expiredAt;
    return this;
  }

   /**
   * The expiration time of the pay-in order, represented as a UNIX timestamp in seconds.
   * @return expiredAt
  **/
  @javax.annotation.Nullable
  public Integer getExpiredAt() {
    return expiredAt;
  }

  public void setExpiredAt(Integer expiredAt) {
    this.expiredAt = expiredAt;
  }


  public Order merchantOrderCode(String merchantOrderCode) {
    this.merchantOrderCode = merchantOrderCode;
    return this;
  }

   /**
   * A unique reference code assigned by the merchant to identify this order in their system.
   * @return merchantOrderCode
  **/
  @javax.annotation.Nullable
  public String getMerchantOrderCode() {
    return merchantOrderCode;
  }

  public void setMerchantOrderCode(String merchantOrderCode) {
    this.merchantOrderCode = merchantOrderCode;
  }


  public Order pspOrderCode(String pspOrderCode) {
    this.pspOrderCode = pspOrderCode;
    return this;
  }

   /**
   * A unique reference code assigned by the developer to identify this order in their system.
   * @return pspOrderCode
  **/
  @javax.annotation.Nonnull
  public String getPspOrderCode() {
    return pspOrderCode;
  }

  public void setPspOrderCode(String pspOrderCode) {
    this.pspOrderCode = pspOrderCode;
  }


  public Order status(OrderStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public OrderStatus getStatus() {
    return status;
  }

  public void setStatus(OrderStatus status) {
    this.status = status;
  }


  public Order receivedTokenAmount(String receivedTokenAmount) {
    this.receivedTokenAmount = receivedTokenAmount;
    return this;
  }

   /**
   * The total cryptocurrency amount received for this order. Updates until the expiration time. Precision matches the token standard (e.g., 6 decimals for USDT).
   * @return receivedTokenAmount
  **/
  @javax.annotation.Nonnull
  public String getReceivedTokenAmount() {
    return receivedTokenAmount;
  }

  public void setReceivedTokenAmount(String receivedTokenAmount) {
    this.receivedTokenAmount = receivedTokenAmount;
  }


  public Order createdTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The creation time of the order, represented as a UNIX timestamp in seconds.
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable
  public Integer getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public Order updatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The last update time of the order, represented as a UNIX timestamp in seconds.
   * @return updatedTimestamp
  **/
  @javax.annotation.Nullable
  public Integer getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public Order transactions(List<PaymentTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public Order addTransactionsItem(PaymentTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * An array of transactions associated with this pay-in order. Each transaction represents a separate blockchain operation related to the pay-in process.
   * @return transactions
  **/
  @javax.annotation.Nullable
  public List<PaymentTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<PaymentTransaction> transactions) {
    this.transactions = transactions;
  }


  public Order settlementStatus(SettleStatus settlementStatus) {
    this.settlementStatus = settlementStatus;
    return this;
  }

   /**
   * Get settlementStatus
   * @return settlementStatus
  **/
  @javax.annotation.Nullable
  public SettleStatus getSettlementStatus() {
    return settlementStatus;
  }

  public void setSettlementStatus(SettleStatus settlementStatus) {
    this.settlementStatus = settlementStatus;
  }


  public Order amountTolerance(String amountTolerance) {
    this.amountTolerance = amountTolerance;
    return this;
  }

   /**
   * Allowed amount deviation.
   * @return amountTolerance
  **/
  @javax.annotation.Nullable
  public String getAmountTolerance() {
    return amountTolerance;
  }

  public void setAmountTolerance(String amountTolerance) {
    this.amountTolerance = amountTolerance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Order instance itself
   */
  public Order putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.merchantId, order.merchantId) &&
        Objects.equals(this.tokenId, order.tokenId) &&
        Objects.equals(this.chainId, order.chainId) &&
        Objects.equals(this.payableAmount, order.payableAmount) &&
        Objects.equals(this.receiveAddress, order.receiveAddress) &&
        Objects.equals(this.currency, order.currency) &&
        Objects.equals(this.orderAmount, order.orderAmount) &&
        Objects.equals(this.feeAmount, order.feeAmount) &&
        Objects.equals(this.exchangeRate, order.exchangeRate) &&
        Objects.equals(this.expiredAt, order.expiredAt) &&
        Objects.equals(this.merchantOrderCode, order.merchantOrderCode) &&
        Objects.equals(this.pspOrderCode, order.pspOrderCode) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.receivedTokenAmount, order.receivedTokenAmount) &&
        Objects.equals(this.createdTimestamp, order.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, order.updatedTimestamp) &&
        Objects.equals(this.transactions, order.transactions) &&
        Objects.equals(this.settlementStatus, order.settlementStatus) &&
        Objects.equals(this.amountTolerance, order.amountTolerance)&&
        Objects.equals(this.additionalProperties, order.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, merchantId, tokenId, chainId, payableAmount, receiveAddress, currency, orderAmount, feeAmount, exchangeRate, expiredAt, merchantOrderCode, pspOrderCode, status, receivedTokenAmount, createdTimestamp, updatedTimestamp, transactions, settlementStatus, amountTolerance, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    payableAmount: ").append(toIndentedString(payableAmount)).append("\n");
    sb.append("    receiveAddress: ").append(toIndentedString(receiveAddress)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    merchantOrderCode: ").append(toIndentedString(merchantOrderCode)).append("\n");
    sb.append("    pspOrderCode: ").append(toIndentedString(pspOrderCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    receivedTokenAmount: ").append(toIndentedString(receivedTokenAmount)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    settlementStatus: ").append(toIndentedString(settlementStatus)).append("\n");
    sb.append("    amountTolerance: ").append(toIndentedString(amountTolerance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("order_id");
    openapiFields.add("merchant_id");
    openapiFields.add("token_id");
    openapiFields.add("chain_id");
    openapiFields.add("payable_amount");
    openapiFields.add("receive_address");
    openapiFields.add("currency");
    openapiFields.add("order_amount");
    openapiFields.add("fee_amount");
    openapiFields.add("exchange_rate");
    openapiFields.add("expired_at");
    openapiFields.add("merchant_order_code");
    openapiFields.add("psp_order_code");
    openapiFields.add("status");
    openapiFields.add("received_token_amount");
    openapiFields.add("created_timestamp");
    openapiFields.add("updated_timestamp");
    openapiFields.add("transactions");
    openapiFields.add("settlement_status");
    openapiFields.add("amount_tolerance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("order_id");
    openapiRequiredFields.add("token_id");
    openapiRequiredFields.add("chain_id");
    openapiRequiredFields.add("payable_amount");
    openapiRequiredFields.add("receive_address");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("order_amount");
    openapiRequiredFields.add("fee_amount");
    openapiRequiredFields.add("exchange_rate");
    openapiRequiredFields.add("psp_order_code");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("received_token_amount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Order
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Order.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
      if (!jsonObj.get("chain_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain_id").toString()));
      }
      if (!jsonObj.get("payable_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payable_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payable_amount").toString()));
      }
      if (!jsonObj.get("receive_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receive_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receive_address").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("order_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_amount").toString()));
      }
      if (!jsonObj.get("fee_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fee_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fee_amount").toString()));
      }
      if (!jsonObj.get("exchange_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange_rate").toString()));
      }
      if ((jsonObj.get("merchant_order_code") != null && !jsonObj.get("merchant_order_code").isJsonNull()) && !jsonObj.get("merchant_order_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_order_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_order_code").toString()));
      }
      if (!jsonObj.get("psp_order_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `psp_order_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("psp_order_code").toString()));
      }
      // validate the required field `status`
      OrderStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("received_token_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `received_token_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("received_token_amount").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            PaymentTransaction.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
      // validate the optional field `settlement_status`
      if (jsonObj.get("settlement_status") != null && !jsonObj.get("settlement_status").isJsonNull()) {
        SettleStatus.validateJsonElement(jsonObj.get("settlement_status"));
      }
      if ((jsonObj.get("amount_tolerance") != null && !jsonObj.get("amount_tolerance").isJsonNull()) && !jsonObj.get("amount_tolerance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount_tolerance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount_tolerance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Order instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Order given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Order
  * @throws IOException if the JSON string is invalid with respect to Order
  */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

 /**
  * Convert an instance of Order to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

