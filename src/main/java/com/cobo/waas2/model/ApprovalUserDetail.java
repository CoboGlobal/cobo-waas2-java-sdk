/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.ApprovalResult;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * Details about a user involved in a transaction approval workflow. 
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class ApprovalUserDetail {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PUBKEY = "pubkey";
  @SerializedName(SERIALIZED_NAME_PUBKEY)
  private String pubkey;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_STATEMENT_UUID = "statement_uuid";
  @SerializedName(SERIALIZED_NAME_STATEMENT_UUID)
  private UUID statementUuid;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ApprovalResult result;

  public static final String SERIALIZED_NAME_APPROVAL_RESULT_CODE = "approval_result_code";
  @SerializedName(SERIALIZED_NAME_APPROVAL_RESULT_CODE)
  private Integer approvalResultCode;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private Integer createdTime;

  public static final String SERIALIZED_NAME_TEMPLATE_VERSION = "template_version";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VERSION)
  private String templateVersion;

  public static final String SERIALIZED_NAME_HEADER_TITLE = "header_title";
  @SerializedName(SERIALIZED_NAME_HEADER_TITLE)
  private String headerTitle;

  public static final String SERIALIZED_NAME_IS_FOR_SIGN = "is_for_sign";
  @SerializedName(SERIALIZED_NAME_IS_FOR_SIGN)
  private Boolean isForSign;

  public static final String SERIALIZED_NAME_SHOW_INFO = "show_info";
  @SerializedName(SERIALIZED_NAME_SHOW_INFO)
  private String showInfo;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MESSAGE_VERSION = "message_version";
  @SerializedName(SERIALIZED_NAME_MESSAGE_VERSION)
  private String messageVersion;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_EXTRA_MESSAGE = "extra_message";
  @SerializedName(SERIALIZED_NAME_EXTRA_MESSAGE)
  private String extraMessage;

  public ApprovalUserDetail() {
  }

  public ApprovalUserDetail name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the user who approved the transaction.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApprovalUserDetail email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Email of the user.
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ApprovalUserDetail pubkey(String pubkey) {
    this.pubkey = pubkey;
    return this;
  }

   /**
   * Public key of the user.
   * @return pubkey
  **/
  @javax.annotation.Nullable
  public String getPubkey() {
    return pubkey;
  }

  public void setPubkey(String pubkey) {
    this.pubkey = pubkey;
  }


  public ApprovalUserDetail signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Signature produced by the user for this approval.
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public ApprovalUserDetail statementUuid(UUID statementUuid) {
    this.statementUuid = statementUuid;
    return this;
  }

   /**
   * UUID of the statement associated with this approval.
   * @return statementUuid
  **/
  @javax.annotation.Nullable
  public UUID getStatementUuid() {
    return statementUuid;
  }

  public void setStatementUuid(UUID statementUuid) {
    this.statementUuid = statementUuid;
  }


  public ApprovalUserDetail result(ApprovalResult result) {
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  public ApprovalResult getResult() {
    return result;
  }

  public void setResult(ApprovalResult result) {
    this.result = result;
  }


  public ApprovalUserDetail approvalResultCode(Integer approvalResultCode) {
    this.approvalResultCode = approvalResultCode;
    return this;
  }

   /**
   * Integer value representing the result of the approval.
   * @return approvalResultCode
  **/
  @javax.annotation.Nullable
  public Integer getApprovalResultCode() {
    return approvalResultCode;
  }

  public void setApprovalResultCode(Integer approvalResultCode) {
    this.approvalResultCode = approvalResultCode;
  }


  public ApprovalUserDetail createdTime(Integer createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Timestamp when the approval was created.
   * @return createdTime
  **/
  @javax.annotation.Nullable
  public Integer getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(Integer createdTime) {
    this.createdTime = createdTime;
  }


  public ApprovalUserDetail templateVersion(String templateVersion) {
    this.templateVersion = templateVersion;
    return this;
  }

   /**
   * Version of the template used for the transaction approval.
   * @return templateVersion
  **/
  @javax.annotation.Nullable
  public String getTemplateVersion() {
    return templateVersion;
  }

  public void setTemplateVersion(String templateVersion) {
    this.templateVersion = templateVersion;
  }


  public ApprovalUserDetail headerTitle(String headerTitle) {
    this.headerTitle = headerTitle;
    return this;
  }

   /**
   * Display title used in the transaction approval.
   * @return headerTitle
  **/
  @javax.annotation.Nullable
  public String getHeaderTitle() {
    return headerTitle;
  }

  public void setHeaderTitle(String headerTitle) {
    this.headerTitle = headerTitle;
  }


  public ApprovalUserDetail isForSign(Boolean isForSign) {
    this.isForSign = isForSign;
    return this;
  }

   /**
   * Indicates whether this approval requires signing: - &#x60;true&#x60;: The user must sign the transaction. - &#x60;false&#x60;: The user only needs to approve or reject without signing. 
   * @return isForSign
  **/
  @javax.annotation.Nullable
  public Boolean getIsForSign() {
    return isForSign;
  }

  public void setIsForSign(Boolean isForSign) {
    this.isForSign = isForSign;
  }


  public ApprovalUserDetail showInfo(String showInfo) {
    this.showInfo = showInfo;
    return this;
  }

   /**
   * Additional information to show for the transaction approval.
   * @return showInfo
  **/
  @javax.annotation.Nullable
  public String getShowInfo() {
    return showInfo;
  }

  public void setShowInfo(String showInfo) {
    this.showInfo = showInfo;
  }


  public ApprovalUserDetail language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Language used for the transaction approval.
   * @return language
  **/
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public ApprovalUserDetail messageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
    return this;
  }

   /**
   * Version of the message format used for the transaction approval.
   * @return messageVersion
  **/
  @javax.annotation.Nullable
  public String getMessageVersion() {
    return messageVersion;
  }

  public void setMessageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
  }


  public ApprovalUserDetail message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Message associated with the transaction approval.
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ApprovalUserDetail extraMessage(String extraMessage) {
    this.extraMessage = extraMessage;
    return this;
  }

   /**
   * Any additional message or information related to the transaction approval.
   * @return extraMessage
  **/
  @javax.annotation.Nullable
  public String getExtraMessage() {
    return extraMessage;
  }

  public void setExtraMessage(String extraMessage) {
    this.extraMessage = extraMessage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApprovalUserDetail instance itself
   */
  public ApprovalUserDetail putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalUserDetail approvalUserDetail = (ApprovalUserDetail) o;
    return Objects.equals(this.name, approvalUserDetail.name) &&
        Objects.equals(this.email, approvalUserDetail.email) &&
        Objects.equals(this.pubkey, approvalUserDetail.pubkey) &&
        Objects.equals(this.signature, approvalUserDetail.signature) &&
        Objects.equals(this.statementUuid, approvalUserDetail.statementUuid) &&
        Objects.equals(this.result, approvalUserDetail.result) &&
        Objects.equals(this.approvalResultCode, approvalUserDetail.approvalResultCode) &&
        Objects.equals(this.createdTime, approvalUserDetail.createdTime) &&
        Objects.equals(this.templateVersion, approvalUserDetail.templateVersion) &&
        Objects.equals(this.headerTitle, approvalUserDetail.headerTitle) &&
        Objects.equals(this.isForSign, approvalUserDetail.isForSign) &&
        Objects.equals(this.showInfo, approvalUserDetail.showInfo) &&
        Objects.equals(this.language, approvalUserDetail.language) &&
        Objects.equals(this.messageVersion, approvalUserDetail.messageVersion) &&
        Objects.equals(this.message, approvalUserDetail.message) &&
        Objects.equals(this.extraMessage, approvalUserDetail.extraMessage)&&
        Objects.equals(this.additionalProperties, approvalUserDetail.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, email, pubkey, signature, statementUuid, result, approvalResultCode, createdTime, templateVersion, headerTitle, isForSign, showInfo, language, messageVersion, message, extraMessage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalUserDetail {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    pubkey: ").append(toIndentedString(pubkey)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    statementUuid: ").append(toIndentedString(statementUuid)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    approvalResultCode: ").append(toIndentedString(approvalResultCode)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    templateVersion: ").append(toIndentedString(templateVersion)).append("\n");
    sb.append("    headerTitle: ").append(toIndentedString(headerTitle)).append("\n");
    sb.append("    isForSign: ").append(toIndentedString(isForSign)).append("\n");
    sb.append("    showInfo: ").append(toIndentedString(showInfo)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    messageVersion: ").append(toIndentedString(messageVersion)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    extraMessage: ").append(toIndentedString(extraMessage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("pubkey");
    openapiFields.add("signature");
    openapiFields.add("statement_uuid");
    openapiFields.add("result");
    openapiFields.add("approval_result_code");
    openapiFields.add("created_time");
    openapiFields.add("template_version");
    openapiFields.add("header_title");
    openapiFields.add("is_for_sign");
    openapiFields.add("show_info");
    openapiFields.add("language");
    openapiFields.add("message_version");
    openapiFields.add("message");
    openapiFields.add("extra_message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApprovalUserDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApprovalUserDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalUserDetail is not found in the empty JSON string", ApprovalUserDetail.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("pubkey") != null && !jsonObj.get("pubkey").isJsonNull()) && !jsonObj.get("pubkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pubkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pubkey").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("statement_uuid") != null && !jsonObj.get("statement_uuid").isJsonNull()) && !jsonObj.get("statement_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_uuid").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ApprovalResult.validateJsonElement(jsonObj.get("result"));
      }
      if ((jsonObj.get("template_version") != null && !jsonObj.get("template_version").isJsonNull()) && !jsonObj.get("template_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_version").toString()));
      }
      if ((jsonObj.get("header_title") != null && !jsonObj.get("header_title").isJsonNull()) && !jsonObj.get("header_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_title").toString()));
      }
      if ((jsonObj.get("show_info") != null && !jsonObj.get("show_info").isJsonNull()) && !jsonObj.get("show_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `show_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("show_info").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("message_version") != null && !jsonObj.get("message_version").isJsonNull()) && !jsonObj.get("message_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_version").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("extra_message") != null && !jsonObj.get("extra_message").isJsonNull()) && !jsonObj.get("extra_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra_message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalUserDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalUserDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalUserDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalUserDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalUserDetail>() {
           @Override
           public void write(JsonWriter out, ApprovalUserDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalUserDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ApprovalUserDetail instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApprovalUserDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApprovalUserDetail
  * @throws IOException if the JSON string is invalid with respect to ApprovalUserDetail
  */
  public static ApprovalUserDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalUserDetail.class);
  }

 /**
  * Convert an instance of ApprovalUserDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

