/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.EstimatedEvmEip1559Fee;
import com.cobo.waas2.model.EstimatedEvmLegacyFee;
import com.cobo.waas2.model.EstimatedFILFee;
import com.cobo.waas2.model.EstimatedFILFeeSlow;
import com.cobo.waas2.model.EstimatedFixedFee;
import com.cobo.waas2.model.EstimatedSOLFee;
import com.cobo.waas2.model.EstimatedUtxoFee;
import com.cobo.waas2.model.FeeType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.cobo.waas2.JSON;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class EstimatedFee extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(EstimatedFee.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EstimatedFee.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EstimatedFee' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EstimatedFixedFee> adapterEstimatedFixedFee = gson.getDelegateAdapter(this, TypeToken.get(EstimatedFixedFee.class));
            final TypeAdapter<EstimatedEvmEip1559Fee> adapterEstimatedEvmEip1559Fee = gson.getDelegateAdapter(this, TypeToken.get(EstimatedEvmEip1559Fee.class));
            final TypeAdapter<EstimatedEvmLegacyFee> adapterEstimatedEvmLegacyFee = gson.getDelegateAdapter(this, TypeToken.get(EstimatedEvmLegacyFee.class));
            final TypeAdapter<EstimatedUtxoFee> adapterEstimatedUtxoFee = gson.getDelegateAdapter(this, TypeToken.get(EstimatedUtxoFee.class));
            final TypeAdapter<EstimatedSOLFee> adapterEstimatedSOLFee = gson.getDelegateAdapter(this, TypeToken.get(EstimatedSOLFee.class));
            final TypeAdapter<EstimatedFILFee> adapterEstimatedFILFee = gson.getDelegateAdapter(this, TypeToken.get(EstimatedFILFee.class));

            return (TypeAdapter<T>) new TypeAdapter<EstimatedFee>() {
                @Override
                public void write(JsonWriter out, EstimatedFee value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `EstimatedFixedFee`
                    if (value.getActualInstance() instanceof EstimatedFixedFee) {
                        JsonElement element = adapterEstimatedFixedFee.toJsonTree((EstimatedFixedFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EstimatedEvmEip1559Fee`
                    if (value.getActualInstance() instanceof EstimatedEvmEip1559Fee) {
                        JsonElement element = adapterEstimatedEvmEip1559Fee.toJsonTree((EstimatedEvmEip1559Fee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EstimatedEvmLegacyFee`
                    if (value.getActualInstance() instanceof EstimatedEvmLegacyFee) {
                        JsonElement element = adapterEstimatedEvmLegacyFee.toJsonTree((EstimatedEvmLegacyFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EstimatedUtxoFee`
                    if (value.getActualInstance() instanceof EstimatedUtxoFee) {
                        JsonElement element = adapterEstimatedUtxoFee.toJsonTree((EstimatedUtxoFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EstimatedSOLFee`
                    if (value.getActualInstance() instanceof EstimatedSOLFee) {
                        JsonElement element = adapterEstimatedSOLFee.toJsonTree((EstimatedSOLFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EstimatedFILFee`
                    if (value.getActualInstance() instanceof EstimatedFILFee) {
                        JsonElement element = adapterEstimatedFILFee.toJsonTree((EstimatedFILFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: EstimatedEvmEip1559Fee, EstimatedEvmLegacyFee, EstimatedFILFee, EstimatedFixedFee, EstimatedSOLFee, EstimatedUtxoFee");
                }

                @Override
                public EstimatedFee read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    EstimatedFee newEstimatedFee = new EstimatedFee();
                    if (jsonObject.get("fee_type") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for EstimatedFee as `fee_type` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `fee_type`
                        switch (jsonObject.get("fee_type").getAsString()) {
                            case "EVM_EIP_1559":
                                deserialized = adapterEstimatedEvmEip1559Fee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "EVM_Legacy":
                                deserialized = adapterEstimatedEvmLegacyFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "FIL":
                                deserialized = adapterEstimatedFILFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "Fixed":
                                deserialized = adapterEstimatedFixedFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "SOL":
                                deserialized = adapterEstimatedSOLFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "UTXO":
                                deserialized = adapterEstimatedUtxoFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "EstimatedEvmEip1559Fee":
                                deserialized = adapterEstimatedEvmEip1559Fee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "EstimatedEvmLegacyFee":
                                deserialized = adapterEstimatedEvmLegacyFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "EstimatedFILFee":
                                deserialized = adapterEstimatedFILFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "EstimatedFixedFee":
                                deserialized = adapterEstimatedFixedFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "EstimatedSOLFee":
                                deserialized = adapterEstimatedSOLFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            case "EstimatedUtxoFee":
                                deserialized = adapterEstimatedUtxoFee.fromJsonTree(jsonObject);
                                newEstimatedFee.setActualInstance(deserialized);
                                return newEstimatedFee;
                            default:
                                log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for EstimatedFee. Possible values: EVM_EIP_1559 EVM_Legacy FIL Fixed SOL UTXO EstimatedEvmEip1559Fee EstimatedEvmLegacyFee EstimatedFILFee EstimatedFixedFee EstimatedSOLFee EstimatedUtxoFee", jsonObject.get("fee_type").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize EstimatedFixedFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EstimatedFixedFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterEstimatedFixedFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EstimatedFixedFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EstimatedFixedFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EstimatedFixedFee'", e);
                    }
                    // deserialize EstimatedEvmEip1559Fee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EstimatedEvmEip1559Fee.validateJsonElement(jsonElement);
                        actualAdapter = adapterEstimatedEvmEip1559Fee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EstimatedEvmEip1559Fee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EstimatedEvmEip1559Fee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EstimatedEvmEip1559Fee'", e);
                    }
                    // deserialize EstimatedEvmLegacyFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EstimatedEvmLegacyFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterEstimatedEvmLegacyFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EstimatedEvmLegacyFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EstimatedEvmLegacyFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EstimatedEvmLegacyFee'", e);
                    }
                    // deserialize EstimatedUtxoFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EstimatedUtxoFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterEstimatedUtxoFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EstimatedUtxoFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EstimatedUtxoFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EstimatedUtxoFee'", e);
                    }
                    // deserialize EstimatedSOLFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EstimatedSOLFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterEstimatedSOLFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EstimatedSOLFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EstimatedSOLFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EstimatedSOLFee'", e);
                    }
                    // deserialize EstimatedFILFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EstimatedFILFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterEstimatedFILFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EstimatedFILFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EstimatedFILFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EstimatedFILFee'", e);
                    }

                    if (match == 1) {
                        EstimatedFee ret = new EstimatedFee();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for EstimatedFee: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public EstimatedFee() {
        super("oneOf", Boolean.FALSE);
    }

    public EstimatedFee(EstimatedEvmEip1559Fee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EstimatedFee(EstimatedEvmLegacyFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EstimatedFee(EstimatedFILFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EstimatedFee(EstimatedFixedFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EstimatedFee(EstimatedSOLFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EstimatedFee(EstimatedUtxoFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EstimatedFixedFee", EstimatedFixedFee.class);
        schemas.put("EstimatedEvmEip1559Fee", EstimatedEvmEip1559Fee.class);
        schemas.put("EstimatedEvmLegacyFee", EstimatedEvmLegacyFee.class);
        schemas.put("EstimatedUtxoFee", EstimatedUtxoFee.class);
        schemas.put("EstimatedSOLFee", EstimatedSOLFee.class);
        schemas.put("EstimatedFILFee", EstimatedFILFee.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return EstimatedFee.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * EstimatedEvmEip1559Fee, EstimatedEvmLegacyFee, EstimatedFILFee, EstimatedFixedFee, EstimatedSOLFee, EstimatedUtxoFee
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EstimatedFixedFee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EstimatedEvmEip1559Fee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EstimatedEvmLegacyFee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EstimatedUtxoFee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EstimatedSOLFee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EstimatedFILFee) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be EstimatedEvmEip1559Fee, EstimatedEvmLegacyFee, EstimatedFILFee, EstimatedFixedFee, EstimatedSOLFee, EstimatedUtxoFee");
    }

    /**
     * Get the actual instance, which can be the following:
     * EstimatedEvmEip1559Fee, EstimatedEvmLegacyFee, EstimatedFILFee, EstimatedFixedFee, EstimatedSOLFee, EstimatedUtxoFee
     *
     * @return The actual instance (EstimatedEvmEip1559Fee, EstimatedEvmLegacyFee, EstimatedFILFee, EstimatedFixedFee, EstimatedSOLFee, EstimatedUtxoFee)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EstimatedFixedFee`. If the actual instance is not `EstimatedFixedFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EstimatedFixedFee`
     * @throws ClassCastException if the instance is not `EstimatedFixedFee`
     */
    public EstimatedFixedFee getEstimatedFixedFee() throws ClassCastException {
        return (EstimatedFixedFee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EstimatedEvmEip1559Fee`. If the actual instance is not `EstimatedEvmEip1559Fee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EstimatedEvmEip1559Fee`
     * @throws ClassCastException if the instance is not `EstimatedEvmEip1559Fee`
     */
    public EstimatedEvmEip1559Fee getEstimatedEvmEip1559Fee() throws ClassCastException {
        return (EstimatedEvmEip1559Fee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EstimatedEvmLegacyFee`. If the actual instance is not `EstimatedEvmLegacyFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EstimatedEvmLegacyFee`
     * @throws ClassCastException if the instance is not `EstimatedEvmLegacyFee`
     */
    public EstimatedEvmLegacyFee getEstimatedEvmLegacyFee() throws ClassCastException {
        return (EstimatedEvmLegacyFee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EstimatedUtxoFee`. If the actual instance is not `EstimatedUtxoFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EstimatedUtxoFee`
     * @throws ClassCastException if the instance is not `EstimatedUtxoFee`
     */
    public EstimatedUtxoFee getEstimatedUtxoFee() throws ClassCastException {
        return (EstimatedUtxoFee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EstimatedSOLFee`. If the actual instance is not `EstimatedSOLFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EstimatedSOLFee`
     * @throws ClassCastException if the instance is not `EstimatedSOLFee`
     */
    public EstimatedSOLFee getEstimatedSOLFee() throws ClassCastException {
        return (EstimatedSOLFee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EstimatedFILFee`. If the actual instance is not `EstimatedFILFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EstimatedFILFee`
     * @throws ClassCastException if the instance is not `EstimatedFILFee`
     */
    public EstimatedFILFee getEstimatedFILFee() throws ClassCastException {
        return (EstimatedFILFee)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EstimatedFee
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with EstimatedFixedFee
        try {
            EstimatedFixedFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EstimatedFixedFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EstimatedEvmEip1559Fee
        try {
            EstimatedEvmEip1559Fee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EstimatedEvmEip1559Fee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EstimatedEvmLegacyFee
        try {
            EstimatedEvmLegacyFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EstimatedEvmLegacyFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EstimatedUtxoFee
        try {
            EstimatedUtxoFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EstimatedUtxoFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EstimatedSOLFee
        try {
            EstimatedSOLFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EstimatedSOLFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EstimatedFILFee
        try {
            EstimatedFILFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EstimatedFILFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            // throw new IOException(String.format("The JSON string is invalid for EstimatedFee with oneOf schemas: EstimatedEvmEip1559Fee, EstimatedEvmLegacyFee, EstimatedFILFee, EstimatedFixedFee, EstimatedSOLFee, EstimatedUtxoFee. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of EstimatedFee given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EstimatedFee
     * @throws IOException if the JSON string is invalid with respect to EstimatedFee
     */
    public static EstimatedFee fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EstimatedFee.class);
    }

    /**
     * Convert an instance of EstimatedFee to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

