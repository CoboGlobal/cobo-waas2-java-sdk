/*
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The transaction initiator type. Possible values include:   - &#x60;API&#x60;: An API initiator, who initiates the transaction by using the WaaS API.   - &#x60;Web&#x60;: An web initiator, who initiates the transaction from Cobo Portal.   - &#x60;App&#x60;: An App initiator, who initiates the transaction from Cobo Portal Apps.   - &#x60;External&#x60;: An external initiator, who initiates the transaction outside Cobo. 
 */
@JsonAdapter(TransactionInitiatorType.Adapter.class)
public enum TransactionInitiatorType {
  UNKNOWN(null),
  
  API("API"),
  
  WEB("Web"),
  
  APP("App"),
  
  EXTERNAL("External");

  private String value;

  TransactionInitiatorType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransactionInitiatorType fromValue(String value) {
    for (TransactionInitiatorType b : TransactionInitiatorType.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TransactionInitiatorType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransactionInitiatorType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TransactionInitiatorType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TransactionInitiatorType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TransactionInitiatorType.fromValue(value);
  }
}

