/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.TokenizationTokenOperationSource;
import com.cobo.waas2.model.TokenizationUpdateAddressAction;
import com.cobo.waas2.model.TokenizationUpdateBlocklistAddressesParamsAddressesInner;
import com.cobo.waas2.model.TransactionRequestFee;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * TokenizationUpdateBlocklistAddressesRequest
 */
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TokenizationUpdateBlocklistAddressesRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private TokenizationUpdateAddressAction action;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private TokenizationTokenOperationSource source;

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<TokenizationUpdateBlocklistAddressesParamsAddressesInner> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_INITIATOR = "app_initiator";
  @SerializedName(SERIALIZED_NAME_APP_INITIATOR)
  private String appInitiator;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private TransactionRequestFee fee;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public TokenizationUpdateBlocklistAddressesRequest() {
  }

  public TokenizationUpdateBlocklistAddressesRequest action(TokenizationUpdateAddressAction action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @jakarta.annotation.Nonnull
  public TokenizationUpdateAddressAction getAction() {
    return action;
  }

  public void setAction(TokenizationUpdateAddressAction action) {
    this.action = action;
  }


  public TokenizationUpdateBlocklistAddressesRequest source(TokenizationTokenOperationSource source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @jakarta.annotation.Nonnull
  public TokenizationTokenOperationSource getSource() {
    return source;
  }

  public void setSource(TokenizationTokenOperationSource source) {
    this.source = source;
  }


  public TokenizationUpdateBlocklistAddressesRequest addresses(List<TokenizationUpdateBlocklistAddressesParamsAddressesInner> addresses) {
    this.addresses = addresses;
    return this;
  }

  public TokenizationUpdateBlocklistAddressesRequest addAddressesItem(TokenizationUpdateBlocklistAddressesParamsAddressesInner addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * A list of addresses to manage. For &#39;add&#39; operations, notes can be provided. For &#39;remove&#39; operations, notes are ignored.
   * @return addresses
  **/
  @jakarta.annotation.Nonnull
  public List<TokenizationUpdateBlocklistAddressesParamsAddressesInner> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<TokenizationUpdateBlocklistAddressesParamsAddressesInner> addresses) {
    this.addresses = addresses;
  }


  public TokenizationUpdateBlocklistAddressesRequest appInitiator(String appInitiator) {
    this.appInitiator = appInitiator;
    return this;
  }

   /**
   * The initiator of the tokenization activity. If you do not specify this property, the WaaS service will automatically designate the API key as the initiator.
   * @return appInitiator
  **/
  @jakarta.annotation.Nullable
  public String getAppInitiator() {
    return appInitiator;
  }

  public void setAppInitiator(String appInitiator) {
    this.appInitiator = appInitiator;
  }


  public TokenizationUpdateBlocklistAddressesRequest fee(TransactionRequestFee fee) {
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @jakarta.annotation.Nonnull
  public TransactionRequestFee getFee() {
    return fee;
  }

  public void setFee(TransactionRequestFee fee) {
    this.fee = fee;
  }


  public TokenizationUpdateBlocklistAddressesRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TokenizationUpdateBlocklistAddressesRequest instance itself
   */
  public TokenizationUpdateBlocklistAddressesRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizationUpdateBlocklistAddressesRequest tokenizationUpdateBlocklistAddressesRequest = (TokenizationUpdateBlocklistAddressesRequest) o;
    return Objects.equals(this.action, tokenizationUpdateBlocklistAddressesRequest.action) &&
        Objects.equals(this.source, tokenizationUpdateBlocklistAddressesRequest.source) &&
        Objects.equals(this.addresses, tokenizationUpdateBlocklistAddressesRequest.addresses) &&
        Objects.equals(this.appInitiator, tokenizationUpdateBlocklistAddressesRequest.appInitiator) &&
        Objects.equals(this.fee, tokenizationUpdateBlocklistAddressesRequest.fee) &&
        Objects.equals(this.requestId, tokenizationUpdateBlocklistAddressesRequest.requestId)&&
        Objects.equals(this.additionalProperties, tokenizationUpdateBlocklistAddressesRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, source, addresses, appInitiator, fee, requestId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizationUpdateBlocklistAddressesRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    appInitiator: ").append(toIndentedString(appInitiator)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("source");
    openapiFields.add("addresses");
    openapiFields.add("app_initiator");
    openapiFields.add("fee");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("addresses");
    openapiRequiredFields.add("fee");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenizationUpdateBlocklistAddressesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenizationUpdateBlocklistAddressesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenizationUpdateBlocklistAddressesRequest is not found in the empty JSON string", TokenizationUpdateBlocklistAddressesRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TokenizationUpdateBlocklistAddressesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `action`
      TokenizationUpdateAddressAction.validateJsonElement(jsonObj.get("action"));
      // validate the required field `source`
      TokenizationTokenOperationSource.validateJsonElement(jsonObj.get("source"));
      // ensure the json data is an array
      if (!jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }

      JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
      // validate the required field `addresses` (array)
      for (int i = 0; i < jsonArrayaddresses.size(); i++) {
        TokenizationUpdateBlocklistAddressesParamsAddressesInner.validateJsonElement(jsonArrayaddresses.get(i));
      };
      if ((jsonObj.get("app_initiator") != null && !jsonObj.get("app_initiator").isJsonNull()) && !jsonObj.get("app_initiator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_initiator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_initiator").toString()));
      }
      // validate the required field `fee`
      TransactionRequestFee.validateJsonElement(jsonObj.get("fee"));
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenizationUpdateBlocklistAddressesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenizationUpdateBlocklistAddressesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenizationUpdateBlocklistAddressesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenizationUpdateBlocklistAddressesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenizationUpdateBlocklistAddressesRequest>() {
           @Override
           public void write(JsonWriter out, TokenizationUpdateBlocklistAddressesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenizationUpdateBlocklistAddressesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TokenizationUpdateBlocklistAddressesRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenizationUpdateBlocklistAddressesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenizationUpdateBlocklistAddressesRequest
  * @throws IOException if the JSON string is invalid with respect to TokenizationUpdateBlocklistAddressesRequest
  */
  public static TokenizationUpdateBlocklistAddressesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenizationUpdateBlocklistAddressesRequest.class);
  }

 /**
  * Convert an instance of TokenizationUpdateBlocklistAddressesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

