/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * Role-based permission settings for token contract. If not provided, all permissions will be granted to the issuance wallet by default.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TokenizationERC20WrappedTokenPermissionParams {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private List<String> admin = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINTER = "minter";
  @SerializedName(SERIALIZED_NAME_MINTER)
  private List<String> minter = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRAPPER = "wrapper";
  @SerializedName(SERIALIZED_NAME_WRAPPER)
  private List<String> wrapper = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private List<String> manager = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAUSER = "pauser";
  @SerializedName(SERIALIZED_NAME_PAUSER)
  private List<String> pauser = new ArrayList<>();

  public static final String SERIALIZED_NAME_SALVAGER = "salvager";
  @SerializedName(SERIALIZED_NAME_SALVAGER)
  private List<String> salvager = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPGRADER = "upgrader";
  @SerializedName(SERIALIZED_NAME_UPGRADER)
  private List<String> upgrader = new ArrayList<>();

  public TokenizationERC20WrappedTokenPermissionParams() {
  }

  public TokenizationERC20WrappedTokenPermissionParams admin(List<String> admin) {
    this.admin = admin;
    return this;
  }

  public TokenizationERC20WrappedTokenPermissionParams addAdminItem(String adminItem) {
    if (this.admin == null) {
      this.admin = new ArrayList<>();
    }
    this.admin.add(adminItem);
    return this;
  }

   /**
   * List of addresses for the admin role.
   * @return admin
  **/
  @javax.annotation.Nullable
  public List<String> getAdmin() {
    return admin;
  }

  public void setAdmin(List<String> admin) {
    this.admin = admin;
  }


  public TokenizationERC20WrappedTokenPermissionParams minter(List<String> minter) {
    this.minter = minter;
    return this;
  }

  public TokenizationERC20WrappedTokenPermissionParams addMinterItem(String minterItem) {
    if (this.minter == null) {
      this.minter = new ArrayList<>();
    }
    this.minter.add(minterItem);
    return this;
  }

   /**
   * List of addresses for the minter role.
   * @return minter
  **/
  @javax.annotation.Nullable
  public List<String> getMinter() {
    return minter;
  }

  public void setMinter(List<String> minter) {
    this.minter = minter;
  }


  public TokenizationERC20WrappedTokenPermissionParams wrapper(List<String> wrapper) {
    this.wrapper = wrapper;
    return this;
  }

  public TokenizationERC20WrappedTokenPermissionParams addWrapperItem(String wrapperItem) {
    if (this.wrapper == null) {
      this.wrapper = new ArrayList<>();
    }
    this.wrapper.add(wrapperItem);
    return this;
  }

   /**
   * List of addresses for the wrapper role.
   * @return wrapper
  **/
  @javax.annotation.Nullable
  public List<String> getWrapper() {
    return wrapper;
  }

  public void setWrapper(List<String> wrapper) {
    this.wrapper = wrapper;
  }


  public TokenizationERC20WrappedTokenPermissionParams manager(List<String> manager) {
    this.manager = manager;
    return this;
  }

  public TokenizationERC20WrappedTokenPermissionParams addManagerItem(String managerItem) {
    if (this.manager == null) {
      this.manager = new ArrayList<>();
    }
    this.manager.add(managerItem);
    return this;
  }

   /**
   * List of addresses for the manager role.
   * @return manager
  **/
  @javax.annotation.Nullable
  public List<String> getManager() {
    return manager;
  }

  public void setManager(List<String> manager) {
    this.manager = manager;
  }


  public TokenizationERC20WrappedTokenPermissionParams pauser(List<String> pauser) {
    this.pauser = pauser;
    return this;
  }

  public TokenizationERC20WrappedTokenPermissionParams addPauserItem(String pauserItem) {
    if (this.pauser == null) {
      this.pauser = new ArrayList<>();
    }
    this.pauser.add(pauserItem);
    return this;
  }

   /**
   * List of addresses for the pauser role.
   * @return pauser
  **/
  @javax.annotation.Nullable
  public List<String> getPauser() {
    return pauser;
  }

  public void setPauser(List<String> pauser) {
    this.pauser = pauser;
  }


  public TokenizationERC20WrappedTokenPermissionParams salvager(List<String> salvager) {
    this.salvager = salvager;
    return this;
  }

  public TokenizationERC20WrappedTokenPermissionParams addSalvagerItem(String salvagerItem) {
    if (this.salvager == null) {
      this.salvager = new ArrayList<>();
    }
    this.salvager.add(salvagerItem);
    return this;
  }

   /**
   * List of addresses for the salvager role.
   * @return salvager
  **/
  @javax.annotation.Nullable
  public List<String> getSalvager() {
    return salvager;
  }

  public void setSalvager(List<String> salvager) {
    this.salvager = salvager;
  }


  public TokenizationERC20WrappedTokenPermissionParams upgrader(List<String> upgrader) {
    this.upgrader = upgrader;
    return this;
  }

  public TokenizationERC20WrappedTokenPermissionParams addUpgraderItem(String upgraderItem) {
    if (this.upgrader == null) {
      this.upgrader = new ArrayList<>();
    }
    this.upgrader.add(upgraderItem);
    return this;
  }

   /**
   * List of addresses for the upgrader role.
   * @return upgrader
  **/
  @javax.annotation.Nullable
  public List<String> getUpgrader() {
    return upgrader;
  }

  public void setUpgrader(List<String> upgrader) {
    this.upgrader = upgrader;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TokenizationERC20WrappedTokenPermissionParams instance itself
   */
  public TokenizationERC20WrappedTokenPermissionParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizationERC20WrappedTokenPermissionParams tokenizationERC20WrappedTokenPermissionParams = (TokenizationERC20WrappedTokenPermissionParams) o;
    return Objects.equals(this.admin, tokenizationERC20WrappedTokenPermissionParams.admin) &&
        Objects.equals(this.minter, tokenizationERC20WrappedTokenPermissionParams.minter) &&
        Objects.equals(this.wrapper, tokenizationERC20WrappedTokenPermissionParams.wrapper) &&
        Objects.equals(this.manager, tokenizationERC20WrappedTokenPermissionParams.manager) &&
        Objects.equals(this.pauser, tokenizationERC20WrappedTokenPermissionParams.pauser) &&
        Objects.equals(this.salvager, tokenizationERC20WrappedTokenPermissionParams.salvager) &&
        Objects.equals(this.upgrader, tokenizationERC20WrappedTokenPermissionParams.upgrader)&&
        Objects.equals(this.additionalProperties, tokenizationERC20WrappedTokenPermissionParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, minter, wrapper, manager, pauser, salvager, upgrader, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizationERC20WrappedTokenPermissionParams {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    minter: ").append(toIndentedString(minter)).append("\n");
    sb.append("    wrapper: ").append(toIndentedString(wrapper)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    pauser: ").append(toIndentedString(pauser)).append("\n");
    sb.append("    salvager: ").append(toIndentedString(salvager)).append("\n");
    sb.append("    upgrader: ").append(toIndentedString(upgrader)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("minter");
    openapiFields.add("wrapper");
    openapiFields.add("manager");
    openapiFields.add("pauser");
    openapiFields.add("salvager");
    openapiFields.add("upgrader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenizationERC20WrappedTokenPermissionParams
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenizationERC20WrappedTokenPermissionParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenizationERC20WrappedTokenPermissionParams is not found in the empty JSON string", TokenizationERC20WrappedTokenPermissionParams.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("admin") != null && !jsonObj.get("admin").isJsonNull() && !jsonObj.get("admin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin` to be an array in the JSON string but got `%s`", jsonObj.get("admin").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("minter") != null && !jsonObj.get("minter").isJsonNull() && !jsonObj.get("minter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `minter` to be an array in the JSON string but got `%s`", jsonObj.get("minter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wrapper") != null && !jsonObj.get("wrapper").isJsonNull() && !jsonObj.get("wrapper").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapper` to be an array in the JSON string but got `%s`", jsonObj.get("wrapper").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull() && !jsonObj.get("manager").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager` to be an array in the JSON string but got `%s`", jsonObj.get("manager").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pauser") != null && !jsonObj.get("pauser").isJsonNull() && !jsonObj.get("pauser").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pauser` to be an array in the JSON string but got `%s`", jsonObj.get("pauser").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("salvager") != null && !jsonObj.get("salvager").isJsonNull() && !jsonObj.get("salvager").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `salvager` to be an array in the JSON string but got `%s`", jsonObj.get("salvager").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("upgrader") != null && !jsonObj.get("upgrader").isJsonNull() && !jsonObj.get("upgrader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgrader` to be an array in the JSON string but got `%s`", jsonObj.get("upgrader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenizationERC20WrappedTokenPermissionParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenizationERC20WrappedTokenPermissionParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenizationERC20WrappedTokenPermissionParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenizationERC20WrappedTokenPermissionParams.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenizationERC20WrappedTokenPermissionParams>() {
           @Override
           public void write(JsonWriter out, TokenizationERC20WrappedTokenPermissionParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenizationERC20WrappedTokenPermissionParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TokenizationERC20WrappedTokenPermissionParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenizationERC20WrappedTokenPermissionParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenizationERC20WrappedTokenPermissionParams
  * @throws IOException if the JSON string is invalid with respect to TokenizationERC20WrappedTokenPermissionParams
  */
  public static TokenizationERC20WrappedTokenPermissionParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenizationERC20WrappedTokenPermissionParams.class);
  }

 /**
  * Convert an instance of TokenizationERC20WrappedTokenPermissionParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

