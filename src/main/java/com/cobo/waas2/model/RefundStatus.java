/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The current status of the refund order. For information about transaction status, see [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status).  - &#x60;Pending&#x60;: The refund order has been created but the transaction has not been initiated. - &#x60;Processing&#x60;: The refund order is currently being processed, with at least one refund transaction in progress. - &#x60;Completed&#x60;: All refund transactions have been completed successfully. - &#x60;PartiallyCompleted&#x60;: Some refund transactions have been completed successfully, while others have failed. - &#x60;Failed&#x60;: All refund transactions have failed. - &#x60;PendingConfirmation&#x60;: The refund order has been created but the address to send (&#x60;to_address&#x60;) has not been specified. Once you use the [Update refund order](https://www.cobo.com/developers/v2/api-references/payment/update-refund-order) operation to specify the address, the status will be updated to &#x60;Pending&#x60;. 
 */
@JsonAdapter(RefundStatus.Adapter.class)
public enum RefundStatus {
  UNKNOWN(null),
  
  PENDING("Pending"),
  
  PROCESSING("Processing"),
  
  COMPLETED("Completed"),
  
  PARTIALLYCOMPLETED("PartiallyCompleted"),
  
  FAILED("Failed"),
  
  PENDINGCONFIRMATION("PendingConfirmation");

  private String value;

  RefundStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RefundStatus fromValue(String value) {
    for (RefundStatus b : RefundStatus.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RefundStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final RefundStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RefundStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return RefundStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    RefundStatus.fromValue(value);
  }
}

