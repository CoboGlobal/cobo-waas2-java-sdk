/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.CommissionFee;
import com.cobo.waas2.model.PaymentTransaction;
import com.cobo.waas2.model.RefundStatus;
import com.cobo.waas2.model.RefundType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * PaymentRefundEventData
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class PaymentRefundEventData {
  /**
   *  The data type of the event. - &#x60;Transaction&#x60;: The transaction event data. - &#x60;TSSRequest&#x60;: The TSS request event data. - &#x60;Addresses&#x60;: The addresses event data. - &#x60;WalletInfo&#x60;: The wallet information event data. - &#x60;MPCVault&#x60;: The MPC vault event data. - &#x60;Chains&#x60;: The enabled chain event data. - &#x60;Tokens&#x60;: The enabled token event data. - &#x60;TokenListing&#x60;: The token listing event data.        - &#x60;PaymentOrder&#x60;: The payment order event data. - &#x60;PaymentRefund&#x60;: The payment refund event data. - &#x60;PaymentSettlement&#x60;: The payment settlement event data. - &#x60;PaymentTransaction&#x60;: The payment transaction event data. - &#x60;PaymentAddressUpdate&#x60;: The top-up address update event data. - &#x60;BalanceUpdateInfo&#x60;: The balance update event data. - &#x60;SuspendedToken&#x60;: The token suspension event data. - &#x60;ComplianceDisposition&#x60;: The compliance disposition event data. - &#x60;ComplianceKytScreenings&#x60;: The compliance KYT screenings event data.
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    TRANSACTION("Transaction"),
    
    TSSREQUEST("TSSRequest"),
    
    ADDRESSES("Addresses"),
    
    WALLETINFO("WalletInfo"),
    
    MPCVAULT("MPCVault"),
    
    CHAINS("Chains"),
    
    TOKENS("Tokens"),
    
    TOKENLISTING("TokenListing"),
    
    PAYMENTORDER("PaymentOrder"),
    
    PAYMENTREFUND("PaymentRefund"),
    
    PAYMENTSETTLEMENT("PaymentSettlement"),
    
    PAYMENTTRANSACTION("PaymentTransaction"),
    
    PAYMENTADDRESSUPDATE("PaymentAddressUpdate"),
    
    BALANCEUPDATEINFO("BalanceUpdateInfo"),
    
    SUSPENDEDTOKEN("SuspendedToken"),
    
    COMPLIANCEDISPOSITION("ComplianceDisposition"),
    
    COMPLIANCEKYTSCREENINGS("ComplianceKytScreenings");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REFUND_ID = "refund_id";
  @SerializedName(SERIALIZED_NAME_REFUND_ID)
  private String refundId;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chain_id";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_TO_ADDRESS = "to_address";
  @SerializedName(SERIALIZED_NAME_TO_ADDRESS)
  private String toAddress;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RefundStatus status;

  public static final String SERIALIZED_NAME_REFUND_TYPE = "refund_type";
  @SerializedName(SERIALIZED_NAME_REFUND_TYPE)
  private RefundType refundType;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Integer createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updated_timestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private Integer updatedTimestamp;

  public static final String SERIALIZED_NAME_INITIATOR = "initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private String initiator;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<PaymentTransaction> transactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHARGE_MERCHANT_FEE = "charge_merchant_fee";
  @SerializedName(SERIALIZED_NAME_CHARGE_MERCHANT_FEE)
  private Boolean chargeMerchantFee;

  public static final String SERIALIZED_NAME_MERCHANT_FEE_AMOUNT = "merchant_fee_amount";
  @SerializedName(SERIALIZED_NAME_MERCHANT_FEE_AMOUNT)
  private String merchantFeeAmount;

  public static final String SERIALIZED_NAME_MERCHANT_FEE_TOKEN_ID = "merchant_fee_token_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_FEE_TOKEN_ID)
  private String merchantFeeTokenId;

  public static final String SERIALIZED_NAME_COMMISSION_FEE = "commission_fee";
  @SerializedName(SERIALIZED_NAME_COMMISSION_FEE)
  private CommissionFee commissionFee;

  public PaymentRefundEventData() {
  }

  public PaymentRefundEventData dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   *  The data type of the event. - &#x60;Transaction&#x60;: The transaction event data. - &#x60;TSSRequest&#x60;: The TSS request event data. - &#x60;Addresses&#x60;: The addresses event data. - &#x60;WalletInfo&#x60;: The wallet information event data. - &#x60;MPCVault&#x60;: The MPC vault event data. - &#x60;Chains&#x60;: The enabled chain event data. - &#x60;Tokens&#x60;: The enabled token event data. - &#x60;TokenListing&#x60;: The token listing event data.        - &#x60;PaymentOrder&#x60;: The payment order event data. - &#x60;PaymentRefund&#x60;: The payment refund event data. - &#x60;PaymentSettlement&#x60;: The payment settlement event data. - &#x60;PaymentTransaction&#x60;: The payment transaction event data. - &#x60;PaymentAddressUpdate&#x60;: The top-up address update event data. - &#x60;BalanceUpdateInfo&#x60;: The balance update event data. - &#x60;SuspendedToken&#x60;: The token suspension event data. - &#x60;ComplianceDisposition&#x60;: The compliance disposition event data. - &#x60;ComplianceKytScreenings&#x60;: The compliance KYT screenings event data.
   * @return dataType
  **/
  @javax.annotation.Nonnull
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public PaymentRefundEventData requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * The request ID provided by you when creating the refund request.
   * @return requestId
  **/
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public PaymentRefundEventData refundId(String refundId) {
    this.refundId = refundId;
    return this;
  }

   /**
   * The refund order ID.
   * @return refundId
  **/
  @javax.annotation.Nonnull
  public String getRefundId() {
    return refundId;
  }

  public void setRefundId(String refundId) {
    this.refundId = refundId;
  }


  public PaymentRefundEventData orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * The ID of the pay-in order corresponding to this refund.
   * @return orderId
  **/
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PaymentRefundEventData merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant ID.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public PaymentRefundEventData tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

   /**
   * The ID of the cryptocurrency used for refund.
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }


  public PaymentRefundEventData chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

   /**
   * The ID of the blockchain network on which the refund transaction occurs.
   * @return chainId
  **/
  @javax.annotation.Nonnull
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public PaymentRefundEventData amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount in cryptocurrency to be returned for this refund order.
   * @return amount
  **/
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public PaymentRefundEventData toAddress(String toAddress) {
    this.toAddress = toAddress;
    return this;
  }

   /**
   * The recipient&#39;s wallet address where the refund will be sent.
   * @return toAddress
  **/
  @javax.annotation.Nonnull
  public String getToAddress() {
    return toAddress;
  }

  public void setToAddress(String toAddress) {
    this.toAddress = toAddress;
  }


  public PaymentRefundEventData status(RefundStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public RefundStatus getStatus() {
    return status;
  }

  public void setStatus(RefundStatus status) {
    this.status = status;
  }


  public PaymentRefundEventData refundType(RefundType refundType) {
    this.refundType = refundType;
    return this;
  }

   /**
   * Get refundType
   * @return refundType
  **/
  @javax.annotation.Nullable
  public RefundType getRefundType() {
    return refundType;
  }

  public void setRefundType(RefundType refundType) {
    this.refundType = refundType;
  }


  public PaymentRefundEventData createdTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The creation time of the refund order, represented as a UNIX timestamp in seconds.
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable
  public Integer getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Integer createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public PaymentRefundEventData updatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

   /**
   * The last update time of the refund order, represented as a UNIX timestamp in seconds.
   * @return updatedTimestamp
  **/
  @javax.annotation.Nullable
  public Integer getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(Integer updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public PaymentRefundEventData initiator(String initiator) {
    this.initiator = initiator;
    return this;
  }

   /**
   *  The initiator of this settlement request. Can return either an API key or the Payments App&#39;s ID.  - Format &#x60;api_key_&lt;API_KEY&gt;&#x60;: Indicates the settlement request was initiated via the Payments API using the API key. - Format &#x60;app_&lt;APP_ID&gt;&#x60;: Indicates the settlement request was initiated through the Payments App using the App ID. 
   * @return initiator
  **/
  @javax.annotation.Nullable
  public String getInitiator() {
    return initiator;
  }

  public void setInitiator(String initiator) {
    this.initiator = initiator;
  }


  public PaymentRefundEventData transactions(List<PaymentTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public PaymentRefundEventData addTransactionsItem(PaymentTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
   * @return transactions
  **/
  @javax.annotation.Nullable
  public List<PaymentTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<PaymentTransaction> transactions) {
    this.transactions = transactions;
  }


  public PaymentRefundEventData chargeMerchantFee(Boolean chargeMerchantFee) {
    this.chargeMerchantFee = chargeMerchantFee;
    return this;
  }

   /**
   * Whether to charge developer fee to the merchant for the refund.    - &#x60;true&#x60;: The fee amount (specified in &#x60;merchant_fee_amount&#x60;) will be deducted from the merchant&#39;s balance and added to the developer&#39;s balance    - &#x60;false&#x60;: The merchant is not charged any developer fee. 
   * @return chargeMerchantFee
  **/
  @javax.annotation.Nullable
  public Boolean getChargeMerchantFee() {
    return chargeMerchantFee;
  }

  public void setChargeMerchantFee(Boolean chargeMerchantFee) {
    this.chargeMerchantFee = chargeMerchantFee;
  }


  public PaymentRefundEventData merchantFeeAmount(String merchantFeeAmount) {
    this.merchantFeeAmount = merchantFeeAmount;
    return this;
  }

   /**
   * The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by &#x60;merchant_fee_token_id&#x60;. This is only applicable if &#x60;charge_merchant_fee&#x60; is set to &#x60;true&#x60;.
   * @return merchantFeeAmount
  **/
  @javax.annotation.Nullable
  public String getMerchantFeeAmount() {
    return merchantFeeAmount;
  }

  public void setMerchantFeeAmount(String merchantFeeAmount) {
    this.merchantFeeAmount = merchantFeeAmount;
  }


  public PaymentRefundEventData merchantFeeTokenId(String merchantFeeTokenId) {
    this.merchantFeeTokenId = merchantFeeTokenId;
    return this;
  }

   /**
   * The ID of the cryptocurrency used for the developer fee. This is only applicable if &#x60;charge_merchant_fee&#x60; is set to true.
   * @return merchantFeeTokenId
  **/
  @javax.annotation.Nullable
  public String getMerchantFeeTokenId() {
    return merchantFeeTokenId;
  }

  public void setMerchantFeeTokenId(String merchantFeeTokenId) {
    this.merchantFeeTokenId = merchantFeeTokenId;
  }


  public PaymentRefundEventData commissionFee(CommissionFee commissionFee) {
    this.commissionFee = commissionFee;
    return this;
  }

   /**
   * Get commissionFee
   * @return commissionFee
  **/
  @javax.annotation.Nullable
  public CommissionFee getCommissionFee() {
    return commissionFee;
  }

  public void setCommissionFee(CommissionFee commissionFee) {
    this.commissionFee = commissionFee;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentRefundEventData instance itself
   */
  public PaymentRefundEventData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRefundEventData paymentRefundEventData = (PaymentRefundEventData) o;
    return Objects.equals(this.dataType, paymentRefundEventData.dataType) &&
        Objects.equals(this.requestId, paymentRefundEventData.requestId) &&
        Objects.equals(this.refundId, paymentRefundEventData.refundId) &&
        Objects.equals(this.orderId, paymentRefundEventData.orderId) &&
        Objects.equals(this.merchantId, paymentRefundEventData.merchantId) &&
        Objects.equals(this.tokenId, paymentRefundEventData.tokenId) &&
        Objects.equals(this.chainId, paymentRefundEventData.chainId) &&
        Objects.equals(this.amount, paymentRefundEventData.amount) &&
        Objects.equals(this.toAddress, paymentRefundEventData.toAddress) &&
        Objects.equals(this.status, paymentRefundEventData.status) &&
        Objects.equals(this.refundType, paymentRefundEventData.refundType) &&
        Objects.equals(this.createdTimestamp, paymentRefundEventData.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, paymentRefundEventData.updatedTimestamp) &&
        Objects.equals(this.initiator, paymentRefundEventData.initiator) &&
        Objects.equals(this.transactions, paymentRefundEventData.transactions) &&
        Objects.equals(this.chargeMerchantFee, paymentRefundEventData.chargeMerchantFee) &&
        Objects.equals(this.merchantFeeAmount, paymentRefundEventData.merchantFeeAmount) &&
        Objects.equals(this.merchantFeeTokenId, paymentRefundEventData.merchantFeeTokenId) &&
        Objects.equals(this.commissionFee, paymentRefundEventData.commissionFee)&&
        Objects.equals(this.additionalProperties, paymentRefundEventData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, requestId, refundId, orderId, merchantId, tokenId, chainId, amount, toAddress, status, refundType, createdTimestamp, updatedTimestamp, initiator, transactions, chargeMerchantFee, merchantFeeAmount, merchantFeeTokenId, commissionFee, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRefundEventData {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    refundId: ").append(toIndentedString(refundId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    toAddress: ").append(toIndentedString(toAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    refundType: ").append(toIndentedString(refundType)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    chargeMerchantFee: ").append(toIndentedString(chargeMerchantFee)).append("\n");
    sb.append("    merchantFeeAmount: ").append(toIndentedString(merchantFeeAmount)).append("\n");
    sb.append("    merchantFeeTokenId: ").append(toIndentedString(merchantFeeTokenId)).append("\n");
    sb.append("    commissionFee: ").append(toIndentedString(commissionFee)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data_type");
    openapiFields.add("request_id");
    openapiFields.add("refund_id");
    openapiFields.add("order_id");
    openapiFields.add("merchant_id");
    openapiFields.add("token_id");
    openapiFields.add("chain_id");
    openapiFields.add("amount");
    openapiFields.add("to_address");
    openapiFields.add("status");
    openapiFields.add("refund_type");
    openapiFields.add("created_timestamp");
    openapiFields.add("updated_timestamp");
    openapiFields.add("initiator");
    openapiFields.add("transactions");
    openapiFields.add("charge_merchant_fee");
    openapiFields.add("merchant_fee_amount");
    openapiFields.add("merchant_fee_token_id");
    openapiFields.add("commission_fee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data_type");
    openapiRequiredFields.add("refund_id");
    openapiRequiredFields.add("token_id");
    openapiRequiredFields.add("chain_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("to_address");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentRefundEventData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentRefundEventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentRefundEventData is not found in the empty JSON string", PaymentRefundEventData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentRefundEventData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      // validate the required field `data_type`
      DataTypeEnum.validateJsonElement(jsonObj.get("data_type"));
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if (!jsonObj.get("refund_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_id").toString()));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
      if (!jsonObj.get("chain_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain_id").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("to_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_address").toString()));
      }
      // validate the required field `status`
      RefundStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `refund_type`
      if (jsonObj.get("refund_type") != null && !jsonObj.get("refund_type").isJsonNull()) {
        RefundType.validateJsonElement(jsonObj.get("refund_type"));
      }
      if ((jsonObj.get("initiator") != null && !jsonObj.get("initiator").isJsonNull()) && !jsonObj.get("initiator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiator").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            PaymentTransaction.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
      if ((jsonObj.get("merchant_fee_amount") != null && !jsonObj.get("merchant_fee_amount").isJsonNull()) && !jsonObj.get("merchant_fee_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_fee_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_fee_amount").toString()));
      }
      if ((jsonObj.get("merchant_fee_token_id") != null && !jsonObj.get("merchant_fee_token_id").isJsonNull()) && !jsonObj.get("merchant_fee_token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_fee_token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_fee_token_id").toString()));
      }
      // validate the optional field `commission_fee`
      if (jsonObj.get("commission_fee") != null && !jsonObj.get("commission_fee").isJsonNull()) {
        CommissionFee.validateJsonElement(jsonObj.get("commission_fee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentRefundEventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentRefundEventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentRefundEventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentRefundEventData.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentRefundEventData>() {
           @Override
           public void write(JsonWriter out, PaymentRefundEventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentRefundEventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PaymentRefundEventData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentRefundEventData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentRefundEventData
  * @throws IOException if the JSON string is invalid with respect to PaymentRefundEventData
  */
  public static PaymentRefundEventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentRefundEventData.class);
  }

 /**
  * Convert an instance of PaymentRefundEventData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

