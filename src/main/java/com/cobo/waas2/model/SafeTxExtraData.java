/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.SafeTxDecodedData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * The information used to construct and sign Safe{Wallet} transactions using the EIP-712 standard.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class SafeTxExtraData {
  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DOMAIN_HASH = "domain_hash";
  @SerializedName(SERIALIZED_NAME_DOMAIN_HASH)
  private String domainHash;

  public static final String SERIALIZED_NAME_MESSAGE_HASH = "message_hash";
  @SerializedName(SERIALIZED_NAME_MESSAGE_HASH)
  private String messageHash;

  public static final String SERIALIZED_NAME_SAFE_ADDRESS = "safe_address";
  @SerializedName(SERIALIZED_NAME_SAFE_ADDRESS)
  private String safeAddress;

  public static final String SERIALIZED_NAME_SAFE_TX_HASH = "safe_tx_hash";
  @SerializedName(SERIALIZED_NAME_SAFE_TX_HASH)
  private String safeTxHash;

  public static final String SERIALIZED_NAME_SAFE_NONCE = "safe_nonce";
  @SerializedName(SERIALIZED_NAME_SAFE_NONCE)
  private Integer safeNonce;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_GAS_TOKEN_ADDR = "gas_token_addr";
  @SerializedName(SERIALIZED_NAME_GAS_TOKEN_ADDR)
  private String gasTokenAddr;

  public static final String SERIALIZED_NAME_SAFE_TX_GAS = "safe_tx_gas";
  @SerializedName(SERIALIZED_NAME_SAFE_TX_GAS)
  private Integer safeTxGas;

  public static final String SERIALIZED_NAME_BASE_GAS = "base_gas";
  @SerializedName(SERIALIZED_NAME_BASE_GAS)
  private Integer baseGas;

  public static final String SERIALIZED_NAME_GAS_PRICE = "gas_price";
  @SerializedName(SERIALIZED_NAME_GAS_PRICE)
  private String gasPrice;

  public static final String SERIALIZED_NAME_REFUND_RECEIVER = "refund_receiver";
  @SerializedName(SERIALIZED_NAME_REFUND_RECEIVER)
  private String refundReceiver;

  public static final String SERIALIZED_NAME_TO_CONTRACT_NAME = "to_contract_name";
  @SerializedName(SERIALIZED_NAME_TO_CONTRACT_NAME)
  private String toContractName;

  public static final String SERIALIZED_NAME_DECODED_DATA = "decoded_data";
  @SerializedName(SERIALIZED_NAME_DECODED_DATA)
  private SafeTxDecodedData decodedData;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_WEI = "wei";
  @SerializedName(SERIALIZED_NAME_WEI)
  private String wei;

  public SafeTxExtraData() {
  }

  public SafeTxExtraData to(String to) {
    this.to = to;
    return this;
  }

   /**
   * The recipient address of the transaction.
   * @return to
  **/
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public SafeTxExtraData value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The human-readable transaction value, for example, &#x60;1 ETH&#x60;.
   * @return value
  **/
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public SafeTxExtraData data(String data) {
    this.data = data;
    return this;
  }

   /**
   * The transaction call data.
   * @return data
  **/
  @javax.annotation.Nonnull
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public SafeTxExtraData domainHash(String domainHash) {
    this.domainHash = domainHash;
    return this;
  }

   /**
   * The EIP-712 domain separator hash.
   * @return domainHash
  **/
  @javax.annotation.Nonnull
  public String getDomainHash() {
    return domainHash;
  }

  public void setDomainHash(String domainHash) {
    this.domainHash = domainHash;
  }


  public SafeTxExtraData messageHash(String messageHash) {
    this.messageHash = messageHash;
    return this;
  }

   /**
   * The hash of the structured message to be signed.
   * @return messageHash
  **/
  @javax.annotation.Nonnull
  public String getMessageHash() {
    return messageHash;
  }

  public void setMessageHash(String messageHash) {
    this.messageHash = messageHash;
  }


  public SafeTxExtraData safeAddress(String safeAddress) {
    this.safeAddress = safeAddress;
    return this;
  }

   /**
   * The address of the Safe contract.
   * @return safeAddress
  **/
  @javax.annotation.Nonnull
  public String getSafeAddress() {
    return safeAddress;
  }

  public void setSafeAddress(String safeAddress) {
    this.safeAddress = safeAddress;
  }


  public SafeTxExtraData safeTxHash(String safeTxHash) {
    this.safeTxHash = safeTxHash;
    return this;
  }

   /**
   * The hash of the transaction.
   * @return safeTxHash
  **/
  @javax.annotation.Nonnull
  public String getSafeTxHash() {
    return safeTxHash;
  }

  public void setSafeTxHash(String safeTxHash) {
    this.safeTxHash = safeTxHash;
  }


  public SafeTxExtraData safeNonce(Integer safeNonce) {
    this.safeNonce = safeNonce;
    return this;
  }

   /**
   * The nonce of the transaction.
   * @return safeNonce
  **/
  @javax.annotation.Nonnull
  public Integer getSafeNonce() {
    return safeNonce;
  }

  public void setSafeNonce(Integer safeNonce) {
    this.safeNonce = safeNonce;
  }


  public SafeTxExtraData operation(String operation) {
    this.operation = operation;
    return this;
  }

   /**
   * The operation type for the transaction.
   * @return operation
  **/
  @javax.annotation.Nonnull
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public SafeTxExtraData gasTokenAddr(String gasTokenAddr) {
    this.gasTokenAddr = gasTokenAddr;
    return this;
  }

   /**
   * The address of the token used to pay gas.
   * @return gasTokenAddr
  **/
  @javax.annotation.Nullable
  public String getGasTokenAddr() {
    return gasTokenAddr;
  }

  public void setGasTokenAddr(String gasTokenAddr) {
    this.gasTokenAddr = gasTokenAddr;
  }


  public SafeTxExtraData safeTxGas(Integer safeTxGas) {
    this.safeTxGas = safeTxGas;
    return this;
  }

   /**
   * The gas limit used for the transaction.
   * @return safeTxGas
  **/
  @javax.annotation.Nullable
  public Integer getSafeTxGas() {
    return safeTxGas;
  }

  public void setSafeTxGas(Integer safeTxGas) {
    this.safeTxGas = safeTxGas;
  }


  public SafeTxExtraData baseGas(Integer baseGas) {
    this.baseGas = baseGas;
    return this;
  }

   /**
   * The base gas for the transaction.
   * @return baseGas
  **/
  @javax.annotation.Nullable
  public Integer getBaseGas() {
    return baseGas;
  }

  public void setBaseGas(Integer baseGas) {
    this.baseGas = baseGas;
  }


  public SafeTxExtraData gasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
    return this;
  }

   /**
   * The gas price used in the transaction.
   * @return gasPrice
  **/
  @javax.annotation.Nullable
  public String getGasPrice() {
    return gasPrice;
  }

  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }


  public SafeTxExtraData refundReceiver(String refundReceiver) {
    this.refundReceiver = refundReceiver;
    return this;
  }

   /**
   * The address used to receive the gas refund.
   * @return refundReceiver
  **/
  @javax.annotation.Nullable
  public String getRefundReceiver() {
    return refundReceiver;
  }

  public void setRefundReceiver(String refundReceiver) {
    this.refundReceiver = refundReceiver;
  }


  public SafeTxExtraData toContractName(String toContractName) {
    this.toContractName = toContractName;
    return this;
  }

   /**
   * The name of the recipient contract (if available).
   * @return toContractName
  **/
  @javax.annotation.Nullable
  public String getToContractName() {
    return toContractName;
  }

  public void setToContractName(String toContractName) {
    this.toContractName = toContractName;
  }


  public SafeTxExtraData decodedData(SafeTxDecodedData decodedData) {
    this.decodedData = decodedData;
    return this;
  }

   /**
   * Get decodedData
   * @return decodedData
  **/
  @javax.annotation.Nullable
  public SafeTxDecodedData getDecodedData() {
    return decodedData;
  }

  public void setDecodedData(SafeTxDecodedData decodedData) {
    this.decodedData = decodedData;
  }


  public SafeTxExtraData signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * The signature of the transaction (if signed by Cobo Signer).
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public SafeTxExtraData wei(String wei) {
    this.wei = wei;
    return this;
  }

   /**
   * The transaction amount in Wei.
   * @return wei
  **/
  @javax.annotation.Nullable
  public String getWei() {
    return wei;
  }

  public void setWei(String wei) {
    this.wei = wei;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SafeTxExtraData instance itself
   */
  public SafeTxExtraData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SafeTxExtraData safeTxExtraData = (SafeTxExtraData) o;
    return Objects.equals(this.to, safeTxExtraData.to) &&
        Objects.equals(this.value, safeTxExtraData.value) &&
        Objects.equals(this.data, safeTxExtraData.data) &&
        Objects.equals(this.domainHash, safeTxExtraData.domainHash) &&
        Objects.equals(this.messageHash, safeTxExtraData.messageHash) &&
        Objects.equals(this.safeAddress, safeTxExtraData.safeAddress) &&
        Objects.equals(this.safeTxHash, safeTxExtraData.safeTxHash) &&
        Objects.equals(this.safeNonce, safeTxExtraData.safeNonce) &&
        Objects.equals(this.operation, safeTxExtraData.operation) &&
        Objects.equals(this.gasTokenAddr, safeTxExtraData.gasTokenAddr) &&
        Objects.equals(this.safeTxGas, safeTxExtraData.safeTxGas) &&
        Objects.equals(this.baseGas, safeTxExtraData.baseGas) &&
        Objects.equals(this.gasPrice, safeTxExtraData.gasPrice) &&
        Objects.equals(this.refundReceiver, safeTxExtraData.refundReceiver) &&
        Objects.equals(this.toContractName, safeTxExtraData.toContractName) &&
        Objects.equals(this.decodedData, safeTxExtraData.decodedData) &&
        Objects.equals(this.signature, safeTxExtraData.signature) &&
        Objects.equals(this.wei, safeTxExtraData.wei)&&
        Objects.equals(this.additionalProperties, safeTxExtraData.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, value, data, domainHash, messageHash, safeAddress, safeTxHash, safeNonce, operation, gasTokenAddr, safeTxGas, baseGas, gasPrice, refundReceiver, toContractName, decodedData, signature, wei, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SafeTxExtraData {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    domainHash: ").append(toIndentedString(domainHash)).append("\n");
    sb.append("    messageHash: ").append(toIndentedString(messageHash)).append("\n");
    sb.append("    safeAddress: ").append(toIndentedString(safeAddress)).append("\n");
    sb.append("    safeTxHash: ").append(toIndentedString(safeTxHash)).append("\n");
    sb.append("    safeNonce: ").append(toIndentedString(safeNonce)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    gasTokenAddr: ").append(toIndentedString(gasTokenAddr)).append("\n");
    sb.append("    safeTxGas: ").append(toIndentedString(safeTxGas)).append("\n");
    sb.append("    baseGas: ").append(toIndentedString(baseGas)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    refundReceiver: ").append(toIndentedString(refundReceiver)).append("\n");
    sb.append("    toContractName: ").append(toIndentedString(toContractName)).append("\n");
    sb.append("    decodedData: ").append(toIndentedString(decodedData)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    wei: ").append(toIndentedString(wei)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("to");
    openapiFields.add("value");
    openapiFields.add("data");
    openapiFields.add("domain_hash");
    openapiFields.add("message_hash");
    openapiFields.add("safe_address");
    openapiFields.add("safe_tx_hash");
    openapiFields.add("safe_nonce");
    openapiFields.add("operation");
    openapiFields.add("gas_token_addr");
    openapiFields.add("safe_tx_gas");
    openapiFields.add("base_gas");
    openapiFields.add("gas_price");
    openapiFields.add("refund_receiver");
    openapiFields.add("to_contract_name");
    openapiFields.add("decoded_data");
    openapiFields.add("signature");
    openapiFields.add("wei");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("domain_hash");
    openapiRequiredFields.add("message_hash");
    openapiRequiredFields.add("safe_address");
    openapiRequiredFields.add("safe_tx_hash");
    openapiRequiredFields.add("safe_nonce");
    openapiRequiredFields.add("operation");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SafeTxExtraData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SafeTxExtraData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SafeTxExtraData is not found in the empty JSON string", SafeTxExtraData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SafeTxExtraData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if (!jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if (!jsonObj.get("domain_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_hash").toString()));
      }
      if (!jsonObj.get("message_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_hash").toString()));
      }
      if (!jsonObj.get("safe_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safe_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safe_address").toString()));
      }
      if (!jsonObj.get("safe_tx_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safe_tx_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safe_tx_hash").toString()));
      }
      if (!jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("gas_token_addr") != null && !jsonObj.get("gas_token_addr").isJsonNull()) && !jsonObj.get("gas_token_addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_token_addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_token_addr").toString()));
      }
      if ((jsonObj.get("gas_price") != null && !jsonObj.get("gas_price").isJsonNull()) && !jsonObj.get("gas_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_price").toString()));
      }
      if ((jsonObj.get("refund_receiver") != null && !jsonObj.get("refund_receiver").isJsonNull()) && !jsonObj.get("refund_receiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_receiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_receiver").toString()));
      }
      if ((jsonObj.get("to_contract_name") != null && !jsonObj.get("to_contract_name").isJsonNull()) && !jsonObj.get("to_contract_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_contract_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_contract_name").toString()));
      }
      // validate the optional field `decoded_data`
      if (jsonObj.get("decoded_data") != null && !jsonObj.get("decoded_data").isJsonNull()) {
        SafeTxDecodedData.validateJsonElement(jsonObj.get("decoded_data"));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("wei") != null && !jsonObj.get("wei").isJsonNull()) && !jsonObj.get("wei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wei").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SafeTxExtraData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SafeTxExtraData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SafeTxExtraData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SafeTxExtraData.class));

       return (TypeAdapter<T>) new TypeAdapter<SafeTxExtraData>() {
           @Override
           public void write(JsonWriter out, SafeTxExtraData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SafeTxExtraData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SafeTxExtraData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SafeTxExtraData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SafeTxExtraData
  * @throws IOException if the JSON string is invalid with respect to SafeTxExtraData
  */
  public static SafeTxExtraData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SafeTxExtraData.class);
  }

 /**
  * Convert an instance of SafeTxExtraData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

