/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of signature. Possible values include:  - &#x60;1&#x60; : ECDSA signature - &#x60;2&#x60; : EdDSA signature - &#x60;3&#x60; : Schnorr signature 
 */
@JsonAdapter(TSSSignatureType.Adapter.class)
public enum TSSSignatureType {
  UNKNOWN(null),
  
  NUMBER_1(1),
  
  NUMBER_2(2),
  
  NUMBER_3(3);

  private Integer value;

  TSSSignatureType(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TSSSignatureType fromValue(Integer value) {
    for (TSSSignatureType b : TSSSignatureType.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TSSSignatureType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TSSSignatureType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TSSSignatureType read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return TSSSignatureType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    TSSSignatureType.fromValue(value);
  }
}

