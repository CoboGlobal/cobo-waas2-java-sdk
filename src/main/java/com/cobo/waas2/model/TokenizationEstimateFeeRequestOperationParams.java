/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.TokenizationBurnEstimateFeeParams;
import com.cobo.waas2.model.TokenizationBurnTokenParamsBurnsInner;
import com.cobo.waas2.model.TokenizationContractCallEstimateFeeParams;
import com.cobo.waas2.model.TokenizationContractCallParamsData;
import com.cobo.waas2.model.TokenizationIssueEstimateFeeParams;
import com.cobo.waas2.model.TokenizationIssueTokenParamsTokenParams;
import com.cobo.waas2.model.TokenizationMintEstimateFeeParams;
import com.cobo.waas2.model.TokenizationMintTokenParamsMintsInner;
import com.cobo.waas2.model.TokenizationOperationType;
import com.cobo.waas2.model.TokenizationPauseEstimateFeeParams;
import com.cobo.waas2.model.TokenizationToggleAllowlistEstimateFeeParams;
import com.cobo.waas2.model.TokenizationTokenOperationSource;
import com.cobo.waas2.model.TokenizationUnpauseEstimateFeeParams;
import com.cobo.waas2.model.TokenizationUpdateAddressAction;
import com.cobo.waas2.model.TokenizationUpdateAllowlistAddressesEstimateFeeParams;
import com.cobo.waas2.model.TokenizationUpdateBlocklistAddressesEstimateFeeParams;
import com.cobo.waas2.model.TokenizationUpdateBlocklistAddressesParamsAddressesInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.cobo.waas2.JSON;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TokenizationEstimateFeeRequestOperationParams extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TokenizationEstimateFeeRequestOperationParams.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TokenizationEstimateFeeRequestOperationParams.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TokenizationEstimateFeeRequestOperationParams' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TokenizationIssueEstimateFeeParams> adapterTokenizationIssueEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationIssueEstimateFeeParams.class));
            final TypeAdapter<TokenizationMintEstimateFeeParams> adapterTokenizationMintEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationMintEstimateFeeParams.class));
            final TypeAdapter<TokenizationBurnEstimateFeeParams> adapterTokenizationBurnEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationBurnEstimateFeeParams.class));
            final TypeAdapter<TokenizationPauseEstimateFeeParams> adapterTokenizationPauseEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationPauseEstimateFeeParams.class));
            final TypeAdapter<TokenizationUnpauseEstimateFeeParams> adapterTokenizationUnpauseEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationUnpauseEstimateFeeParams.class));
            final TypeAdapter<TokenizationUpdateAllowlistAddressesEstimateFeeParams> adapterTokenizationUpdateAllowlistAddressesEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationUpdateAllowlistAddressesEstimateFeeParams.class));
            final TypeAdapter<TokenizationUpdateBlocklistAddressesEstimateFeeParams> adapterTokenizationUpdateBlocklistAddressesEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationUpdateBlocklistAddressesEstimateFeeParams.class));
            final TypeAdapter<TokenizationToggleAllowlistEstimateFeeParams> adapterTokenizationToggleAllowlistEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationToggleAllowlistEstimateFeeParams.class));
            final TypeAdapter<TokenizationContractCallEstimateFeeParams> adapterTokenizationContractCallEstimateFeeParams = gson.getDelegateAdapter(this, TypeToken.get(TokenizationContractCallEstimateFeeParams.class));

            return (TypeAdapter<T>) new TypeAdapter<TokenizationEstimateFeeRequestOperationParams>() {
                @Override
                public void write(JsonWriter out, TokenizationEstimateFeeRequestOperationParams value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TokenizationIssueEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationIssueEstimateFeeParams) {
                        JsonElement element = adapterTokenizationIssueEstimateFeeParams.toJsonTree((TokenizationIssueEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationMintEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationMintEstimateFeeParams) {
                        JsonElement element = adapterTokenizationMintEstimateFeeParams.toJsonTree((TokenizationMintEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationBurnEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationBurnEstimateFeeParams) {
                        JsonElement element = adapterTokenizationBurnEstimateFeeParams.toJsonTree((TokenizationBurnEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationPauseEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationPauseEstimateFeeParams) {
                        JsonElement element = adapterTokenizationPauseEstimateFeeParams.toJsonTree((TokenizationPauseEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationUnpauseEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationUnpauseEstimateFeeParams) {
                        JsonElement element = adapterTokenizationUnpauseEstimateFeeParams.toJsonTree((TokenizationUnpauseEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationUpdateAllowlistAddressesEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationUpdateAllowlistAddressesEstimateFeeParams) {
                        JsonElement element = adapterTokenizationUpdateAllowlistAddressesEstimateFeeParams.toJsonTree((TokenizationUpdateAllowlistAddressesEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationUpdateBlocklistAddressesEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationUpdateBlocklistAddressesEstimateFeeParams) {
                        JsonElement element = adapterTokenizationUpdateBlocklistAddressesEstimateFeeParams.toJsonTree((TokenizationUpdateBlocklistAddressesEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationToggleAllowlistEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationToggleAllowlistEstimateFeeParams) {
                        JsonElement element = adapterTokenizationToggleAllowlistEstimateFeeParams.toJsonTree((TokenizationToggleAllowlistEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TokenizationContractCallEstimateFeeParams`
                    if (value.getActualInstance() instanceof TokenizationContractCallEstimateFeeParams) {
                        JsonElement element = adapterTokenizationContractCallEstimateFeeParams.toJsonTree((TokenizationContractCallEstimateFeeParams)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams");
                }

                @Override
                public TokenizationEstimateFeeRequestOperationParams read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    TokenizationEstimateFeeRequestOperationParams newTokenizationEstimateFeeRequestOperationParams = new TokenizationEstimateFeeRequestOperationParams();
                    if (jsonObject.get("operation_type") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for TokenizationEstimateFeeRequestOperationParams as `operation_type` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `operation_type`
                        switch (jsonObject.get("operation_type").getAsString()) {
                            case "Burn":
                                deserialized = adapterTokenizationBurnEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "ContractCall":
                                deserialized = adapterTokenizationContractCallEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "Issue":
                                deserialized = adapterTokenizationIssueEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "Mint":
                                deserialized = adapterTokenizationMintEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "Pause":
                                deserialized = adapterTokenizationPauseEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "ToggleAllowlist":
                                deserialized = adapterTokenizationToggleAllowlistEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "Unpause":
                                deserialized = adapterTokenizationUnpauseEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "UpdateAllowlistAddresses":
                                deserialized = adapterTokenizationUpdateAllowlistAddressesEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "UpdateBlocklistAddresses":
                                deserialized = adapterTokenizationUpdateBlocklistAddressesEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationBurnEstimateFeeParams":
                                deserialized = adapterTokenizationBurnEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationContractCallEstimateFeeParams":
                                deserialized = adapterTokenizationContractCallEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationIssueEstimateFeeParams":
                                deserialized = adapterTokenizationIssueEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationMintEstimateFeeParams":
                                deserialized = adapterTokenizationMintEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationPauseEstimateFeeParams":
                                deserialized = adapterTokenizationPauseEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationToggleAllowlistEstimateFeeParams":
                                deserialized = adapterTokenizationToggleAllowlistEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationUnpauseEstimateFeeParams":
                                deserialized = adapterTokenizationUnpauseEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationUpdateAllowlistAddressesEstimateFeeParams":
                                deserialized = adapterTokenizationUpdateAllowlistAddressesEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            case "TokenizationUpdateBlocklistAddressesEstimateFeeParams":
                                deserialized = adapterTokenizationUpdateBlocklistAddressesEstimateFeeParams.fromJsonTree(jsonObject);
                                newTokenizationEstimateFeeRequestOperationParams.setActualInstance(deserialized);
                                return newTokenizationEstimateFeeRequestOperationParams;
                            default:
                                log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for TokenizationEstimateFeeRequestOperationParams. Possible values: Burn ContractCall Issue Mint Pause ToggleAllowlist Unpause UpdateAllowlistAddresses UpdateBlocklistAddresses TokenizationBurnEstimateFeeParams TokenizationContractCallEstimateFeeParams TokenizationIssueEstimateFeeParams TokenizationMintEstimateFeeParams TokenizationPauseEstimateFeeParams TokenizationToggleAllowlistEstimateFeeParams TokenizationUnpauseEstimateFeeParams TokenizationUpdateAllowlistAddressesEstimateFeeParams TokenizationUpdateBlocklistAddressesEstimateFeeParams", jsonObject.get("operation_type").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TokenizationIssueEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationIssueEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationIssueEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationIssueEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationIssueEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationIssueEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationMintEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationMintEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationMintEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationMintEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationMintEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationMintEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationBurnEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationBurnEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationBurnEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationBurnEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationBurnEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationBurnEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationPauseEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationPauseEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationPauseEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationPauseEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationPauseEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationPauseEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationUnpauseEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationUnpauseEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationUnpauseEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationUnpauseEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationUnpauseEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationUnpauseEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationUpdateAllowlistAddressesEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationUpdateAllowlistAddressesEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationUpdateAllowlistAddressesEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationUpdateAllowlistAddressesEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationUpdateAllowlistAddressesEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationUpdateAllowlistAddressesEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationUpdateBlocklistAddressesEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationUpdateBlocklistAddressesEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationUpdateBlocklistAddressesEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationUpdateBlocklistAddressesEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationUpdateBlocklistAddressesEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationUpdateBlocklistAddressesEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationToggleAllowlistEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationToggleAllowlistEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationToggleAllowlistEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationToggleAllowlistEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationToggleAllowlistEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationToggleAllowlistEstimateFeeParams'", e);
                    }
                    // deserialize TokenizationContractCallEstimateFeeParams
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TokenizationContractCallEstimateFeeParams.validateJsonElement(jsonElement);
                        actualAdapter = adapterTokenizationContractCallEstimateFeeParams;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TokenizationContractCallEstimateFeeParams'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TokenizationContractCallEstimateFeeParams failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TokenizationContractCallEstimateFeeParams'", e);
                    }

                    if (match == 1) {
                        TokenizationEstimateFeeRequestOperationParams ret = new TokenizationEstimateFeeRequestOperationParams();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TokenizationEstimateFeeRequestOperationParams: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TokenizationEstimateFeeRequestOperationParams() {
        super("oneOf", Boolean.FALSE);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationBurnEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationContractCallEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationIssueEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationMintEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationPauseEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationToggleAllowlistEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationUnpauseEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationUpdateAllowlistAddressesEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TokenizationEstimateFeeRequestOperationParams(TokenizationUpdateBlocklistAddressesEstimateFeeParams o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TokenizationIssueEstimateFeeParams", TokenizationIssueEstimateFeeParams.class);
        schemas.put("TokenizationMintEstimateFeeParams", TokenizationMintEstimateFeeParams.class);
        schemas.put("TokenizationBurnEstimateFeeParams", TokenizationBurnEstimateFeeParams.class);
        schemas.put("TokenizationPauseEstimateFeeParams", TokenizationPauseEstimateFeeParams.class);
        schemas.put("TokenizationUnpauseEstimateFeeParams", TokenizationUnpauseEstimateFeeParams.class);
        schemas.put("TokenizationUpdateAllowlistAddressesEstimateFeeParams", TokenizationUpdateAllowlistAddressesEstimateFeeParams.class);
        schemas.put("TokenizationUpdateBlocklistAddressesEstimateFeeParams", TokenizationUpdateBlocklistAddressesEstimateFeeParams.class);
        schemas.put("TokenizationToggleAllowlistEstimateFeeParams", TokenizationToggleAllowlistEstimateFeeParams.class);
        schemas.put("TokenizationContractCallEstimateFeeParams", TokenizationContractCallEstimateFeeParams.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TokenizationEstimateFeeRequestOperationParams.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TokenizationIssueEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationMintEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationBurnEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationPauseEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationUnpauseEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationUpdateAllowlistAddressesEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationUpdateBlocklistAddressesEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationToggleAllowlistEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TokenizationContractCallEstimateFeeParams) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams");
    }

    /**
     * Get the actual instance, which can be the following:
     * TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams
     *
     * @return The actual instance (TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TokenizationIssueEstimateFeeParams`. If the actual instance is not `TokenizationIssueEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationIssueEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationIssueEstimateFeeParams`
     */
    public TokenizationIssueEstimateFeeParams getTokenizationIssueEstimateFeeParams() throws ClassCastException {
        return (TokenizationIssueEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationMintEstimateFeeParams`. If the actual instance is not `TokenizationMintEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationMintEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationMintEstimateFeeParams`
     */
    public TokenizationMintEstimateFeeParams getTokenizationMintEstimateFeeParams() throws ClassCastException {
        return (TokenizationMintEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationBurnEstimateFeeParams`. If the actual instance is not `TokenizationBurnEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationBurnEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationBurnEstimateFeeParams`
     */
    public TokenizationBurnEstimateFeeParams getTokenizationBurnEstimateFeeParams() throws ClassCastException {
        return (TokenizationBurnEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationPauseEstimateFeeParams`. If the actual instance is not `TokenizationPauseEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationPauseEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationPauseEstimateFeeParams`
     */
    public TokenizationPauseEstimateFeeParams getTokenizationPauseEstimateFeeParams() throws ClassCastException {
        return (TokenizationPauseEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationUnpauseEstimateFeeParams`. If the actual instance is not `TokenizationUnpauseEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationUnpauseEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationUnpauseEstimateFeeParams`
     */
    public TokenizationUnpauseEstimateFeeParams getTokenizationUnpauseEstimateFeeParams() throws ClassCastException {
        return (TokenizationUnpauseEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationUpdateAllowlistAddressesEstimateFeeParams`. If the actual instance is not `TokenizationUpdateAllowlistAddressesEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationUpdateAllowlistAddressesEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationUpdateAllowlistAddressesEstimateFeeParams`
     */
    public TokenizationUpdateAllowlistAddressesEstimateFeeParams getTokenizationUpdateAllowlistAddressesEstimateFeeParams() throws ClassCastException {
        return (TokenizationUpdateAllowlistAddressesEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationUpdateBlocklistAddressesEstimateFeeParams`. If the actual instance is not `TokenizationUpdateBlocklistAddressesEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationUpdateBlocklistAddressesEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationUpdateBlocklistAddressesEstimateFeeParams`
     */
    public TokenizationUpdateBlocklistAddressesEstimateFeeParams getTokenizationUpdateBlocklistAddressesEstimateFeeParams() throws ClassCastException {
        return (TokenizationUpdateBlocklistAddressesEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationToggleAllowlistEstimateFeeParams`. If the actual instance is not `TokenizationToggleAllowlistEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationToggleAllowlistEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationToggleAllowlistEstimateFeeParams`
     */
    public TokenizationToggleAllowlistEstimateFeeParams getTokenizationToggleAllowlistEstimateFeeParams() throws ClassCastException {
        return (TokenizationToggleAllowlistEstimateFeeParams)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TokenizationContractCallEstimateFeeParams`. If the actual instance is not `TokenizationContractCallEstimateFeeParams`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TokenizationContractCallEstimateFeeParams`
     * @throws ClassCastException if the instance is not `TokenizationContractCallEstimateFeeParams`
     */
    public TokenizationContractCallEstimateFeeParams getTokenizationContractCallEstimateFeeParams() throws ClassCastException {
        return (TokenizationContractCallEstimateFeeParams)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TokenizationEstimateFeeRequestOperationParams
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TokenizationIssueEstimateFeeParams
        try {
            TokenizationIssueEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationIssueEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationMintEstimateFeeParams
        try {
            TokenizationMintEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationMintEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationBurnEstimateFeeParams
        try {
            TokenizationBurnEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationBurnEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationPauseEstimateFeeParams
        try {
            TokenizationPauseEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationPauseEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationUnpauseEstimateFeeParams
        try {
            TokenizationUnpauseEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationUnpauseEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationUpdateAllowlistAddressesEstimateFeeParams
        try {
            TokenizationUpdateAllowlistAddressesEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationUpdateAllowlistAddressesEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationUpdateBlocklistAddressesEstimateFeeParams
        try {
            TokenizationUpdateBlocklistAddressesEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationUpdateBlocklistAddressesEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationToggleAllowlistEstimateFeeParams
        try {
            TokenizationToggleAllowlistEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationToggleAllowlistEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TokenizationContractCallEstimateFeeParams
        try {
            TokenizationContractCallEstimateFeeParams.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TokenizationContractCallEstimateFeeParams failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            // throw new IOException(String.format("The JSON string is invalid for TokenizationEstimateFeeRequestOperationParams with oneOf schemas: TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TokenizationEstimateFeeRequestOperationParams given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TokenizationEstimateFeeRequestOperationParams
     * @throws IOException if the JSON string is invalid with respect to TokenizationEstimateFeeRequestOperationParams
     */
    public static TokenizationEstimateFeeRequestOperationParams fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TokenizationEstimateFeeRequestOperationParams.class);
    }

    /**
     * Convert an instance of TokenizationEstimateFeeRequestOperationParams to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

