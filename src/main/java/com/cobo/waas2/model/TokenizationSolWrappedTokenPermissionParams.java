/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * Role-based permission settings for Solana wrapped token. The owner is automatically set to the address that calls the initialize function (typically the issuance wallet) and cannot be specified here. Only wrapper and pauser roles can be configured during initialization.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TokenizationSolWrappedTokenPermissionParams {
  public static final String SERIALIZED_NAME_WRAPPER = "wrapper";
  @SerializedName(SERIALIZED_NAME_WRAPPER)
  private List<String> wrapper = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAUSER = "pauser";
  @SerializedName(SERIALIZED_NAME_PAUSER)
  private List<String> pauser = new ArrayList<>();

  public TokenizationSolWrappedTokenPermissionParams() {
  }

  public TokenizationSolWrappedTokenPermissionParams wrapper(List<String> wrapper) {
    this.wrapper = wrapper;
    return this;
  }

  public TokenizationSolWrappedTokenPermissionParams addWrapperItem(String wrapperItem) {
    if (this.wrapper == null) {
      this.wrapper = new ArrayList<>();
    }
    this.wrapper.add(wrapperItem);
    return this;
  }

   /**
   * List of Solana wallet addresses that can perform wrap/unwrap operations. Multiple addresses can be assigned this role.
   * @return wrapper
  **/
  @javax.annotation.Nullable
  public List<String> getWrapper() {
    return wrapper;
  }

  public void setWrapper(List<String> wrapper) {
    this.wrapper = wrapper;
  }


  public TokenizationSolWrappedTokenPermissionParams pauser(List<String> pauser) {
    this.pauser = pauser;
    return this;
  }

  public TokenizationSolWrappedTokenPermissionParams addPauserItem(String pauserItem) {
    if (this.pauser == null) {
      this.pauser = new ArrayList<>();
    }
    this.pauser.add(pauserItem);
    return this;
  }

   /**
   * List of Solana wallet addresses that can pause/unpause the contract. Multiple addresses can be assigned this role.
   * @return pauser
  **/
  @javax.annotation.Nullable
  public List<String> getPauser() {
    return pauser;
  }

  public void setPauser(List<String> pauser) {
    this.pauser = pauser;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TokenizationSolWrappedTokenPermissionParams instance itself
   */
  public TokenizationSolWrappedTokenPermissionParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizationSolWrappedTokenPermissionParams tokenizationSolWrappedTokenPermissionParams = (TokenizationSolWrappedTokenPermissionParams) o;
    return Objects.equals(this.wrapper, tokenizationSolWrappedTokenPermissionParams.wrapper) &&
        Objects.equals(this.pauser, tokenizationSolWrappedTokenPermissionParams.pauser)&&
        Objects.equals(this.additionalProperties, tokenizationSolWrappedTokenPermissionParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(wrapper, pauser, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizationSolWrappedTokenPermissionParams {\n");
    sb.append("    wrapper: ").append(toIndentedString(wrapper)).append("\n");
    sb.append("    pauser: ").append(toIndentedString(pauser)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("wrapper");
    openapiFields.add("pauser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokenizationSolWrappedTokenPermissionParams
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenizationSolWrappedTokenPermissionParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenizationSolWrappedTokenPermissionParams is not found in the empty JSON string", TokenizationSolWrappedTokenPermissionParams.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("wrapper") != null && !jsonObj.get("wrapper").isJsonNull() && !jsonObj.get("wrapper").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapper` to be an array in the JSON string but got `%s`", jsonObj.get("wrapper").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pauser") != null && !jsonObj.get("pauser").isJsonNull() && !jsonObj.get("pauser").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pauser` to be an array in the JSON string but got `%s`", jsonObj.get("pauser").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenizationSolWrappedTokenPermissionParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenizationSolWrappedTokenPermissionParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenizationSolWrappedTokenPermissionParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenizationSolWrappedTokenPermissionParams.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenizationSolWrappedTokenPermissionParams>() {
           @Override
           public void write(JsonWriter out, TokenizationSolWrappedTokenPermissionParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenizationSolWrappedTokenPermissionParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TokenizationSolWrappedTokenPermissionParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenizationSolWrappedTokenPermissionParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenizationSolWrappedTokenPermissionParams
  * @throws IOException if the JSON string is invalid with respect to TokenizationSolWrappedTokenPermissionParams
  */
  public static TokenizationSolWrappedTokenPermissionParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenizationSolWrappedTokenPermissionParams.class);
  }

 /**
  * Convert an instance of TokenizationSolWrappedTokenPermissionParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

