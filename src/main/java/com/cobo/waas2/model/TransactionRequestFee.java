/*
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.FeeType;
import com.cobo.waas2.model.TransactionRequestEvmEip1559Fee;
import com.cobo.waas2.model.TransactionRequestEvmLegacyFee;
import com.cobo.waas2.model.TransactionRequestFixedFee;
import com.cobo.waas2.model.TransactionRequestUtxoFee;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.cobo.waas2.JSON;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TransactionRequestFee extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TransactionRequestFee.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TransactionRequestFee.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TransactionRequestFee' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TransactionRequestFixedFee> adapterTransactionRequestFixedFee = gson.getDelegateAdapter(this, TypeToken.get(TransactionRequestFixedFee.class));
            final TypeAdapter<TransactionRequestEvmEip1559Fee> adapterTransactionRequestEvmEip1559Fee = gson.getDelegateAdapter(this, TypeToken.get(TransactionRequestEvmEip1559Fee.class));
            final TypeAdapter<TransactionRequestEvmLegacyFee> adapterTransactionRequestEvmLegacyFee = gson.getDelegateAdapter(this, TypeToken.get(TransactionRequestEvmLegacyFee.class));
            final TypeAdapter<TransactionRequestUtxoFee> adapterTransactionRequestUtxoFee = gson.getDelegateAdapter(this, TypeToken.get(TransactionRequestUtxoFee.class));

            return (TypeAdapter<T>) new TypeAdapter<TransactionRequestFee>() {
                @Override
                public void write(JsonWriter out, TransactionRequestFee value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TransactionRequestFixedFee`
                    if (value.getActualInstance() instanceof TransactionRequestFixedFee) {
                        JsonElement element = adapterTransactionRequestFixedFee.toJsonTree((TransactionRequestFixedFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionRequestEvmEip1559Fee`
                    if (value.getActualInstance() instanceof TransactionRequestEvmEip1559Fee) {
                        JsonElement element = adapterTransactionRequestEvmEip1559Fee.toJsonTree((TransactionRequestEvmEip1559Fee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionRequestEvmLegacyFee`
                    if (value.getActualInstance() instanceof TransactionRequestEvmLegacyFee) {
                        JsonElement element = adapterTransactionRequestEvmLegacyFee.toJsonTree((TransactionRequestEvmLegacyFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionRequestUtxoFee`
                    if (value.getActualInstance() instanceof TransactionRequestUtxoFee) {
                        JsonElement element = adapterTransactionRequestUtxoFee.toJsonTree((TransactionRequestUtxoFee)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFixedFee, TransactionRequestUtxoFee");
                }

                @Override
                public TransactionRequestFee read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    JsonObject jsonObject = jsonElement.getAsJsonObject();

                    // use discriminator value for faster oneOf lookup
                    TransactionRequestFee newTransactionRequestFee = new TransactionRequestFee();
                    if (jsonObject.get("fee_type") == null) {
                        log.log(Level.WARNING, "Failed to lookup discriminator value for TransactionRequestFee as `fee_type` was not found in the payload or the payload is empty.");
                    } else  {
                        // look up the discriminator value in the field `fee_type`
                        switch (jsonObject.get("fee_type").getAsString()) {
                            case "EVM_EIP_1559":
                                deserialized = adapterTransactionRequestEvmEip1559Fee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            case "EVM_Legacy":
                                deserialized = adapterTransactionRequestEvmLegacyFee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            case "Fixed":
                                deserialized = adapterTransactionRequestFixedFee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            case "UTXO":
                                deserialized = adapterTransactionRequestUtxoFee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            case "TransactionRequestEvmEip1559Fee":
                                deserialized = adapterTransactionRequestEvmEip1559Fee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            case "TransactionRequestEvmLegacyFee":
                                deserialized = adapterTransactionRequestEvmLegacyFee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            case "TransactionRequestFixedFee":
                                deserialized = adapterTransactionRequestFixedFee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            case "TransactionRequestUtxoFee":
                                deserialized = adapterTransactionRequestUtxoFee.fromJsonTree(jsonObject);
                                newTransactionRequestFee.setActualInstance(deserialized);
                                return newTransactionRequestFee;
                            default:
                                log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for TransactionRequestFee. Possible values: EVM_EIP_1559 EVM_Legacy Fixed UTXO TransactionRequestEvmEip1559Fee TransactionRequestEvmLegacyFee TransactionRequestFixedFee TransactionRequestUtxoFee", jsonObject.get("fee_type").getAsString()));
                        }
                    }

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TransactionRequestFixedFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionRequestFixedFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionRequestFixedFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionRequestFixedFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionRequestFixedFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionRequestFixedFee'", e);
                    }
                    // deserialize TransactionRequestEvmEip1559Fee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionRequestEvmEip1559Fee.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionRequestEvmEip1559Fee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionRequestEvmEip1559Fee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionRequestEvmEip1559Fee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionRequestEvmEip1559Fee'", e);
                    }
                    // deserialize TransactionRequestEvmLegacyFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionRequestEvmLegacyFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionRequestEvmLegacyFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionRequestEvmLegacyFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionRequestEvmLegacyFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionRequestEvmLegacyFee'", e);
                    }
                    // deserialize TransactionRequestUtxoFee
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionRequestUtxoFee.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionRequestUtxoFee;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionRequestUtxoFee'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionRequestUtxoFee failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionRequestUtxoFee'", e);
                    }

                    if (match == 1) {
                        TransactionRequestFee ret = new TransactionRequestFee();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TransactionRequestFee: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TransactionRequestFee() {
        super("oneOf", Boolean.FALSE);
    }

    public TransactionRequestFee(TransactionRequestEvmEip1559Fee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionRequestFee(TransactionRequestEvmLegacyFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionRequestFee(TransactionRequestFixedFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionRequestFee(TransactionRequestUtxoFee o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TransactionRequestFixedFee", TransactionRequestFixedFee.class);
        schemas.put("TransactionRequestEvmEip1559Fee", TransactionRequestEvmEip1559Fee.class);
        schemas.put("TransactionRequestEvmLegacyFee", TransactionRequestEvmLegacyFee.class);
        schemas.put("TransactionRequestUtxoFee", TransactionRequestUtxoFee.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TransactionRequestFee.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFixedFee, TransactionRequestUtxoFee
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TransactionRequestFixedFee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionRequestEvmEip1559Fee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionRequestEvmLegacyFee) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionRequestUtxoFee) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFixedFee, TransactionRequestUtxoFee");
    }

    /**
     * Get the actual instance, which can be the following:
     * TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFixedFee, TransactionRequestUtxoFee
     *
     * @return The actual instance (TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFixedFee, TransactionRequestUtxoFee)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TransactionRequestFixedFee`. If the actual instance is not `TransactionRequestFixedFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionRequestFixedFee`
     * @throws ClassCastException if the instance is not `TransactionRequestFixedFee`
     */
    public TransactionRequestFixedFee getTransactionRequestFixedFee() throws ClassCastException {
        return (TransactionRequestFixedFee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionRequestEvmEip1559Fee`. If the actual instance is not `TransactionRequestEvmEip1559Fee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionRequestEvmEip1559Fee`
     * @throws ClassCastException if the instance is not `TransactionRequestEvmEip1559Fee`
     */
    public TransactionRequestEvmEip1559Fee getTransactionRequestEvmEip1559Fee() throws ClassCastException {
        return (TransactionRequestEvmEip1559Fee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionRequestEvmLegacyFee`. If the actual instance is not `TransactionRequestEvmLegacyFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionRequestEvmLegacyFee`
     * @throws ClassCastException if the instance is not `TransactionRequestEvmLegacyFee`
     */
    public TransactionRequestEvmLegacyFee getTransactionRequestEvmLegacyFee() throws ClassCastException {
        return (TransactionRequestEvmLegacyFee)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionRequestUtxoFee`. If the actual instance is not `TransactionRequestUtxoFee`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionRequestUtxoFee`
     * @throws ClassCastException if the instance is not `TransactionRequestUtxoFee`
     */
    public TransactionRequestUtxoFee getTransactionRequestUtxoFee() throws ClassCastException {
        return (TransactionRequestUtxoFee)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TransactionRequestFee
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TransactionRequestFixedFee
        try {
            TransactionRequestFixedFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionRequestFixedFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionRequestEvmEip1559Fee
        try {
            TransactionRequestEvmEip1559Fee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionRequestEvmEip1559Fee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionRequestEvmLegacyFee
        try {
            TransactionRequestEvmLegacyFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionRequestEvmLegacyFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionRequestUtxoFee
        try {
            TransactionRequestUtxoFee.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionRequestUtxoFee failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for TransactionRequestFee with oneOf schemas: TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFixedFee, TransactionRequestUtxoFee. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TransactionRequestFee given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TransactionRequestFee
     * @throws IOException if the JSON string is invalid with respect to TransactionRequestFee
     */
    public static TransactionRequestFee fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TransactionRequestFee.class);
    }

    /**
     * Convert an instance of TransactionRequestFee to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

