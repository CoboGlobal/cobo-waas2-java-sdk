/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.cobo.waas2.model.TSSCurveType;
import com.cobo.waas2.model.TSSGroupType;
import com.cobo.waas2.model.TSSParticipant;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cobo.waas2.JSON;

/**
 * TSSGroup
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen", 
    comments = "Generator version: 7.6.0"
)
public class TSSGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CANONICAL_GROUP_ID = "canonical_group_id";
  @SerializedName(SERIALIZED_NAME_CANONICAL_GROUP_ID)
  private String canonicalGroupId;

  public static final String SERIALIZED_NAME_PROTOCOL_GROUP_ID = "protocol_group_id";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_GROUP_ID)
  private String protocolGroupId;

  public static final String SERIALIZED_NAME_PROTOCOL_TYPE = "protocol_type";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_TYPE)
  private String protocolType;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TSSGroupType type;

  public static final String SERIALIZED_NAME_ROOT_EXTENDED_PUBLIC_KEY = "root_extended_public_key";
  @SerializedName(SERIALIZED_NAME_ROOT_EXTENDED_PUBLIC_KEY)
  private String rootExtendedPublicKey;

  public static final String SERIALIZED_NAME_CHAINCODE = "chaincode";
  @SerializedName(SERIALIZED_NAME_CHAINCODE)
  private String chaincode;

  public static final String SERIALIZED_NAME_CURVE = "curve";
  @SerializedName(SERIALIZED_NAME_CURVE)
  private TSSCurveType curve;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Integer threshold;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<TSSParticipant> participants = new ArrayList<>();

  public TSSGroup() {
  }

  public TSSGroup id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The TSS key share group ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TSSGroup canonicalGroupId(String canonicalGroupId) {
    this.canonicalGroupId = canonicalGroupId;
    return this;
  }

   /**
   * The canonical group ID.
   * @return canonicalGroupId
  **/
  @javax.annotation.Nullable
  public String getCanonicalGroupId() {
    return canonicalGroupId;
  }

  public void setCanonicalGroupId(String canonicalGroupId) {
    this.canonicalGroupId = canonicalGroupId;
  }


  public TSSGroup protocolGroupId(String protocolGroupId) {
    this.protocolGroupId = protocolGroupId;
    return this;
  }

   /**
   * The protocol group ID.
   * @return protocolGroupId
  **/
  @javax.annotation.Nullable
  public String getProtocolGroupId() {
    return protocolGroupId;
  }

  public void setProtocolGroupId(String protocolGroupId) {
    this.protocolGroupId = protocolGroupId;
  }


  public TSSGroup protocolType(String protocolType) {
    this.protocolType = protocolType;
    return this;
  }

   /**
   * The protocol type.
   * @return protocolType
  **/
  @javax.annotation.Nullable
  public String getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(String protocolType) {
    this.protocolType = protocolType;
  }


  public TSSGroup createdTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * The group creation timestamp, in Unix timestamp format, measured in milliseconds.
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable
  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public TSSGroup type(TSSGroupType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TSSGroupType getType() {
    return type;
  }

  public void setType(TSSGroupType type) {
    this.type = type;
  }


  public TSSGroup rootExtendedPublicKey(String rootExtendedPublicKey) {
    this.rootExtendedPublicKey = rootExtendedPublicKey;
    return this;
  }

   /**
   * The root extended public key.
   * @return rootExtendedPublicKey
  **/
  @javax.annotation.Nullable
  public String getRootExtendedPublicKey() {
    return rootExtendedPublicKey;
  }

  public void setRootExtendedPublicKey(String rootExtendedPublicKey) {
    this.rootExtendedPublicKey = rootExtendedPublicKey;
  }


  public TSSGroup chaincode(String chaincode) {
    this.chaincode = chaincode;
    return this;
  }

   /**
   * The chaincode.
   * @return chaincode
  **/
  @javax.annotation.Nullable
  public String getChaincode() {
    return chaincode;
  }

  public void setChaincode(String chaincode) {
    this.chaincode = chaincode;
  }


  public TSSGroup curve(TSSCurveType curve) {
    this.curve = curve;
    return this;
  }

   /**
   * Get curve
   * @return curve
  **/
  @javax.annotation.Nullable
  public TSSCurveType getCurve() {
    return curve;
  }

  public void setCurve(TSSCurveType curve) {
    this.curve = curve;
  }


  public TSSGroup threshold(Integer threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * The threshold.
   * @return threshold
  **/
  @javax.annotation.Nullable
  public Integer getThreshold() {
    return threshold;
  }

  public void setThreshold(Integer threshold) {
    this.threshold = threshold;
  }


  public TSSGroup participants(List<TSSParticipant> participants) {
    this.participants = participants;
    return this;
  }

  public TSSGroup addParticipantsItem(TSSParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Get participants
   * @return participants
  **/
  @javax.annotation.Nullable
  public List<TSSParticipant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<TSSParticipant> participants) {
    this.participants = participants;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TSSGroup instance itself
   */
  public TSSGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TSSGroup tsSGroup = (TSSGroup) o;
    return Objects.equals(this.id, tsSGroup.id) &&
        Objects.equals(this.canonicalGroupId, tsSGroup.canonicalGroupId) &&
        Objects.equals(this.protocolGroupId, tsSGroup.protocolGroupId) &&
        Objects.equals(this.protocolType, tsSGroup.protocolType) &&
        Objects.equals(this.createdTimestamp, tsSGroup.createdTimestamp) &&
        Objects.equals(this.type, tsSGroup.type) &&
        Objects.equals(this.rootExtendedPublicKey, tsSGroup.rootExtendedPublicKey) &&
        Objects.equals(this.chaincode, tsSGroup.chaincode) &&
        Objects.equals(this.curve, tsSGroup.curve) &&
        Objects.equals(this.threshold, tsSGroup.threshold) &&
        Objects.equals(this.participants, tsSGroup.participants)&&
        Objects.equals(this.additionalProperties, tsSGroup.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, canonicalGroupId, protocolGroupId, protocolType, createdTimestamp, type, rootExtendedPublicKey, chaincode, curve, threshold, participants, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TSSGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    canonicalGroupId: ").append(toIndentedString(canonicalGroupId)).append("\n");
    sb.append("    protocolGroupId: ").append(toIndentedString(protocolGroupId)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    rootExtendedPublicKey: ").append(toIndentedString(rootExtendedPublicKey)).append("\n");
    sb.append("    chaincode: ").append(toIndentedString(chaincode)).append("\n");
    sb.append("    curve: ").append(toIndentedString(curve)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("canonical_group_id");
    openapiFields.add("protocol_group_id");
    openapiFields.add("protocol_type");
    openapiFields.add("created_timestamp");
    openapiFields.add("type");
    openapiFields.add("root_extended_public_key");
    openapiFields.add("chaincode");
    openapiFields.add("curve");
    openapiFields.add("threshold");
    openapiFields.add("participants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TSSGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TSSGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TSSGroup is not found in the empty JSON string", TSSGroup.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("canonical_group_id") != null && !jsonObj.get("canonical_group_id").isJsonNull()) && !jsonObj.get("canonical_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical_group_id").toString()));
      }
      if ((jsonObj.get("protocol_group_id") != null && !jsonObj.get("protocol_group_id").isJsonNull()) && !jsonObj.get("protocol_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_group_id").toString()));
      }
      if ((jsonObj.get("protocol_type") != null && !jsonObj.get("protocol_type").isJsonNull()) && !jsonObj.get("protocol_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TSSGroupType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("root_extended_public_key") != null && !jsonObj.get("root_extended_public_key").isJsonNull()) && !jsonObj.get("root_extended_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_extended_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_extended_public_key").toString()));
      }
      if ((jsonObj.get("chaincode") != null && !jsonObj.get("chaincode").isJsonNull()) && !jsonObj.get("chaincode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chaincode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chaincode").toString()));
      }
      // validate the optional field `curve`
      if (jsonObj.get("curve") != null && !jsonObj.get("curve").isJsonNull()) {
        TSSCurveType.validateJsonElement(jsonObj.get("curve"));
      }
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            TSSParticipant.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TSSGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TSSGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TSSGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TSSGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<TSSGroup>() {
           @Override
           public void write(JsonWriter out, TSSGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() == null)
                   obj.addProperty(entry.getKey(), (String) null);
                 else if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TSSGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TSSGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TSSGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TSSGroup
  * @throws IOException if the JSON string is invalid with respect to TSSGroup
  */
  public static TSSGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TSSGroup.class);
  }

 /**
  * Convert an instance of TSSGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

