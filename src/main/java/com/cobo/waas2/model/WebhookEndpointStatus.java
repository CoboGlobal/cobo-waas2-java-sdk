/*
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The webhook endpoint status. Possible values include: - &#x60;STATUS_ACTIVE&#x60;: The endpoint is currently in use. - &#x60;STATUS_INACTIVE&#x60;: The endpoint has been revoked and can no longer receive webhook events. - &#x60;STATUS_PENDING_ACTIVE&#x60;: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use. - &#x60;STATUS_PENDING_INACTIVE&#x60;: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events. - &#x60;STATUS_PENDING_UPDATE&#x60;: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated. - &#x60;STATUS_REJECT_ACTIVE&#x60;: The request to create the endpoint has been rejected. 
 */
@JsonAdapter(WebhookEndpointStatus.Adapter.class)
public enum WebhookEndpointStatus {
  UNKNOWN(null),
  
  ACTIVE("STATUS_ACTIVE"),
  
  INACTIVE("STATUS_INACTIVE"),
  
  PENDING_ACTIVE("STATUS_PENDING_ACTIVE"),
  
  PENDING_INACTIVE("STATUS_PENDING_INACTIVE"),
  
  PENDING_UPDATE("STATUS_PENDING_UPDATE"),
  
  REJECT_ACTIVE("STATUS_REJECT_ACTIVE");

  private String value;

  WebhookEndpointStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static WebhookEndpointStatus fromValue(String value) {
    for (WebhookEndpointStatus b : WebhookEndpointStatus.values()) {
      if (b == UNKNOWN) continue;
      if (b.value.equals(value)) {
        return b;
      }
    }
    return UNKNOWN;
    // throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<WebhookEndpointStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final WebhookEndpointStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public WebhookEndpointStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return WebhookEndpointStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    WebhookEndpointStatus.fromValue(value);
  }
}

