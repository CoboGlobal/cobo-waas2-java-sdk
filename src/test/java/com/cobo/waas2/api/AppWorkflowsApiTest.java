/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.AppWorkflow;
import com.cobo.waas2.model.ApprovalRequestDetail;
import com.cobo.waas2.model.CreateApprovalRequest201Response;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.ListApprovalRequests200Response;
import com.cobo.waas2.model.RequestApproval;
import com.cobo.waas2.model.RevokeApprovalRequest201Response;
import com.cobo.waas2.model.RevokeApprovalRequestRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppWorkflowsApi
 */
@Disabled
public class AppWorkflowsApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final AppWorkflowsApi api = new AppWorkflowsApi();

    /**
     * Request app workflow approval
     *
     * This operation is request approval from app workflow with idempotency checks. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApprovalRequestTest() throws ApiException {
        RequestApproval requestApproval = null;
        CreateApprovalRequest201Response response = api.createApprovalRequest(requestApproval);
        // TODO: test validations
    }

    /**
     * Get app workflow approval request by approval id
     *
     * This operation is retrieves approval request from app workflow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApprovalRequestByIdTest() throws ApiException {
        UUID approvalId = null;
        ApprovalRequestDetail response = api.getApprovalRequestById(approvalId);
        // TODO: test validations
    }

    /**
     * list app workflows
     *
     * This operation is list app workflows of app. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppWorkflowsTest() throws ApiException {
        List<AppWorkflow> response = api.listAppWorkflows();
        // TODO: test validations
    }

    /**
     * List app workflow approval requests by operation_id
     *
     * This operation is retrieves list approval requests from app workflow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApprovalRequestsTest() throws ApiException {
        String operationId = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListApprovalRequests200Response response = api.listApprovalRequests(operationId, limit, before, after);
        // TODO: test validations
    }

    /**
     * Revoke an app workflow approval request by request initiator.
     *
     * This operation is revoke approval request from app workflow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeApprovalRequestTest() throws ApiException {
        UUID approvalId = null;
        RevokeApprovalRequestRequest revokeApprovalRequestRequest = null;
        RevokeApprovalRequest201Response response = api.revokeApprovalRequest(approvalId, revokeApprovalRequestRequest);
        // TODO: test validations
    }

}
