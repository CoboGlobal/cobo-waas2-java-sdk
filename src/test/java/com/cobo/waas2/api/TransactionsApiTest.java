/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.ContractCallParams;
import com.cobo.waas2.model.CreateTransferTransaction201Response;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.EstimateFeeParams;
import com.cobo.waas2.model.EstimatedFee;
import com.cobo.waas2.model.ListTransactions200Response;
import com.cobo.waas2.model.MessageSignParams;
import com.cobo.waas2.model.TransactionDetail;
import com.cobo.waas2.model.TransactionRbf;
import com.cobo.waas2.model.TransactionResend;
import com.cobo.waas2.model.TransferParams;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final TransactionsApi api = new TransactionsApi();

    /**
     * Cancel transaction
     *
     * This operation cancels a specified transaction. A transaction can be cancelled if its status is either of the following: - &#x60;Submitted&#x60; - &#x60;PendingScreening&#x60; - &#x60;PendingAuthorization&#x60; - &#x60;PendingSignature&#x60;   A transaction request for tracking is returned upon successful operation. &lt;Note&gt;This operation only applies to transactions from MPC Wallets.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelTransactionByIdTest() throws ApiException {
        UUID transactionId = null;
        CreateTransferTransaction201Response response = api.cancelTransactionById(transactionId);
        // TODO: test validations
    }

    /**
     * Call smart contract
     *
     * This operation creates a transaction to interact with a smart contract on the blockchain.  You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.  &lt;Note&gt;Currently, this operation only applies to blockchains that have a similar architecture to Ethereum.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContractCallTransactionTest() throws ApiException {
        ContractCallParams contractCallParams = null;
        CreateTransferTransaction201Response response = api.createContractCallTransaction(contractCallParams);
        // TODO: test validations
    }

    /**
     * Sign message
     *
     * This operation creates a transaction to sign the provided message using cryptographic techniques.  In some scenarios, you want to sign a message for identity authentication or transaction approval. You need to provide details such as the source address, destination address, and the message to be signed. A transaction request for tracking is returned upon successful operation.  You can get the signature result by calling [Get transaction information](/v2/api-references/transactions/get-transaction-information).   &lt;Note&gt;Currently, only MPC Wallets support this type of transaction to sign a message.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMessageSignTransactionTest() throws ApiException {
        MessageSignParams messageSignParams = null;
        CreateTransferTransaction201Response response = api.createMessageSignTransaction(messageSignParams);
        // TODO: test validations
    }

    /**
     * Transfer token
     *
     * The operation transfers your assets from a wallet created on Cobo Protal to another address.  You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.  &lt;Note&gt;Only MPC Wallets as the transaction source can transfer tokens to multiple addresses by using the &lt;code&gt;utxo_outputs&lt;/code&gt; property.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransferTransactionTest() throws ApiException {
        TransferParams transferParams = null;
        CreateTransferTransaction201Response response = api.createTransferTransaction(transferParams);
        // TODO: test validations
    }

    /**
     * Drop transaction
     *
     * This operation drops a specified transaction.   Dropping a transaction will trigger an Replace-By-Fee (RBF) transaction which is a new version of the original transaction. It has a higher transaction fee to incentivize miners to prioritize its confirmation over the original one. A transaction can be dropped if its status is &#x60;Broadcasting&#x60;.  &lt;ul&gt; &lt;li&gt;For EVM chains, this RBF transaction has a transfer amount of &#x60;0&#x60; and the sending address is the same as the receiving address.&lt;/li&gt; &lt;li&gt;For UTXO chains, this RBF transaction has a transfer amount of &#x60;0&#x60; and the destination address is the same as the change address in the original transaction.&lt;/li&gt; &lt;/ul&gt; A transaction request for tracking is returned upon successful operation. &lt;Note&gt;This operation only applies to transactions from MPC Wallets, excluding transactions in the tokens VET, TRON, TVET, SOL, and TON.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dropTransactionByIdTest() throws ApiException {
        UUID transactionId = null;
        TransactionRbf transactionRbf = null;
        CreateTransferTransaction201Response response = api.dropTransactionById(transactionId, transactionRbf);
        // TODO: test validations
    }

    /**
     * Estimate transaction fee
     *
     * This operation estimates the transaction fee rates of a token transfer or a contract call based on three different transaction speeds (slow, recommended, and fast), considering factors such as network congestion and transaction complexity.  You need to specify the transaction information, including the request ID, request type, source address, destination address, and token ID of the transaction fee.  The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void estimateFeeTest() throws ApiException {
        EstimateFeeParams estimateFeeParams = null;
        EstimatedFee response = api.estimateFee(estimateFeeParams);
        // TODO: test validations
    }

    /**
     * Get transaction information
     *
     * This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionByIdTest() throws ApiException {
        UUID transactionId = null;
        TransactionDetail response = api.getTransactionById(transactionId);
        // TODO: test validations
    }

    /**
     * List all transactions
     *
     * This operation retrieves all the transactions under your organization.  You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        String requestId = null;
        String coboIds = null;
        UUID transactionIds = null;
        String transactionHashes = null;
        String types = null;
        String statuses = null;
        String walletIds = null;
        String chainIds = null;
        String tokenIds = null;
        String assetIds = null;
        UUID vaultId = null;
        UUID projectId = null;
        Long minCreatedTimestamp = null;
        Long maxCreatedTimestamp = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListTransactions200Response response = api.listTransactions(requestId, coboIds, transactionIds, transactionHashes, types, statuses, walletIds, chainIds, tokenIds, assetIds, vaultId, projectId, minCreatedTimestamp, maxCreatedTimestamp, limit, before, after);
        // TODO: test validations
    }

    /**
     * Resend transaction
     *
     * This operation resends a specified transaction. Resending a transaction initiates a new attempt to process the transaction that failed previously. A transaction can be resent if its status is &#x60;failed&#x60;.  A transaction request for tracking is returned upon successful operation. &lt;Note&gt;This operation only applies to transactions in the SOL token from MPC Wallets.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendTransactionByIdTest() throws ApiException {
        UUID transactionId = null;
        TransactionResend transactionResend = null;
        CreateTransferTransaction201Response response = api.resendTransactionById(transactionId, transactionResend);
        // TODO: test validations
    }

    /**
     * Speed up transaction
     *
     * This operation accelerates a specified transaction.   Speeding up a transaction will trigger an Replace-By-Fee (RBF) transaction which is a new version of the original transaction. It shares the same inputs but has a higher transaction fee to incentivize miners to prioritize its confirmation over the previous one. A transaction can be accelerated if its status is &#x60;Broadcasting&#x60;.  A transaction request for tracking is returned upon successful operation. &lt;Note&gt;This operation only applies to transactions from MPC Wallets, excluding transactions in the tokens VET, TRON, TVET, SOL, and TON.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedupTransactionByIdTest() throws ApiException {
        UUID transactionId = null;
        TransactionRbf transactionRbf = null;
        CreateTransferTransaction201Response response = api.speedupTransactionById(transactionId, transactionRbf);
        // TODO: test validations
    }

}
