/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.EstimatedFee;
import com.cobo.waas2.model.GetTokenizationAllowlistActivation200Response;
import com.cobo.waas2.model.ListTokenizationBlocklistAddresses200Response;
import com.cobo.waas2.model.TokenizationActivityInfo;
import com.cobo.waas2.model.TokenizationActivityStatus;
import com.cobo.waas2.model.TokenizationAllowlistActivationRequest;
import com.cobo.waas2.model.TokenizationAllowlistAddressesResponse;
import com.cobo.waas2.model.TokenizationBurnTokenRequest;
import com.cobo.waas2.model.TokenizationContractCallRequest;
import com.cobo.waas2.model.TokenizationEstimateFeeRequest;
import com.cobo.waas2.model.TokenizationIssuedTokenRequest;
import com.cobo.waas2.model.TokenizationListActivitiesResponse;
import com.cobo.waas2.model.TokenizationListEnabledChainsResponse;
import com.cobo.waas2.model.TokenizationListHoldingsResponse;
import com.cobo.waas2.model.TokenizationListTokenInfoResponse;
import com.cobo.waas2.model.TokenizationMintTokenRequest;
import com.cobo.waas2.model.TokenizationOperationResponse;
import com.cobo.waas2.model.TokenizationOperationType;
import com.cobo.waas2.model.TokenizationPauseTokenRequest;
import com.cobo.waas2.model.TokenizationStatus;
import com.cobo.waas2.model.TokenizationTokenDetailInfo;
import com.cobo.waas2.model.TokenizationTokenStandard;
import com.cobo.waas2.model.TokenizationUnpauseTokenRequest;
import com.cobo.waas2.model.TokenizationUpdateAllowlistAddressesRequest;
import com.cobo.waas2.model.TokenizationUpdateBlocklistAddressesRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenizationApi
 */
@Disabled
public class TokenizationApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final TokenizationApi api = new TokenizationApi();

    /**
     * Burn tokens
     *
     * This operation burns tokens from a specified address. Creates a burn transaction that will decrease the token supply. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void burnTokenizationTest() throws ApiException {
        String tokenId = null;
        TokenizationBurnTokenRequest tokenizationBurnTokenRequest = null;
        TokenizationOperationResponse response = api.burnTokenization(tokenId, tokenizationBurnTokenRequest);
        // TODO: test validations
    }

    /**
     * Estimate tokenization operation fee
     *
     * This operation estimates the fee required for tokenization operations. For EVM-based chains, this calculates the gas cost for the specified operation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void estimateTokenizationFeeTest() throws ApiException {
        TokenizationEstimateFeeRequest tokenizationEstimateFeeRequest = null;
        EstimatedFee response = api.estimateTokenizationFee(tokenizationEstimateFeeRequest);
        // TODO: test validations
    }

    /**
     * Get tokenization activity details
     *
     * This operation retrieves the detailed information for a specific tokenization activity by its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenizationActivityTest() throws ApiException {
        UUID activityId = null;
        TokenizationActivityInfo response = api.getTokenizationActivity(activityId);
        // TODO: test validations
    }

    /**
     * Get allowlist activation status
     *
     * This operation retrieves the allowlist activation status of the token contract. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenizationAllowlistActivationTest() throws ApiException {
        String tokenId = null;
        GetTokenizationAllowlistActivation200Response response = api.getTokenizationAllowlistActivation(tokenId);
        // TODO: test validations
    }

    /**
     * Get token details
     *
     * This operation retrieves the detailed information for a specific issued token by its ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenizationInfoTest() throws ApiException {
        String tokenId = null;
        TokenizationTokenDetailInfo response = api.getTokenizationInfo(tokenId);
        // TODO: test validations
    }

    /**
     * Issue token
     *
     * This operation issues a new token contract. It supports various blockchain platforms.  For EVM-based chains, this involves issuing a new smart contract from a template. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueTokenTest() throws ApiException {
        TokenizationIssuedTokenRequest tokenizationIssuedTokenRequest = null;
        TokenizationOperationResponse response = api.issueToken(tokenizationIssuedTokenRequest);
        // TODO: test validations
    }

    /**
     * List issued tokens
     *
     * This operation retrieves a list of tokens issued by the organization. Returns issued token information including total supply, holdings, and token status. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIssuedTokensTest() throws ApiException {
        String chainId = null;
        String tokenId = null;
        TokenizationTokenStandard tokenStandard = null;
        TokenizationStatus status = null;
        Integer limit = null;
        String before = null;
        String after = null;
        TokenizationListTokenInfoResponse response = api.listIssuedTokens(chainId, tokenId, tokenStandard, status, limit, before, after);
        // TODO: test validations
    }

    /**
     * List tokenization activities
     *
     * This operation retrieves a list of tokenization activities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenizationActivitiesTest() throws ApiException {
        String tokenId = null;
        TokenizationOperationType activityType = null;
        TokenizationActivityStatus activityStatus = null;
        Integer limit = null;
        String after = null;
        String before = null;
        String direction = null;
        TokenizationListActivitiesResponse response = api.listTokenizationActivities(tokenId, activityType, activityStatus, limit, after, before, direction);
        // TODO: test validations
    }

    /**
     * List addresses on allowlist
     *
     * This operation lists addresses on the allowlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenizationAllowlistAddressesTest() throws ApiException {
        String tokenId = null;
        Integer limit = null;
        String after = null;
        String before = null;
        String direction = null;
        TokenizationAllowlistAddressesResponse response = api.listTokenizationAllowlistAddresses(tokenId, limit, after, before, direction);
        // TODO: test validations
    }

    /**
     * List addresses on blocklist
     *
     * This operation lists addresses on the blocklist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenizationBlocklistAddressesTest() throws ApiException {
        String tokenId = null;
        Integer limit = null;
        String after = null;
        String before = null;
        String direction = null;
        ListTokenizationBlocklistAddresses200Response response = api.listTokenizationBlocklistAddresses(tokenId, limit, after, before, direction);
        // TODO: test validations
    }

    /**
     * Get token holdings information
     *
     * This operation retrieves the holdings information for a specific issued token, showing which wallets hold the token and their respective balances. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenizationHoldingsTest() throws ApiException {
        String tokenId = null;
        Integer limit = null;
        String before = null;
        String after = null;
        TokenizationListHoldingsResponse response = api.listTokenizationHoldings(tokenId, limit, before, after);
        // TODO: test validations
    }

    /**
     * List supported chains for tokenization
     *
     * This operation retrieves a list of tokenization supported chains. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenizationSupportedChainsTest() throws ApiException {
        Integer limit = null;
        String after = null;
        String before = null;
        TokenizationListEnabledChainsResponse response = api.listTokenizationSupportedChains(limit, after, before);
        // TODO: test validations
    }

    /**
     * Mint tokens
     *
     * This operation mints new tokens to a specified address. Creates a mint transaction that will increase the token supply. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mintTokenizationTest() throws ApiException {
        String tokenId = null;
        TokenizationMintTokenRequest tokenizationMintTokenRequest = null;
        TokenizationOperationResponse response = api.mintTokenization(tokenId, tokenizationMintTokenRequest);
        // TODO: test validations
    }

    /**
     * Pause token contract
     *
     * This operation pauses the token contract, temporarily halting token operations and transfers. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseTokenizationTest() throws ApiException {
        String tokenId = null;
        TokenizationPauseTokenRequest tokenizationPauseTokenRequest = null;
        TokenizationOperationResponse response = api.pauseTokenization(tokenId, tokenizationPauseTokenRequest);
        // TODO: test validations
    }

    /**
     * Call token contract
     *
     * This operation performs a contract call on the token contract. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tokenizationContractCallTest() throws ApiException {
        String tokenId = null;
        TokenizationContractCallRequest tokenizationContractCallRequest = null;
        TokenizationOperationResponse response = api.tokenizationContractCall(tokenId, tokenizationContractCallRequest);
        // TODO: test validations
    }

    /**
     * Unpause token contract
     *
     * This operation unpauses the token contract, resuming token operations and transfers. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpauseTokenizationTest() throws ApiException {
        String tokenId = null;
        TokenizationUnpauseTokenRequest tokenizationUnpauseTokenRequest = null;
        TokenizationOperationResponse response = api.unpauseTokenization(tokenId, tokenizationUnpauseTokenRequest);
        // TODO: test validations
    }

    /**
     * Activate or deactivate allowlist
     *
     * This operation activates or deactivates the allowlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokenizationAllowlistActivationTest() throws ApiException {
        String tokenId = null;
        TokenizationAllowlistActivationRequest tokenizationAllowlistActivationRequest = null;
        TokenizationOperationResponse response = api.updateTokenizationAllowlistActivation(tokenId, tokenizationAllowlistActivationRequest);
        // TODO: test validations
    }

    /**
     * Update addresses on allowlist
     *
     * This operation updates addresses on the allowlist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokenizationAllowlistAddressesTest() throws ApiException {
        String tokenId = null;
        TokenizationUpdateAllowlistAddressesRequest tokenizationUpdateAllowlistAddressesRequest = null;
        TokenizationOperationResponse response = api.updateTokenizationAllowlistAddresses(tokenId, tokenizationUpdateAllowlistAddressesRequest);
        // TODO: test validations
    }

    /**
     * Update addresses on blocklist
     *
     * This operation updates addresses on the blocklist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTokenizationBlocklistAddressesTest() throws ApiException {
        String tokenId = null;
        TokenizationUpdateBlocklistAddressesRequest tokenizationUpdateBlocklistAddressesRequest = null;
        TokenizationOperationResponse response = api.updateTokenizationBlocklistAddresses(tokenId, tokenizationUpdateBlocklistAddressesRequest);
        // TODO: test validations
    }

}
