/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.CreateSwapActivityRequest;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.EstimatedFee;
import com.cobo.waas2.model.ListSwapActivities200Response;
import com.cobo.waas2.model.ListSwapEnabledTokens200Response;
import com.cobo.waas2.model.SwapActivityDetail;
import com.cobo.waas2.model.SwapActivityStatus;
import com.cobo.waas2.model.SwapEstimateFee;
import com.cobo.waas2.model.SwapQuote;
import com.cobo.waas2.model.SwapType;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SwapsApi
 */
@Disabled
public class SwapsApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final SwapsApi api = new SwapsApi();

    /**
     * Create swap activity
     *
     * This operation creates a swap activity. A swap activity can be either a bridge (cross-chain transfer) or an exchange (token-to-token swap on the same chain). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSwapActivityTest() throws ApiException {
        CreateSwapActivityRequest createSwapActivityRequest = null;
        SwapActivityDetail response = api.createSwapActivity(createSwapActivityRequest);
        // TODO: test validations
    }

    /**
     * Estimate swap fee
     *
     * This operation estimates the network fee of a swap activity. You can use this operation to estimate the network fee before initiating swap activities from MPC Wallets or Web3 Wallets.  It requires a valid &#x60;wallet_id&#x60; and &#x60;quote_id&#x60;, so you need to [get a swap quote](https://www.cobo.com/developers/v2/api-references/swaps/get-swap-quote) first. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void estimateSwapFeeTest() throws ApiException {
        SwapEstimateFee swapEstimateFee = null;
        EstimatedFee response = api.estimateSwapFee(swapEstimateFee);
        // TODO: test validations
    }

    /**
     * Get swap activity
     *
     * This operation retrieves detailed information about a specified swap activity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwapActivityTest() throws ApiException {
        String activityId = null;
        SwapActivityDetail response = api.getSwapActivity(activityId);
        // TODO: test validations
    }

    /**
     * Get swap quote
     *
     * This operation retrieves the current market exchange rate and estimated service fee. You need to provide &#x60;wallet_id&#x60;, &#x60;pay_token_id&#x60;, and &#x60;receive_token_id&#x60;, along with either &#x60;pay_amount&#x60; or &#x60;receive_amount&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwapQuoteTest() throws ApiException {
        UUID walletId = null;
        String payTokenId = null;
        String receiveTokenId = null;
        String payAmount = null;
        String receiveAmount = null;
        SwapQuote response = api.getSwapQuote(walletId, payTokenId, receiveTokenId, payAmount, receiveAmount);
        // TODO: test validations
    }

    /**
     * List swap activities
     *
     * This operation retrieves a list of swap activities. You can filter the results by swap type, status, initiator, and time range. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSwapActivitiesTest() throws ApiException {
        SwapType type = null;
        SwapActivityStatus status = null;
        Long minUpdatedTimestamp = null;
        Long maxUpdatedTimestamp = null;
        String initiator = null;
        Integer limit = null;
        String before = null;
        String after = null;
        String sortBy = null;
        String direction = null;
        ListSwapActivities200Response response = api.listSwapActivities(type, status, minUpdatedTimestamp, maxUpdatedTimestamp, initiator, limit, before, after, sortBy, direction);
        // TODO: test validations
    }

    /**
     * List enabled tokens for swap
     *
     * This operation retrieves a list of tokens that are enabled for the swap feature. You can filter the results by swap type, asset ID, and chain ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSwapEnabledTokensTest() throws ApiException {
        SwapType type = null;
        String assetId = null;
        String chainId = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListSwapEnabledTokens200Response response = api.listSwapEnabledTokens(type, assetId, chainId, limit, before, after);
        // TODO: test validations
    }

}
