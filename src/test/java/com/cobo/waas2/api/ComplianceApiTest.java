/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.DispositionQueryResponse;
import com.cobo.waas2.model.DispositionResponse;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.IsolateDisposition;
import com.cobo.waas2.model.RefundDisposition;
import java.util.UUID;
import com.cobo.waas2.model.UnfreezeDisposition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComplianceApi
 */
@Disabled
public class ComplianceApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final ComplianceApi api = new ComplianceApi();

    /**
     * Get disposition status
     *
     * This operation retrieves the current status of a disposition request for a specific transaction.  You can use this endpoint to check the status of any disposition operation (Refund, Isolate, or Unfreeze)  that has been initiated for a transaction. The response includes the disposition type, current status,  and the disposition transaction ID if applicable.  &lt;Note&gt;Use this endpoint to monitor the progress of disposition operations and verify their completion.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDispositionStatusTest() throws ApiException {
        UUID transactionId = null;
        DispositionQueryResponse response = api.getDispositionStatus(transactionId);
        // TODO: test validations
    }

    /**
     * Isolate funds
     *
     * This operation creates a request to isolate funds for a specific transaction. The funds will be sent to a designated isolation address for compliance purposes.  You need to specify the transaction ID to be isolated and the destination address.  Optional parameters include custom categories for tracking purposes.  &lt;Note&gt;The isolation will initiate a withdrawal transaction from the compliance-managed address to the specified isolation address.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isolateFundsTest() throws ApiException {
        IsolateDisposition isolateDisposition = null;
        DispositionResponse response = api.isolateFunds(isolateDisposition);
        // TODO: test validations
    }

    /**
     * Refund funds
     *
     * This operation creates a request to refund funds for a specific transaction. The funds will be sent to the specified destination address.  You need to specify the transaction ID to be refunded and the destination address.  Optional parameters include custom categories for tracking purposes.  &lt;Note&gt;The refund will initiate a withdrawal transaction from the compliance-managed address to the specified destination.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refundFundsTest() throws ApiException {
        RefundDisposition refundDisposition = null;
        DispositionResponse response = api.refundFunds(refundDisposition);
        // TODO: test validations
    }

    /**
     * Unfreeze frozen funds
     *
     * This operation creates a request to unfreeze funds for a previously frozen transaction. It releases the frozen funds back to their original state.  You only need to specify the transaction ID to be unfrozen. Once unfrozen, the funds will be available for normal operations.  &lt;Note&gt;The unfreeze process will release the compliance hold on the transaction, allowing it to proceed normally.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfreezeFundsTest() throws ApiException {
        UnfreezeDisposition unfreezeDisposition = null;
        DispositionResponse response = api.unfreezeFunds(unfreezeDisposition);
        // TODO: test validations
    }

}
