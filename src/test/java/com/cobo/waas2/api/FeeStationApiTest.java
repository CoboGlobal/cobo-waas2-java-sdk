/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.ListAddresses200Response;
import com.cobo.waas2.model.ListTokenBalancesForAddress200Response;
import com.cobo.waas2.model.ListTransactions200Response;
import com.cobo.waas2.model.TransactionDetail;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FeeStationApi
 */
@Disabled
public class FeeStationApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final FeeStationApi api = new FeeStationApi();

    /**
     * Get fee station transaction information
     *
     * This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeeStationTransactionByIdTest() throws ApiException {
        UUID transactionId = null;
        TransactionDetail response = api.getFeeStationTransactionById(transactionId);
        // TODO: test validations
    }

    /**
     * List fee station addresses
     *
     * This operation retrieves a list of addresses within a specified wallet. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeeStationAddressesTest() throws ApiException {
        String chainIds = null;
        String addresses = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListAddresses200Response response = api.listFeeStationAddresses(chainIds, addresses, limit, before, after);
        // TODO: test validations
    }

    /**
     * List all fee station transactions
     *
     * This operation retrieves all the transactions under your organization.  You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeeStationTransactionsTest() throws ApiException {
        String requestId = null;
        String coboIds = null;
        String transactionIds = null;
        String transactionHashes = null;
        String types = null;
        String statuses = null;
        String chainIds = null;
        String tokenIds = null;
        String assetIds = null;
        Long minCreatedTimestamp = null;
        Long maxCreatedTimestamp = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListTransactions200Response response = api.listFeeStationTransactions(requestId, coboIds, transactionIds, transactionHashes, types, statuses, chainIds, tokenIds, assetIds, minCreatedTimestamp, maxCreatedTimestamp, limit, before, after);
        // TODO: test validations
    }

    /**
     * List token balances by fee station
     *
     * The operation retrieves a list of token balances within a specified wallet.  &lt;Note&gt;This operation is not applicable to Exchange Wallets.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenBalancesForFeeStationTest() throws ApiException {
        String tokenIds = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListTokenBalancesForAddress200Response response = api.listTokenBalancesForFeeStation(tokenIds, limit, before, after);
        // TODO: test validations
    }

}
