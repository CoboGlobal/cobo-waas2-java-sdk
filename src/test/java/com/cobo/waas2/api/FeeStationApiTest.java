/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.EstimatedFixedFee;
import com.cobo.waas2.model.FeeStationTransfer;
import com.cobo.waas2.model.ListAddresses200Response;
import com.cobo.waas2.model.ListTokenBalancesForFeeStation200Response;
import com.cobo.waas2.model.ListTransactions200Response;
import com.cobo.waas2.model.TransactionDetail;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FeeStationApi
 */
@Disabled
public class FeeStationApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final FeeStationApi api = new FeeStationApi();

    /**
     * Estimate transaction fee
     *
     * This operation estimates the transaction fee of a token transfer based on the fee model that the chain uses, considering factors such as network congestion and transaction complexity.  You need to specify the transaction information, including destination address, token ID.  The response can contain different properties based on the transaction fee model used by the chain. For the legacy, EIP-1559, and UTXO fee models, Cobo also supports three different transaction speed levels: slow, recommended, and fast. For more information about estimating transaction fees, refer to [Estimate transaction fee](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void estimateFeeStationFeeTest() throws ApiException {
        FeeStationTransfer feeStationTransfer = null;
        EstimatedFixedFee response = api.estimateFeeStationFee(feeStationTransfer);
        // TODO: test validations
    }

    /**
     * Get Fee Station transaction information
     *
     * This operation retrieves detailed information about a specified Fee Station transaction, such as the transaction status, source address, destination address, and timestamp. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeeStationTransactionByIdTest() throws ApiException {
        UUID transactionId = null;
        TransactionDetail response = api.getFeeStationTransactionById(transactionId);
        // TODO: test validations
    }

    /**
     * List Fee Station addresses
     *
     * This operation retrieves a list of addresses within your Fee Station. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeeStationAddressesTest() throws ApiException {
        String chainIds = null;
        String addresses = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListAddresses200Response response = api.listFeeStationAddresses(chainIds, addresses, limit, before, after);
        // TODO: test validations
    }

    /**
     * List all Fee Station transactions
     *
     * This operation retrieves all Fee Station transactions under your organization.  You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamp. You can also paginate and sort your query results. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeeStationTransactionsTest() throws ApiException {
        String requestId = null;
        String coboIds = null;
        String transactionIds = null;
        String transactionHashes = null;
        String types = null;
        String statuses = null;
        String chainIds = null;
        String tokenIds = null;
        String assetIds = null;
        Long minCreatedTimestamp = null;
        Long maxCreatedTimestamp = null;
        Integer limit = null;
        String before = null;
        String after = null;
        String direction = null;
        ListTransactions200Response response = api.listFeeStationTransactions(requestId, coboIds, transactionIds, transactionHashes, types, statuses, chainIds, tokenIds, assetIds, minCreatedTimestamp, maxCreatedTimestamp, limit, before, after, direction);
        // TODO: test validations
    }

    /**
     * List Fee Station token balances
     *
     * The operation retrieves a list of token balances within your Fee Station. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokenBalancesForFeeStationTest() throws ApiException {
        String tokenIds = null;
        Integer limit = null;
        String before = null;
        String after = null;
        ListTokenBalancesForFeeStation200Response response = api.listTokenBalancesForFeeStation(tokenIds, limit, before, after);
        // TODO: test validations
    }

}
