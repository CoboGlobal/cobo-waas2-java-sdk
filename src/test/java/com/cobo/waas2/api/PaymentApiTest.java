/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.AcquiringType;
import com.cobo.waas2.model.BankAccount;
import com.cobo.waas2.model.CreateBankAccountRequest;
import com.cobo.waas2.model.CreateCryptoAddressRequest;
import com.cobo.waas2.model.CreateMerchantRequest;
import com.cobo.waas2.model.CreatePaymentOrderRequest;
import com.cobo.waas2.model.CreateRefundRequest;
import com.cobo.waas2.model.CreateSettlementRequestRequest;
import com.cobo.waas2.model.CryptoAddress;
import com.cobo.waas2.model.DeleteCryptoAddress201Response;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.ForcedSweep;
import com.cobo.waas2.model.ForcedSweepRequest;
import com.cobo.waas2.model.GetExchangeRate200Response;
import com.cobo.waas2.model.GetRefunds200Response;
import com.cobo.waas2.model.GetSettlementInfoByIds200Response;
import com.cobo.waas2.model.ListForcedSweepRequests200Response;
import com.cobo.waas2.model.ListMerchantBalances200Response;
import com.cobo.waas2.model.ListMerchants200Response;
import com.cobo.waas2.model.ListPaymentOrders200Response;
import com.cobo.waas2.model.ListPaymentWalletBalances200Response;
import com.cobo.waas2.model.ListSettlementDetails200Response;
import com.cobo.waas2.model.ListSettlementRequests200Response;
import com.cobo.waas2.model.ListSubscriptionActions200Response;
import com.cobo.waas2.model.ListSubscriptionPlans200Response;
import com.cobo.waas2.model.ListSubscriptions200Response;
import com.cobo.waas2.model.ListTopUpPayerAccounts200Response;
import com.cobo.waas2.model.ListTopUpPayers200Response;
import com.cobo.waas2.model.Merchant;
import com.cobo.waas2.model.Order;
import com.cobo.waas2.model.PaymentCreateSubscriptionAction;
import com.cobo.waas2.model.PaymentCreateSubscriptionPlan;
import com.cobo.waas2.model.PaymentEstimateFee201Response;
import com.cobo.waas2.model.PaymentEstimateFeeRequest;
import com.cobo.waas2.model.PaymentSubscriptionAction;
import com.cobo.waas2.model.PaymentSubscriptionActionType;
import com.cobo.waas2.model.PaymentSubscriptionDetail;
import com.cobo.waas2.model.PaymentSubscriptionPlan;
import com.cobo.waas2.model.PaymentSubscriptionPlanDetail;
import com.cobo.waas2.model.PspBalance;
import com.cobo.waas2.model.ReceivedAmountPerAddress;
import com.cobo.waas2.model.Refund;
import com.cobo.waas2.model.Settlement;
import com.cobo.waas2.model.SupportedToken;
import com.cobo.waas2.model.TopUpAddress;
import java.util.UUID;
import com.cobo.waas2.model.UpdateBankAccountByIdRequest;
import com.cobo.waas2.model.UpdateMerchantByIdRequest;
import com.cobo.waas2.model.UpdatePaymentOrderRequest;
import com.cobo.waas2.model.UpdateRefundByIdRequest;
import com.cobo.waas2.model.UpdateTopUpAddress;
import com.cobo.waas2.model.WalletSetup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final PaymentApi api = new PaymentApi();

    /**
     * Cancel refund order
     *
     * This operation cancels a specified refund order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelRefundByIdTest() throws ApiException {
        String refundId = null;
        Refund response = api.cancelRefundById(refundId);
        // TODO: test validations
    }

    /**
     * Create bank account
     *
     * This operation registers a bank account for payment settlement.  Upon successful registration, the bank account details can be retrieved using the assigned bank account ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankAccountTest() throws ApiException {
        CreateBankAccountRequest createBankAccountRequest = null;
        BankAccount response = api.createBankAccount(createBankAccountRequest);
        // TODO: test validations
    }

    /**
     * Create crypto address
     *
     * Create a new cryptocurrency address for receiving payouts or transfers.  The address must match the specified &#x60;token_id&#x60;&#39;s blockchain.  Optionally, a label can be provided to help categorize the address internally. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCryptoAddressTest() throws ApiException {
        CreateCryptoAddressRequest createCryptoAddressRequest = null;
        CryptoAddress response = api.createCryptoAddress(createCryptoAddressRequest);
        // TODO: test validations
    }

    /**
     * Create force sweep request
     *
     * This operation creates a force sweep request to settle or refund available balances.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createForcedSweepRequestTest() throws ApiException {
        ForcedSweepRequest forcedSweepRequest = null;
        ForcedSweep response = api.createForcedSweepRequest(forcedSweepRequest);
        // TODO: test validations
    }

    /**
     * Create merchant
     *
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant&#39;s information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMerchantTest() throws ApiException {
        CreateMerchantRequest createMerchantRequest = null;
        Merchant response = api.createMerchant(createMerchantRequest);
        // TODO: test validations
    }

    /**
     * Create pay-in order
     *
     * This operation creates a pay-in order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentOrderTest() throws ApiException {
        CreatePaymentOrderRequest createPaymentOrderRequest = null;
        Order response = api.createPaymentOrder(createPaymentOrderRequest);
        // TODO: test validations
    }

    /**
     * Create refund order
     *
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        CreateRefundRequest createRefundRequest = null;
        Refund response = api.createRefund(createRefundRequest);
        // TODO: test validations
    }

    /**
     * Create settlement request
     *
     * This operation creates a settlement request to withdraw available balances.   You can include multiple merchants and cryptocurrencies in a single settlement request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSettlementRequestTest() throws ApiException {
        CreateSettlementRequestRequest createSettlementRequestRequest = null;
        Settlement response = api.createSettlementRequest(createSettlementRequestRequest);
        // TODO: test validations
    }

    /**
     * Create a subscription action
     *
     * This operation creates a subscription action. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionActionTest() throws ApiException {
        PaymentCreateSubscriptionAction paymentCreateSubscriptionAction = null;
        PaymentSubscriptionAction response = api.createSubscriptionAction(paymentCreateSubscriptionAction);
        // TODO: test validations
    }

    /**
     * Create subscription plan
     *
     * This operation creates a subscription plan. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionPlanTest() throws ApiException {
        PaymentCreateSubscriptionPlan paymentCreateSubscriptionPlan = null;
        PaymentSubscriptionPlan response = api.createSubscriptionPlan(paymentCreateSubscriptionPlan);
        // TODO: test validations
    }

    /**
     * Delete crypto address
     *
     * This operation deletes a crypto address. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCryptoAddressTest() throws ApiException {
        String cryptoAddressId = null;
        DeleteCryptoAddress201Response response = api.deleteCryptoAddress(cryptoAddressId);
        // TODO: test validations
    }

    /**
     * Get exchange rate
     *
     * This operation retrieves the current exchange rate between a specified currency pair. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExchangeRateTest() throws ApiException {
        String tokenId = null;
        String currency = null;
        GetExchangeRate200Response response = api.getExchangeRate(tokenId, currency);
        // TODO: test validations
    }

    /**
     * Get payer balance by address
     *
     * This operation retrieves aggregated balance details for a specific token and payer, with amounts grouped by address. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayerBalanceByAddressTest() throws ApiException {
        String payerId = null;
        String tokenId = null;
        String merchantId = null;
        List<ReceivedAmountPerAddress> response = api.getPayerBalanceByAddress(payerId, tokenId, merchantId);
        // TODO: test validations
    }

    /**
     * Get pay-in order information
     *
     * This operation retrieves details of a specific pay-in order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentOrderDetailByIdTest() throws ApiException {
        String orderId = null;
        Order response = api.getPaymentOrderDetailById(orderId);
        // TODO: test validations
    }

    /**
     * Get psp balance
     *
     * This operation retrieves the information of psp balance. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPspBalanceTest() throws ApiException {
        String tokenId = null;
        PspBalance response = api.getPspBalance(tokenId);
        // TODO: test validations
    }

    /**
     * Get refund order information
     *
     * This operation retrieves the detailed information about a specified refund order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundDetailByIdTest() throws ApiException {
        String refundId = null;
        Refund response = api.getRefundDetailById(refundId);
        // TODO: test validations
    }

    /**
     * List all refund orders
     *
     * This operation retrieves the information of all refund orders. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String requestId = null;
        String statuses = null;
        GetRefunds200Response response = api.getRefunds(limit, before, after, merchantId, requestId, statuses);
        // TODO: test validations
    }

    /**
     * Get settlement request information
     *
     * This operation retrieves the information of a specific settlement request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementByIdTest() throws ApiException {
        String settlementRequestId = null;
        Settlement response = api.getSettlementById(settlementRequestId);
        // TODO: test validations
    }

    /**
     * Get withdrawable balances
     *
     * This operation retrieves the current withdrawable balances of specified merchants or the developer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementInfoByIdsTest() throws ApiException {
        String merchantIds = null;
        String currency = null;
        AcquiringType acquiringType = null;
        GetSettlementInfoByIds200Response response = api.getSettlementInfoByIds(merchantIds, currency, acquiringType);
        // TODO: test validations
    }

    /**
     * Get subscription by id
     *
     * This operation retrieves the information of subscription detail. You can filter the result by subscription_id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionByIdTest() throws ApiException {
        String subscriptionId = null;
        PaymentSubscriptionDetail response = api.getSubscriptionById(subscriptionId);
        // TODO: test validations
    }

    /**
     * Get subscription plan by id
     *
     * This operation retrieves the information of subscription plan detail. You can filter the result by subscription_id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionPlanByIdTest() throws ApiException {
        String subscriptionId = null;
        String tokenId = null;
        PaymentSubscriptionPlanDetail response = api.getSubscriptionPlanById(subscriptionId, tokenId);
        // TODO: test validations
    }

    /**
     * Get top-up address
     *
     * Get a top-up address for certain payer under merchant. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopUpAddressTest() throws ApiException {
        String tokenId = null;
        String customPayerId = null;
        String merchantId = null;
        TopUpAddress response = api.getTopUpAddress(tokenId, customPayerId, merchantId);
        // TODO: test validations
    }

    /**
     * List all bank accounts
     *
     * This operation retrieves the information of all bank accounts registered. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBankAccountsTest() throws ApiException {
        List<BankAccount> response = api.listBankAccounts();
        // TODO: test validations
    }

    /**
     * List crypto addresses
     *
     * Retrieve a list of cryptocurrency addresses previously created for a given &#x60;token_id&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCryptoAddressesTest() throws ApiException {
        String tokenId = null;
        List<CryptoAddress> response = api.listCryptoAddresses(tokenId);
        // TODO: test validations
    }

    /**
     * List force sweep requests
     *
     * This operation retrieves the information of force_sweep requests. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listForcedSweepRequestsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String requestId = null;
        ListForcedSweepRequests200Response response = api.listForcedSweepRequests(limit, before, after, requestId);
        // TODO: test validations
    }

    /**
     * List merchant balances
     *
     * This operation retrieves the information of merchant balances. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMerchantBalancesTest() throws ApiException {
        String tokenId = null;
        AcquiringType acquiringType = null;
        String merchantIds = null;
        ListMerchantBalances200Response response = api.listMerchantBalances(tokenId, acquiringType, merchantIds);
        // TODO: test validations
    }

    /**
     * List all merchants
     *
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMerchantsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String keyword = null;
        WalletSetup walletSetup = null;
        ListMerchants200Response response = api.listMerchants(limit, before, after, keyword, walletSetup);
        // TODO: test validations
    }

    /**
     * List all pay-in orders
     *
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentOrdersTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String pspOrderId = null;
        String statuses = null;
        ListPaymentOrders200Response response = api.listPaymentOrders(limit, before, after, merchantId, pspOrderId, statuses);
        // TODO: test validations
    }

    /**
     * List all supported tokens
     *
     * This operation retrieves the information of all supported tokens. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentSupportedTokensTest() throws ApiException {
        List<SupportedToken> response = api.listPaymentSupportedTokens();
        // TODO: test validations
    }

    /**
     * List payment wallet balances
     *
     * This operation retrieves the information of payment wallet balances. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentWalletBalancesTest() throws ApiException {
        String tokenId = null;
        String walletIds = null;
        ListPaymentWalletBalances200Response response = api.listPaymentWalletBalances(tokenId, walletIds);
        // TODO: test validations
    }

    /**
     * List all settlement details
     *
     * This operation retrieves the information of all settlement details. You can filter the result by merchant ID or status. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementDetailsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String statuses = null;
        ListSettlementDetails200Response response = api.listSettlementDetails(limit, before, after, merchantId, statuses);
        // TODO: test validations
    }

    /**
     * List all settlement requests
     *
     * This operation retrieves the information of all settlement requests. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementRequestsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String requestId = null;
        ListSettlementRequests200Response response = api.listSettlementRequests(limit, before, after, requestId);
        // TODO: test validations
    }

    /**
     * List subscription actions
     *
     * This operation retrieves the information of subscription actions. You can filter the result by plan id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscriptionActionsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String planId = null;
        String merchantId = null;
        String subscriptionId = null;
        String requestId = null;
        PaymentSubscriptionActionType actionType = null;
        ListSubscriptionActions200Response response = api.listSubscriptionActions(limit, before, after, planId, merchantId, subscriptionId, requestId, actionType);
        // TODO: test validations
    }

    /**
     * List subscription plans
     *
     * This operation retrieves the information of subscription plans. You can filter the result by developer plan id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscriptionPlansTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String developerPlanId = null;
        ListSubscriptionPlans200Response response = api.listSubscriptionPlans(limit, before, after, developerPlanId);
        // TODO: test validations
    }

    /**
     * List subscriptions
     *
     * This operation retrieves the information of subscriptions. You can filter the result by plan id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscriptionsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String planId = null;
        String merchantId = null;
        String subscriptionActionId = null;
        ListSubscriptions200Response response = api.listSubscriptions(limit, before, after, planId, merchantId, subscriptionActionId);
        // TODO: test validations
    }

    /**
     * List top-up payer accounts
     *
     * This operation retrieves the accounts of all payers. You can filter the result by merchant ID and payer_id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTopUpPayerAccountsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String payerId = null;
        ListTopUpPayerAccounts200Response response = api.listTopUpPayerAccounts(limit, before, after, merchantId, payerId);
        // TODO: test validations
    }

    /**
     * List top-up payers
     *
     * This operation retrieves the information of all payers. You can filter the result by merchant ID and payer_id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTopUpPayersTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String payerId = null;
        ListTopUpPayers200Response response = api.listTopUpPayers(limit, before, after, merchantId, payerId);
        // TODO: test validations
    }

    /**
     * Payment estimate fee
     *
     * This operation to payment estimate fee. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentEstimateFeeTest() throws ApiException {
        PaymentEstimateFeeRequest paymentEstimateFeeRequest = null;
        PaymentEstimateFee201Response response = api.paymentEstimateFee(paymentEstimateFeeRequest);
        // TODO: test validations
    }

    /**
     * Update bank account
     *
     * This operation updates the information of an existing bank account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankAccountByIdTest() throws ApiException {
        UUID bankAccountId = null;
        UpdateBankAccountByIdRequest updateBankAccountByIdRequest = null;
        BankAccount response = api.updateBankAccountById(bankAccountId, updateBankAccountByIdRequest);
        // TODO: test validations
    }

    /**
     * Update merchant
     *
     * This operation updates the information of an existing merchant. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMerchantByIdTest() throws ApiException {
        String merchantId = null;
        UpdateMerchantByIdRequest updateMerchantByIdRequest = null;
        Merchant response = api.updateMerchantById(merchantId, updateMerchantByIdRequest);
        // TODO: test validations
    }

    /**
     * Update pay-in order
     *
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentOrderTest() throws ApiException {
        String orderId = null;
        UpdatePaymentOrderRequest updatePaymentOrderRequest = null;
        Order response = api.updatePaymentOrder(orderId, updatePaymentOrderRequest);
        // TODO: test validations
    }

    /**
     * Update refund order information
     *
     * This operation updates a specified refund order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRefundByIdTest() throws ApiException {
        String refundId = null;
        UpdateRefundByIdRequest updateRefundByIdRequest = null;
        Refund response = api.updateRefundById(refundId, updateRefundByIdRequest);
        // TODO: test validations
    }

    /**
     * Update top-up address
     *
     * Update the top-up address for a payer under a specific merchant and token. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTopUpAddressTest() throws ApiException {
        UpdateTopUpAddress updateTopUpAddress = null;
        TopUpAddress response = api.updateTopUpAddress(updateTopUpAddress);
        // TODO: test validations
    }

}
