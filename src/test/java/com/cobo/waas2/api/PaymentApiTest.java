/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.BankAccount;
import com.cobo.waas2.model.CreateBankAccountRequest;
import com.cobo.waas2.model.CreateMerchantRequest;
import com.cobo.waas2.model.CreatePaymentOrderRequest;
import com.cobo.waas2.model.CreateRefundRequest;
import com.cobo.waas2.model.CreateSettlementRequestRequest;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.GetFiatRate200Response;
import com.cobo.waas2.model.GetRefunds200Response;
import com.cobo.waas2.model.GetSettlementInfoByIds200Response;
import com.cobo.waas2.model.ListMerchants200Response;
import com.cobo.waas2.model.ListPaymentOrders200Response;
import com.cobo.waas2.model.ListSettlementRequests200Response;
import com.cobo.waas2.model.Merchant;
import com.cobo.waas2.model.Order;
import com.cobo.waas2.model.Refund;
import com.cobo.waas2.model.Settlement;
import java.util.UUID;
import com.cobo.waas2.model.UpdateMerchantByIdRequest;
import com.cobo.waas2.model.UpdatePaymentOrderRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final PaymentApi api = new PaymentApi();

    /**
     * Create a new bank account
     *
     * This operation registers a new bank account for a PSP. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankAccountTest() throws ApiException {
        CreateBankAccountRequest createBankAccountRequest = null;
        BankAccount response = api.createBankAccount(createBankAccountRequest);
        // TODO: test validations
    }

    /**
     * Create new merchant for payment service provider
     *
     * This operation creates new merchant. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMerchantTest() throws ApiException {
        CreateMerchantRequest createMerchantRequest = null;
        Merchant response = api.createMerchant(createMerchantRequest);
        // TODO: test validations
    }

    /**
     * Create a new payment order
     *
     * This operation creates a new cryptocurrency payment order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentOrderTest() throws ApiException {
        CreatePaymentOrderRequest createPaymentOrderRequest = null;
        Order response = api.createPaymentOrder(createPaymentOrderRequest);
        // TODO: test validations
    }

    /**
     * Create a refund transaction
     *
     * This operation creates a refund, optionally linked to a specific order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        CreateRefundRequest createRefundRequest = null;
        Refund response = api.createRefund(createRefundRequest);
        // TODO: test validations
    }

    /**
     * Create a new settlement request
     *
     * This operation creates a new settlement request for multiple merchants. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSettlementRequestTest() throws ApiException {
        CreateSettlementRequestRequest createSettlementRequestRequest = null;
        Settlement response = api.createSettlementRequest(createSettlementRequestRequest);
        // TODO: test validations
    }

    /**
     * Get fiat exchange rate for a cryptocurrency
     *
     * This endpoint returns the current exchange rate of a specified cryptocurrency token to a fiat currency. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFiatRateTest() throws ApiException {
        String tokenId = null;
        String fiatCurrency = null;
        GetFiatRate200Response response = api.getFiatRate(tokenId, fiatCurrency);
        // TODO: test validations
    }

    /**
     * Retrieve a specific payment order
     *
     * This operation retrieves details of a specific payment order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentOrderDetailByIdTest() throws ApiException {
        String orderId = null;
        Order response = api.getPaymentOrderDetailById(orderId);
        // TODO: test validations
    }

    /**
     * Retrieve a specific refund
     *
     * This operation retrieves details of a specific refund. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundDetailByIdTest() throws ApiException {
        String refundId = null;
        Refund response = api.getRefundDetailById(refundId);
        // TODO: test validations
    }

    /**
     * Get refunds
     *
     * This operation retrieves a list of refunds. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String refundId = null;
        GetRefunds200Response response = api.getRefunds(limit, before, after, refundId);
        // TODO: test validations
    }

    /**
     * Retrieve available settlement amounts
     *
     * This endpoint returns the available settlement amounts for multiple merchants. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementInfoByIdsTest() throws ApiException {
        String merchantIds = null;
        GetSettlementInfoByIds200Response response = api.getSettlementInfoByIds(merchantIds);
        // TODO: test validations
    }

    /**
     * Retrieve a list of PSP bank accounts
     *
     * This operation returns a list of bank accounts registered for the payment service provider. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBankAccountsTest() throws ApiException {
        List<BankAccount> response = api.listBankAccounts();
        // TODO: test validations
    }

    /**
     * Retrieve a list of merchants
     *
     * This operation returns a paginated list of merchants registered under the payment service provider. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMerchantsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String keyword = null;
        UUID walletId = null;
        ListMerchants200Response response = api.listMerchants(limit, before, after, keyword, walletId);
        // TODO: test validations
    }

    /**
     * Retrieve a list of payment orders
     *
     * This operation returns a paginated list of payment orders. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentOrdersTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        ListPaymentOrders200Response response = api.listPaymentOrders(limit, before, after, merchantId);
        // TODO: test validations
    }

    /**
     * Retrieve settlement request detail list
     *
     * This endpoint returns list of settlement requests. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementRequestsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String requestId = null;
        ListSettlementRequests200Response response = api.listSettlementRequests(limit, before, after, requestId);
        // TODO: test validations
    }

    /**
     * Update an existing bank account
     *
     * This operation updates the information of an existing PSP bank account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankAccountByIdTest() throws ApiException {
        UUID bankAccountId = null;
        CreateBankAccountRequest createBankAccountRequest = null;
        BankAccount response = api.updateBankAccountById(bankAccountId, createBankAccountRequest);
        // TODO: test validations
    }

    /**
     * Update an existing merchant
     *
     * This operation updates the name or wallet ID of an existing merchant under the payment service provider. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMerchantByIdTest() throws ApiException {
        String merchantId = null;
        UpdateMerchantByIdRequest updateMerchantByIdRequest = null;
        Merchant response = api.updateMerchantById(merchantId, updateMerchantByIdRequest);
        // TODO: test validations
    }

    /**
     * Update a payment order
     *
     * This operation allows updating an order, such as expiring it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentOrderTest() throws ApiException {
        String orderId = null;
        UpdatePaymentOrderRequest updatePaymentOrderRequest = null;
        Order response = api.updatePaymentOrder(orderId, updatePaymentOrderRequest);
        // TODO: test validations
    }

}
