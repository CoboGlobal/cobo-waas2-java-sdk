/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.AcquiringType;
import com.cobo.waas2.model.BankAccount;
import com.cobo.waas2.model.CreateCryptoAddressRequest;
import com.cobo.waas2.model.CreateMerchantRequest;
import com.cobo.waas2.model.CreateOrderLinkRequest;
import com.cobo.waas2.model.CreatePaymentOrderRequest;
import com.cobo.waas2.model.CreateRefundRequest;
import com.cobo.waas2.model.CreateSettlementRequestRequest;
import com.cobo.waas2.model.CryptoAddress;
import com.cobo.waas2.model.DeleteCryptoAddress201Response;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.ForcedSweep;
import com.cobo.waas2.model.ForcedSweepRequest;
import com.cobo.waas2.model.GetExchangeRate200Response;
import com.cobo.waas2.model.GetRefunds200Response;
import com.cobo.waas2.model.GetSettlementInfoByIds200Response;
import com.cobo.waas2.model.Link;
import com.cobo.waas2.model.ListForcedSweepRequests200Response;
import com.cobo.waas2.model.ListMerchantBalances200Response;
import com.cobo.waas2.model.ListMerchants200Response;
import com.cobo.waas2.model.ListPaymentOrders200Response;
import com.cobo.waas2.model.ListPaymentWalletBalances200Response;
import com.cobo.waas2.model.ListSettlementDetails200Response;
import com.cobo.waas2.model.ListSettlementRequests200Response;
import com.cobo.waas2.model.ListTopUpPayerAccounts200Response;
import com.cobo.waas2.model.ListTopUpPayers200Response;
import com.cobo.waas2.model.Merchant;
import com.cobo.waas2.model.Order;
import com.cobo.waas2.model.PaymentEstimateFee201Response;
import com.cobo.waas2.model.PaymentEstimateFeeRequest;
import com.cobo.waas2.model.PspBalance;
import com.cobo.waas2.model.ReceivedAmountPerAddress;
import com.cobo.waas2.model.Refund;
import com.cobo.waas2.model.Settlement;
import com.cobo.waas2.model.SupportedToken;
import com.cobo.waas2.model.TopUpAddress;
import java.util.UUID;
import com.cobo.waas2.model.UpdateBankAccountByIdRequest;
import com.cobo.waas2.model.UpdateMerchantByIdRequest;
import com.cobo.waas2.model.UpdatePaymentOrderRequest;
import com.cobo.waas2.model.UpdateRefundByIdRequest;
import com.cobo.waas2.model.UpdateTopUpAddress;
import com.cobo.waas2.model.WalletSetup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final PaymentApi api = new PaymentApi();

    /**
     * Cancel refund order
     *
     * This operation cancels a specified refund order. You can only cancel refund orders that have not been processed yet. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelRefundByIdTest() throws ApiException {
        String refundId = null;
        Refund response = api.cancelRefundById(refundId);
        // TODO: test validations
    }

    /**
     * Create crypto address
     *
     * This operation registers a crypto address for crypto payouts.  The registered address can later be referenced by its ID when creating settlement requests. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCryptoAddressTest() throws ApiException {
        CreateCryptoAddressRequest createCryptoAddressRequest = null;
        CryptoAddress response = api.createCryptoAddress(createCryptoAddressRequest);
        // TODO: test validations
    }

    /**
     * Create forced sweep
     *
     * &lt;Warning&gt;This operation has been deprecated.&lt;/Warning&gt; This operation creates a forced sweep to transfer funds from addresses within a specified wallet to its designated sweep-to address. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createForcedSweepRequestTest() throws ApiException {
        ForcedSweepRequest forcedSweepRequest = null;
        ForcedSweep response = api.createForcedSweepRequest(forcedSweepRequest);
        // TODO: test validations
    }

    /**
     * Create merchant
     *
     * This operation creates a merchant. Upon successful creation, a merchant ID is generated and returned along with the merchant&#39;s information. For more information on merchant creation, please refer to [Preparation](https://www.cobo.com/developers/v2/payments/preparation#create-merchant). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMerchantTest() throws ApiException {
        CreateMerchantRequest createMerchantRequest = null;
        Merchant response = api.createMerchant(createMerchantRequest);
        // TODO: test validations
    }

    /**
     * Create order link
     *
     * This operation generates a payment link for a pay-in order. The link directs users to a hosted payment page where they can complete their payment for the order. You can share the link directly with users or embed the payment page in your website or application using an iframe.  For more details, see [Payment Link](https://www.cobo.com/developers/v2/payments/payment-link). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderLinkTest() throws ApiException {
        CreateOrderLinkRequest createOrderLinkRequest = null;
        Link response = api.createOrderLink(createOrderLinkRequest);
        // TODO: test validations
    }

    /**
     * Create pay-in order
     *
     * This operation creates a pay-in order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentOrderTest() throws ApiException {
        CreatePaymentOrderRequest createPaymentOrderRequest = null;
        Order response = api.createPaymentOrder(createPaymentOrderRequest);
        // TODO: test validations
    }

    /**
     * Create refund order
     *
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        CreateRefundRequest createRefundRequest = null;
        Refund response = api.createRefund(createRefundRequest);
        // TODO: test validations
    }

    /**
     * Create settlement request
     *
     * This operation creates a settlement request to withdraw available balances. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSettlementRequestTest() throws ApiException {
        CreateSettlementRequestRequest createSettlementRequestRequest = null;
        Settlement response = api.createSettlementRequest(createSettlementRequestRequest);
        // TODO: test validations
    }

    /**
     * Delete crypto address
     *
     * This operation unregisters a crypto address from being used for crypto payouts. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCryptoAddressTest() throws ApiException {
        String cryptoAddressId = null;
        DeleteCryptoAddress201Response response = api.deleteCryptoAddress(cryptoAddressId);
        // TODO: test validations
    }

    /**
     * Get exchange rate
     *
     * This operation retrieves the current exchange rate between a specified currency pair. The exchange rate is updated approximately every 10 minutes.  &lt;Note&gt;This operation returns the exchange rate for reference only. The actual exchange rate may vary due to market fluctuations and other factors.&lt;/Note&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExchangeRateTest() throws ApiException {
        String tokenId = null;
        String currency = null;
        GetExchangeRate200Response response = api.getExchangeRate(tokenId, currency);
        // TODO: test validations
    }

    /**
     * Get payer balance
     *
     * This operation retrieves the total amount received for a specific payer. The information is grouped by token and receiving address. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayerBalanceByAddressTest() throws ApiException {
        String payerId = null;
        String tokenId = null;
        String merchantId = null;
        List<ReceivedAmountPerAddress> response = api.getPayerBalanceByAddress(payerId, tokenId, merchantId);
        // TODO: test validations
    }

    /**
     * Get pay-in order information
     *
     * This operation retrieves details of a specific pay-in order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentOrderDetailByIdTest() throws ApiException {
        String orderId = null;
        Order response = api.getPaymentOrderDetailById(orderId);
        // TODO: test validations
    }

    /**
     * Get developer balance
     *
     * This operation retrieves the balance information for you as the developer. The balance information is grouped by token.  For more information, please refer to [Funds allocation and balances](https://www.cobo.com/developers/v2/payments/amounts-and-balances). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPspBalanceTest() throws ApiException {
        String tokenId = null;
        PspBalance response = api.getPspBalance(tokenId);
        // TODO: test validations
    }

    /**
     * Get refund order information
     *
     * This operation retrieves the detailed information about a specified refund order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundDetailByIdTest() throws ApiException {
        String refundId = null;
        Refund response = api.getRefundDetailById(refundId);
        // TODO: test validations
    }

    /**
     * List all refund orders
     *
     * This operation retrieves the information of all refund orders. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String requestId = null;
        String statuses = null;
        GetRefunds200Response response = api.getRefunds(limit, before, after, merchantId, requestId, statuses);
        // TODO: test validations
    }

    /**
     * Get settlement request information
     *
     * This operation retrieves the information of a specific settlement request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementByIdTest() throws ApiException {
        String settlementRequestId = null;
        Settlement response = api.getSettlementById(settlementRequestId);
        // TODO: test validations
    }

    /**
     * Get withdrawable balances
     *
     * &lt;Warning&gt;This operation has been deprecated.&lt;/Warning&gt; This operation retrieves the balances of specified merchants or the developer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementInfoByIdsTest() throws ApiException {
        String merchantIds = null;
        String currency = null;
        AcquiringType acquiringType = null;
        GetSettlementInfoByIds200Response response = api.getSettlementInfoByIds(merchantIds, currency, acquiringType);
        // TODO: test validations
    }

    /**
     * Get top-up address
     *
     * This operation retrieves the information of the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopUpAddressTest() throws ApiException {
        String tokenId = null;
        String customPayerId = null;
        String merchantId = null;
        TopUpAddress response = api.getTopUpAddress(tokenId, customPayerId, merchantId);
        // TODO: test validations
    }

    /**
     * List all bank accounts
     *
     * This operation retrieves the information of all bank accounts you have registered for payment settlement. Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new bank account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBankAccountsTest() throws ApiException {
        List<BankAccount> response = api.listBankAccounts();
        // TODO: test validations
    }

    /**
     * List crypto addresses
     *
     * This operation retrieves a list of crypto addresses registered for crypto payouts.   Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new crypto address. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCryptoAddressesTest() throws ApiException {
        String tokenId = null;
        List<CryptoAddress> response = api.listCryptoAddresses(tokenId);
        // TODO: test validations
    }

    /**
     * List forced sweeps
     *
     * &lt;Warning&gt;This operation has been deprecated.&lt;/Warning&gt; This operation retrieves the information of all forced sweeps. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listForcedSweepRequestsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String requestId = null;
        ListForcedSweepRequests200Response response = api.listForcedSweepRequests(limit, before, after, requestId);
        // TODO: test validations
    }

    /**
     * List merchant balances
     *
     *  This operation retrieves the balance information for specified merchants. The balance information is grouped by token and acquiring type. If you do not specify the &#x60;merchant_ids&#x60; parameter, the balance information for all merchants will be returned.  For more information, please refer to [Funds allocation and balances](https://www.cobo.com/developers/v2/payments/amounts-and-balances). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMerchantBalancesTest() throws ApiException {
        String tokenId = null;
        AcquiringType acquiringType = null;
        String merchantIds = null;
        ListMerchantBalances200Response response = api.listMerchantBalances(tokenId, acquiringType, merchantIds);
        // TODO: test validations
    }

    /**
     * List all merchants
     *
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMerchantsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String keyword = null;
        UUID walletId = null;
        WalletSetup walletSetup = null;
        ListMerchants200Response response = api.listMerchants(limit, before, after, keyword, walletId, walletSetup);
        // TODO: test validations
    }

    /**
     * List all pay-in orders
     *
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentOrdersTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String pspOrderId = null;
        String statuses = null;
        ListPaymentOrders200Response response = api.listPaymentOrders(limit, before, after, merchantId, pspOrderId, statuses);
        // TODO: test validations
    }

    /**
     * List all supported tokens
     *
     * This operation retrieves the information of all supported tokens. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentSupportedTokensTest() throws ApiException {
        List<SupportedToken> response = api.listPaymentSupportedTokens();
        // TODO: test validations
    }

    /**
     * List payment wallet balances
     *
     * &lt;Warning&gt;This operation has been deprecated.&lt;/Warning&gt; This operation retrieves the balance information for specified payment wallets. The balance information is grouped by token. If you do not specify the &#x60;wallet_ids&#x60; parameter, the balance information for all payment wallets will be returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentWalletBalancesTest() throws ApiException {
        String tokenId = null;
        String walletIds = null;
        ListPaymentWalletBalances200Response response = api.listPaymentWalletBalances(tokenId, walletIds);
        // TODO: test validations
    }

    /**
     * List all settlement details
     *
     * This operation retrieves the information of all settlement details. You can filter the result by merchant ID or status. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementDetailsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String statuses = null;
        ListSettlementDetails200Response response = api.listSettlementDetails(limit, before, after, merchantId, statuses);
        // TODO: test validations
    }

    /**
     * List all settlement requests
     *
     * This operation retrieves the information of all settlement requests. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementRequestsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String requestId = null;
        ListSettlementRequests200Response response = api.listSettlementRequests(limit, before, after, requestId);
        // TODO: test validations
    }

    /**
     * List top-up payer accounts
     *
     * This operation retrieves the accounts of all payers. You can filter the result by merchant ID and payer_id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTopUpPayerAccountsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String payerId = null;
        ListTopUpPayerAccounts200Response response = api.listTopUpPayerAccounts(limit, before, after, merchantId, payerId);
        // TODO: test validations
    }

    /**
     * List payers
     *
     * This operation retrieves the information of all payers under a merchant.   You can filter the result by the payer ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTopUpPayersTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String payerId = null;
        ListTopUpPayers200Response response = api.listTopUpPayers(limit, before, after, merchantId, payerId);
        // TODO: test validations
    }

    /**
     * Estimate fees
     *
     * This operation calculates fees for payment-related operations, including: - **Pay-in**: Fees for accepting payments - **Refunds**: Fees for refunding the payment - **Crypto payouts**: Fees for payouts in crypto - **Fiat off-ramp**: Fees for fiat currency transfers via off-ramp.    The returned fees represent the charges that would apply if the operation were executed immediately. Note that actual fees may vary over time based on your usage volume and applicable fee rates. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentEstimateFeeTest() throws ApiException {
        PaymentEstimateFeeRequest paymentEstimateFeeRequest = null;
        PaymentEstimateFee201Response response = api.paymentEstimateFee(paymentEstimateFeeRequest);
        // TODO: test validations
    }

    /**
     * Update bank account
     *
     * This operation updates the information of an existing bank account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankAccountByIdTest() throws ApiException {
        UUID bankAccountId = null;
        UpdateBankAccountByIdRequest updateBankAccountByIdRequest = null;
        BankAccount response = api.updateBankAccountById(bankAccountId, updateBankAccountByIdRequest);
        // TODO: test validations
    }

    /**
     * Update merchant
     *
     * This operation updates the information of an existing merchant. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMerchantByIdTest() throws ApiException {
        String merchantId = null;
        UpdateMerchantByIdRequest updateMerchantByIdRequest = null;
        Merchant response = api.updateMerchantById(merchantId, updateMerchantByIdRequest);
        // TODO: test validations
    }

    /**
     * Update pay-in order
     *
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentOrderTest() throws ApiException {
        String orderId = null;
        UpdatePaymentOrderRequest updatePaymentOrderRequest = null;
        Order response = api.updatePaymentOrder(orderId, updatePaymentOrderRequest);
        // TODO: test validations
    }

    /**
     * Update refund order
     *
     * This operation updates a specified refund order by modifying its recipient address. You can only update the recipient address for refund orders that have not been processed yet. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRefundByIdTest() throws ApiException {
        String refundId = null;
        UpdateRefundByIdRequest updateRefundByIdRequest = null;
        Refund response = api.updateRefundById(refundId, updateRefundByIdRequest);
        // TODO: test validations
    }

    /**
     * Update top-up address
     *
     * This operation updates the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTopUpAddressTest() throws ApiException {
        UpdateTopUpAddress updateTopUpAddress = null;
        TopUpAddress response = api.updateTopUpAddress(updateTopUpAddress);
        // TODO: test validations
    }

}
