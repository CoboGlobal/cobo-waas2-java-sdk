/*
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cobo.waas2.api;

import com.cobo.waas2.ApiClient;
import com.cobo.waas2.ApiException;
import com.cobo.waas2.Configuration;
import com.cobo.waas2.model.BankAccount;
import com.cobo.waas2.model.CreateBankAccountRequest;
import com.cobo.waas2.model.CreateMerchantRequest;
import com.cobo.waas2.model.CreatePaymentOrderRequest;
import com.cobo.waas2.model.CreateRefundRequest;
import com.cobo.waas2.model.CreateSettlementRequestRequest;
import com.cobo.waas2.model.ErrorResponse;
import com.cobo.waas2.model.GetExchangeRate200Response;
import com.cobo.waas2.model.GetRefunds200Response;
import com.cobo.waas2.model.GetSettlementInfoByIds200Response;
import com.cobo.waas2.model.ListMerchants200Response;
import com.cobo.waas2.model.ListPaymentOrders200Response;
import com.cobo.waas2.model.ListSettlementRequests200Response;
import com.cobo.waas2.model.Merchant;
import com.cobo.waas2.model.Order;
import com.cobo.waas2.model.Refund;
import com.cobo.waas2.model.Settlement;
import java.util.UUID;
import com.cobo.waas2.model.UpdateMerchantByIdRequest;
import com.cobo.waas2.model.UpdatePaymentOrderRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {
    ApiClient defaultClient = Configuration.getDefaultApiClient();
    // set custom base url
    {
        defaultClient.setBasePath("https://api.sandbox.cobo.com/v2");
        defaultClient.setPrivKey("<YOUR_API_PRIVATE_KEY_IN_HEX>");
    }
    private final PaymentApi api = new PaymentApi();

    /**
     * Create bank account
     *
     * This operation registers a bank account for payment settlement.  Upon successful registration, the bank account details can be retrieved using the assigned bank account ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankAccountTest() throws ApiException {
        CreateBankAccountRequest createBankAccountRequest = null;
        BankAccount response = api.createBankAccount(createBankAccountRequest);
        // TODO: test validations
    }

    /**
     * Create merchant
     *
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant&#39;s information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMerchantTest() throws ApiException {
        CreateMerchantRequest createMerchantRequest = null;
        Merchant response = api.createMerchant(createMerchantRequest);
        // TODO: test validations
    }

    /**
     * Create pay-in order
     *
     * This operation creates a pay-in order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentOrderTest() throws ApiException {
        CreatePaymentOrderRequest createPaymentOrderRequest = null;
        Order response = api.createPaymentOrder(createPaymentOrderRequest);
        // TODO: test validations
    }

    /**
     * Create refund order
     *
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        CreateRefundRequest createRefundRequest = null;
        Refund response = api.createRefund(createRefundRequest);
        // TODO: test validations
    }

    /**
     * Create settlement request
     *
     * This operation creates a settlement request to withdraw available balances.   You can include multiple merchants and cryptocurrencies in a single settlement request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSettlementRequestTest() throws ApiException {
        CreateSettlementRequestRequest createSettlementRequestRequest = null;
        Settlement response = api.createSettlementRequest(createSettlementRequestRequest);
        // TODO: test validations
    }

    /**
     * Get exchange rate
     *
     * This operation retrieves the current exchange rate between a specified currency pair. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExchangeRateTest() throws ApiException {
        String tokenId = null;
        String currency = null;
        GetExchangeRate200Response response = api.getExchangeRate(tokenId, currency);
        // TODO: test validations
    }

    /**
     * Get pay-in order information
     *
     * This operation retrieves details of a specific pay-in order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentOrderDetailByIdTest() throws ApiException {
        String orderId = null;
        Order response = api.getPaymentOrderDetailById(orderId);
        // TODO: test validations
    }

    /**
     * Get refund order information
     *
     * This operation retrieves the detailed information about a specified refund order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundDetailByIdTest() throws ApiException {
        String refundId = null;
        Refund response = api.getRefundDetailById(refundId);
        // TODO: test validations
    }

    /**
     * List all refund orders
     *
     * This operation retrieves the information of all refund orders. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        String requestId = null;
        GetRefunds200Response response = api.getRefunds(limit, before, after, merchantId, requestId);
        // TODO: test validations
    }

    /**
     * Get settlement request information
     *
     * This operation retrieves the information of a specific settlement request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementByIdTest() throws ApiException {
        String settlementRequestId = null;
        Settlement response = api.getSettlementById(settlementRequestId);
        // TODO: test validations
    }

    /**
     * Get withdrawable balances
     *
     * This operation retrieves the current withdrawable balances of specified merchants or the developer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettlementInfoByIdsTest() throws ApiException {
        String merchantIds = null;
        String currency = null;
        GetSettlementInfoByIds200Response response = api.getSettlementInfoByIds(merchantIds, currency);
        // TODO: test validations
    }

    /**
     * List all bank accounts
     *
     * This operation retrieves the information of all bank accounts registered. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBankAccountsTest() throws ApiException {
        List<BankAccount> response = api.listBankAccounts();
        // TODO: test validations
    }

    /**
     * List all merchants
     *
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMerchantsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String keyword = null;
        UUID walletId = null;
        ListMerchants200Response response = api.listMerchants(limit, before, after, keyword, walletId);
        // TODO: test validations
    }

    /**
     * List all pay-in orders
     *
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentOrdersTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String merchantId = null;
        ListPaymentOrders200Response response = api.listPaymentOrders(limit, before, after, merchantId);
        // TODO: test validations
    }

    /**
     * List all settlement requests
     *
     * This operation retrieves the information of all settlement requests. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettlementRequestsTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        String requestId = null;
        ListSettlementRequests200Response response = api.listSettlementRequests(limit, before, after, requestId);
        // TODO: test validations
    }

    /**
     * Update bank account
     *
     * This operation updates the information of an existing bank account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBankAccountByIdTest() throws ApiException {
        UUID bankAccountId = null;
        CreateBankAccountRequest createBankAccountRequest = null;
        BankAccount response = api.updateBankAccountById(bankAccountId, createBankAccountRequest);
        // TODO: test validations
    }

    /**
     * Update merchant
     *
     * This operation updates the information of an existing merchant. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMerchantByIdTest() throws ApiException {
        String merchantId = null;
        UpdateMerchantByIdRequest updateMerchantByIdRequest = null;
        Merchant response = api.updateMerchantById(merchantId, updateMerchantByIdRequest);
        // TODO: test validations
    }

    /**
     * Update pay-in order
     *
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentOrderTest() throws ApiException {
        String orderId = null;
        UpdatePaymentOrderRequest updatePaymentOrderRequest = null;
        Order response = api.updatePaymentOrder(orderId, updatePaymentOrderRequest);
        // TODO: test validations
    }

}
